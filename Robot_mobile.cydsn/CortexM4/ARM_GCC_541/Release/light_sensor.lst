ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"light_sensor.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.ADC_1_my_ISR,"ax",%progbits
  21              		.align	1
  22              		.global	ADC_1_my_ISR
  23              		.thumb
  24              		.thumb_func
  25              		.type	ADC_1_my_ISR, %function
  26              	ADC_1_my_ISR:
  27              	.LFB739:
  28              		.file 1 "light_sensor.c"
   1:light_sensor.c **** #include "light_sensor.h"
   2:light_sensor.c **** #include "globals.h"
   3:light_sensor.c **** 
   4:light_sensor.c **** // Definizione della variabile globale
   5:light_sensor.c **** volatile int32_t sample_uV;
   6:light_sensor.c **** 
   7:light_sensor.c **** // Funzione di inizializzazione del sensore di luce
   8:light_sensor.c **** void LightSensor_Init(void) {
   9:light_sensor.c ****     ADC_1_StartEx(ADC_1_my_ISR);
  10:light_sensor.c ****     ADC_1_SetEosMask(0);
  11:light_sensor.c ****    // ADC_1_SetHighLimit(2);
  12:light_sensor.c ****     ADC_1_SetLimitMask(1);
  13:light_sensor.c ****  
  14:light_sensor.c **** 
  15:light_sensor.c **** }
  16:light_sensor.c **** 
  17:light_sensor.c **** void ADC_1_my_ISR(void) {
  29              		.loc 1 17 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39              	.LBB20:
  40              	.LBB21:
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 2


  41              		.file 2 "Generated_Source\\PSoC6/ADC_1.h"
   1:Generated_Source\PSoC6/ADC_1.h **** /***************************************************************************//**
   2:Generated_Source\PSoC6/ADC_1.h **** * \file     ADC_1.h
   3:Generated_Source\PSoC6/ADC_1.h **** * \version  3.10
   4:Generated_Source\PSoC6/ADC_1.h **** *
   5:Generated_Source\PSoC6/ADC_1.h **** * \brief
   6:Generated_Source\PSoC6/ADC_1.h **** * Provides the source code to the API for the ADC_1 Component.
   7:Generated_Source\PSoC6/ADC_1.h **** *
   8:Generated_Source\PSoC6/ADC_1.h **** ********************************************************************************
   9:Generated_Source\PSoC6/ADC_1.h **** * \copyright
  10:Generated_Source\PSoC6/ADC_1.h **** * (c) 2017-2018, Cypress Semiconductor Corporation. All rights reserved.
  11:Generated_Source\PSoC6/ADC_1.h **** * This software, including source code, documentation and related
  12:Generated_Source\PSoC6/ADC_1.h **** * materials ("Software"), is owned by Cypress Semiconductor
  13:Generated_Source\PSoC6/ADC_1.h **** * Corporation ("Cypress") and is protected by and subject to worldwide
  14:Generated_Source\PSoC6/ADC_1.h **** * patent protection (United States and foreign), United States copyright
  15:Generated_Source\PSoC6/ADC_1.h **** * laws and international treaty provisions. Therefore, you may use this
  16:Generated_Source\PSoC6/ADC_1.h **** * Software only as provided in the license agreement accompanying the
  17:Generated_Source\PSoC6/ADC_1.h **** * software package from which you obtained this Software ("EULA").
  18:Generated_Source\PSoC6/ADC_1.h **** * If no EULA applies, Cypress hereby grants you a personal, nonexclusive,
  19:Generated_Source\PSoC6/ADC_1.h **** * non-transferable license to copy, modify, and compile the
  20:Generated_Source\PSoC6/ADC_1.h **** * Software source code solely for use in connection with Cypress's
  21:Generated_Source\PSoC6/ADC_1.h **** * integrated circuit products. Any reproduction, modification, translation,
  22:Generated_Source\PSoC6/ADC_1.h **** * compilation, or representation of this Software except as specified
  23:Generated_Source\PSoC6/ADC_1.h **** * above is prohibited without the express written permission of Cypress.
  24:Generated_Source\PSoC6/ADC_1.h **** * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO
  25:Generated_Source\PSoC6/ADC_1.h **** * WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
  26:Generated_Source\PSoC6/ADC_1.h **** * BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
  27:Generated_Source\PSoC6/ADC_1.h **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  28:Generated_Source\PSoC6/ADC_1.h **** * PARTICULAR PURPOSE. Cypress reserves the right to make
  29:Generated_Source\PSoC6/ADC_1.h **** * changes to the Software without notice. Cypress does not assume any
  30:Generated_Source\PSoC6/ADC_1.h **** * liability arising out of the application or use of the Software or any
  31:Generated_Source\PSoC6/ADC_1.h **** * product or circuit described in the Software. Cypress does not
  32:Generated_Source\PSoC6/ADC_1.h **** * authorize its products for use in any products where a malfunction or
  33:Generated_Source\PSoC6/ADC_1.h **** * failure of the Cypress product may reasonably be expected to result in
  34:Generated_Source\PSoC6/ADC_1.h **** * significant property damage, injury or death ("High Risk Product"). By
  35:Generated_Source\PSoC6/ADC_1.h **** * including Cypress's product in a High Risk Product, the manufacturer
  36:Generated_Source\PSoC6/ADC_1.h **** * of such system or application assumes all risk of such use and in doing
  37:Generated_Source\PSoC6/ADC_1.h **** * so agrees to indemnify Cypress against all liability.
  38:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
  39:Generated_Source\PSoC6/ADC_1.h **** #if !defined(CY_ADC_1_H)
  40:Generated_Source\PSoC6/ADC_1.h **** #define CY_ADC_1_H
  41:Generated_Source\PSoC6/ADC_1.h **** 
  42:Generated_Source\PSoC6/ADC_1.h **** #include <cy_device_headers.h>
  43:Generated_Source\PSoC6/ADC_1.h **** #include <sar/cy_sar.h>
  44:Generated_Source\PSoC6/ADC_1.h **** 
  45:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_VREF_ROUTED                  ((0) == 1u)
  46:Generated_Source\PSoC6/ADC_1.h **** #if (ADC_1_VREF_ROUTED)
  47:Generated_Source\PSoC6/ADC_1.h **** #include "ADC_1_vrefAMux.h"
  48:Generated_Source\PSoC6/ADC_1.h **** #endif
  49:Generated_Source\PSoC6/ADC_1.h **** 
  50:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CLOCK_INTERNAL               ((1) == 1u)
  51:Generated_Source\PSoC6/ADC_1.h **** #if (ADC_1_CLOCK_INTERNAL)
  52:Generated_Source\PSoC6/ADC_1.h **** #include "ADC_1_intSarClock.h"
  53:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_CLOCK_INTERNAL */
  54:Generated_Source\PSoC6/ADC_1.h **** 
  55:Generated_Source\PSoC6/ADC_1.h **** /**
  56:Generated_Source\PSoC6/ADC_1.h **** * \addtogroup group_structures
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 3


  57:Generated_Source\PSoC6/ADC_1.h **** *
  58:Generated_Source\PSoC6/ADC_1.h **** */
  59:Generated_Source\PSoC6/ADC_1.h **** typedef struct
  60:Generated_Source\PSoC6/ADC_1.h **** {
  61:Generated_Source\PSoC6/ADC_1.h ****     uint32_t channelBase;                   /* Start of channels for the configuration */
  62:Generated_Source\PSoC6/ADC_1.h ****     uint32_t numChannels;                   /* Number of channels in the configuration */
  63:Generated_Source\PSoC6/ADC_1.h ****     const cy_stc_sar_config_t *hwConfigStc; /* PDL structure */
  64:Generated_Source\PSoC6/ADC_1.h ****     uint32_t miscConfig;                    /* Miscellaneous configuration bits broken down as foll
  65:Generated_Source\PSoC6/ADC_1.h ****                                             [0] - Freerunning: Set if the sample mode is freerunnin
  66:Generated_Source\PSoC6/ADC_1.h ****                                             [2] - Mux Switch 0: Set when VSSA is used for the neg i
  67:Generated_Source\PSoC6/ADC_1.h ****                                             */
  68:Generated_Source\PSoC6/ADC_1.h **** #if (ADC_1_CLOCK_INTERNAL)
  69:Generated_Source\PSoC6/ADC_1.h ****     uint32_t clkDivider;                    /* Clock divider */
  70:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_CLOCK_INTERNAL */
  71:Generated_Source\PSoC6/ADC_1.h **** 
  72:Generated_Source\PSoC6/ADC_1.h **** } ADC_1_CONFIG_STRUCT;
  73:Generated_Source\PSoC6/ADC_1.h **** /** @} structures */
  74:Generated_Source\PSoC6/ADC_1.h **** 
  75:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
  76:Generated_Source\PSoC6/ADC_1.h **** * Function Prototypes
  77:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
  78:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_SelectConfig(uint32_t config, uint32_t restart);
  79:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_InitConfig(const ADC_1_CONFIG_STRUCT *config);
  80:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_Init(void);
  81:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_Enable(void);
  82:Generated_Source\PSoC6/ADC_1.h **** 
  83:Generated_Source\PSoC6/ADC_1.h **** /**
  84:Generated_Source\PSoC6/ADC_1.h **** * \addtogroup group_general
  85:Generated_Source\PSoC6/ADC_1.h **** * @{
  86:Generated_Source\PSoC6/ADC_1.h **** */
  87:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_Start(void);
  88:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_StartEx(cy_israddress userIsr);
  89:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_Stop(void);
  90:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_StartConvert(void);
  91:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_StopConvert(void);
  92:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_SetConvertMode(cy_en_sar_start_convert_sel_t mode);
  93:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_SetEosMask(uint32_t mask);
  94:Generated_Source\PSoC6/ADC_1.h **** uint32_t ADC_1_IsEndConversion(cy_en_sar_return_mode_t retMode);
  95:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE int16_t ADC_1_GetResult16(uint32_t chan);
  96:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE int32_t ADC_1_GetResult32(uint32_t chan);
  97:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_SetLowLimit(uint32_t lowLimit);
  98:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_SetHighLimit(uint32_t highLimit);
  99:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_SetLimitMask(uint32_t limitMask);
 100:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_SetSatMask(uint32_t satMask);
 101:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE cy_en_sar_status_t ADC_1_SetOffset(uint32_t chan, int16_t offset);
 102:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE cy_en_sar_status_t ADC_1_SetGain(uint32_t chan, int32_t adcGain);
 103:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE float32_t ADC_1_CountsTo_Volts(uint32_t chan, int16_t adcCounts);
 104:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE int16_t ADC_1_CountsTo_mVolts(uint32_t chan, int16_t adcCounts);
 105:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE int32_t ADC_1_CountsTo_uVolts(uint32_t chan, int16_t adcCounts);
 106:Generated_Source\PSoC6/ADC_1.h **** 
 107:Generated_Source\PSoC6/ADC_1.h **** /** @} general */
 108:Generated_Source\PSoC6/ADC_1.h **** 
 109:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_SetChanMask(uint32_t enableMask);
 110:Generated_Source\PSoC6/ADC_1.h **** 
 111:Generated_Source\PSoC6/ADC_1.h **** /**
 112:Generated_Source\PSoC6/ADC_1.h **** * \addtogroup group_power
 113:Generated_Source\PSoC6/ADC_1.h **** * @{
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 4


 114:Generated_Source\PSoC6/ADC_1.h **** */
 115:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_Sleep(void);
 116:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_Wakeup(void);
 117:Generated_Source\PSoC6/ADC_1.h **** 
 118:Generated_Source\PSoC6/ADC_1.h **** /** @} power */
 119:Generated_Source\PSoC6/ADC_1.h **** 
 120:Generated_Source\PSoC6/ADC_1.h **** /**
 121:Generated_Source\PSoC6/ADC_1.h **** * \addtogroup group_interrupt
 122:Generated_Source\PSoC6/ADC_1.h **** * @{
 123:Generated_Source\PSoC6/ADC_1.h **** */
 124:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_ISR(void);
 125:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_IRQ_Enable(void);
 126:Generated_Source\PSoC6/ADC_1.h **** void ADC_1_IRQ_Disable(void);
 127:Generated_Source\PSoC6/ADC_1.h **** 
 128:Generated_Source\PSoC6/ADC_1.h **** /** @} interrupt */
 129:Generated_Source\PSoC6/ADC_1.h **** 
 130:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
 131:Generated_Source\PSoC6/ADC_1.h ****                                   Parameters
 132:Generated_Source\PSoC6/ADC_1.h **** The parameters that are set in the customizer are redefined as constants here.
 133:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
 134:Generated_Source\PSoC6/ADC_1.h **** 
 135:Generated_Source\PSoC6/ADC_1.h **** /*  Sample Mode setting constants */
 136:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_TOTAL_CONFIGS                (1ul)
 137:Generated_Source\PSoC6/ADC_1.h **** 
 138:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 139:Generated_Source\PSoC6/ADC_1.h **** /* Begin configuration 0 customizer defines                                   */
 140:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 141:Generated_Source\PSoC6/ADC_1.h **** 
 142:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SAMPLE_RATE             (100000)
 143:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_CHANNEL_BASE            (0u)
 144:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_CHANNEL_COUNT           (1u)
 145:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_VREF_SEL_MASK           (0x70u)
 146:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_NOMINAL_CLOCK_FREQ      (16666666u)
 147:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_CHANNEL_EN              (0x1u)
 148:Generated_Source\PSoC6/ADC_1.h **** 
 149:Generated_Source\PSoC6/ADC_1.h **** /* Sample Control Register */
 150:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SINGLE_ENDED_FORMAT     (0uL)
 151:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_DIFFERENTIAL_FORMAT     (0uL)
 152:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SAMPLES_AVERAGED        (0uL)
 153:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_RANGE_INTR_MASK         (0x0u)
 154:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SATURATE_INTR_MASK      (0x1u)
 155:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_VNEG_INPUT_SEL          (7)
 156:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SINGLE_PRESENT          (1)
 157:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_VREF_MV_VALUE           (3300)
 158:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_APERTURE_TIME0          (4uL)
 159:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_APERTURE_TIME1          (2uL)
 160:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_APERTURE_TIME2          (2uL)
 161:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_APERTURE_TIME3          (2uL)
 162:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_FREERUNNING             (0u)
 163:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_AVGERAGING_MODE         (2uL)
 164:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_LOW_LIMIT               (512u)
 165:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_HIGH_LIMIT              (1550u)
 166:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_RANGE_COND              (2uL)
 167:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_USE_SOC                 (1uL)
 168:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_VREF_PWR                (2uL)
 169:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_COMP_PWR                (3uL)
 170:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_COMP_DLY                (3uL)
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 5


 171:Generated_Source\PSoC6/ADC_1.h **** 
 172:Generated_Source\PSoC6/ADC_1.h **** /* Clock parameters*/
 173:Generated_Source\PSoC6/ADC_1.h **** #if (ADC_1_CLOCK_INTERNAL)
 174:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_1_CFG0_NOMINAL_CLOCK_FR
 175:Generated_Source\PSoC6/ADC_1.h **** #endif /* (ADC_1_CLOCK_INTERNAL) */
 176:Generated_Source\PSoC6/ADC_1.h **** 
 177:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 178:Generated_Source\PSoC6/ADC_1.h **** /* End configuration 0 customizer defines                                     */
 179:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 180:Generated_Source\PSoC6/ADC_1.h **** 
 181:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 182:Generated_Source\PSoC6/ADC_1.h **** /* Begin configuration 1 customizer defines                                   */
 183:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 184:Generated_Source\PSoC6/ADC_1.h **** 
 185:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_TOTAL_CONFIGS > 1)
 186:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SAMPLE_RATE             ()
 187:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_CHANNEL_BASE            (u)
 188:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_CHANNEL_COUNT           (u)
 189:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_VREF_SEL_MASK           (u)
 190:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_NOMINAL_CLOCK_FREQ      (u)
 191:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_CHANNEL_EN              (u)
 192:Generated_Source\PSoC6/ADC_1.h **** 
 193:Generated_Source\PSoC6/ADC_1.h ****     /* Sample Control Register */
 194:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SINGLE_ENDED_FORMAT     (uL)
 195:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_DIFFERENTIAL_FORMAT     (uL)
 196:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SAMPLES_AVERAGED        (uL)
 197:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_RANGE_INTR_MASK         (u)
 198:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SATURATE_INTR_MASK      (u)
 199:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_VNEG_INPUT_SEL          ()
 200:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SINGLE_PRESENT          ()
 201:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_VREF_MV_VALUE           ()
 202:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_APERTURE_TIME0          (uL)
 203:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_APERTURE_TIME1          (uL)
 204:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_APERTURE_TIME2          (uL)
 205:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_APERTURE_TIME3          (uL)
 206:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_FREERUNNING             (u)
 207:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_AVGERAGING_MODE         (uL)
 208:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_LOW_LIMIT               (u)
 209:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_HIGH_LIMIT              (u)
 210:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_RANGE_COND              (uL)
 211:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_USE_SOC                 (1uL)
 212:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_VREF_PWR                (uL)
 213:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_COMP_PWR                (uL)
 214:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_COMP_DLY                (uL)
 215:Generated_Source\PSoC6/ADC_1.h **** 
 216:Generated_Source\PSoC6/ADC_1.h ****     /* Clock parameters*/
 217:Generated_Source\PSoC6/ADC_1.h ****     #if (ADC_1_CLOCK_INTERNAL)
 218:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG1_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_1_CFG1_NOMINAL_CLOC
 219:Generated_Source\PSoC6/ADC_1.h ****     #endif /* (ADC_1_CLOCK_INTERNAL) */
 220:Generated_Source\PSoC6/ADC_1.h **** #endif /* #if(ADC_1_TOTAL_CONFIGS > 1) */
 221:Generated_Source\PSoC6/ADC_1.h **** 
 222:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 223:Generated_Source\PSoC6/ADC_1.h **** /* End configuration 1 customizer defines                                     */
 224:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 225:Generated_Source\PSoC6/ADC_1.h **** 
 226:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 227:Generated_Source\PSoC6/ADC_1.h **** /* Begin configuration 2 customizer defines                                         */
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 6


 228:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 229:Generated_Source\PSoC6/ADC_1.h **** 
 230:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_TOTAL_CONFIGS > 2)
 231:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SAMPLE_RATE             ()
 232:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_CHANNEL_BASE            (u)
 233:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_CHANNEL_COUNT           (u)
 234:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_VREF_SEL_MASK           (u)
 235:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_NOMINAL_CLOCK_FREQ      (u)
 236:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_CHANNEL_EN              (u)
 237:Generated_Source\PSoC6/ADC_1.h **** 
 238:Generated_Source\PSoC6/ADC_1.h ****     /* Sample Control Register */
 239:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SINGLE_ENDED_FORMAT     (uL)
 240:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_DIFFERENTIAL_FORMAT     (uL)
 241:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SAMPLES_AVERAGED        (uL)
 242:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_RANGE_INTR_MASK         (u)
 243:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SATURATE_INTR_MASK      (u)
 244:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_VNEG_INPUT_SEL          ()
 245:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SINGLE_PRESENT          ()
 246:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_VREF_MV_VALUE           ()
 247:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_APERTURE_TIME0          (uL)
 248:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_APERTURE_TIME1          (uL)
 249:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_APERTURE_TIME2          (uL)
 250:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_APERTURE_TIME3          (uL)
 251:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_FREERUNNING             (u)
 252:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_AVGERAGING_MODE         (uL)
 253:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_LOW_LIMIT               (u)
 254:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_HIGH_LIMIT              (u)
 255:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_RANGE_COND              (uL)
 256:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_USE_SOC                 (1uL)
 257:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_VREF_PWR                (uL)
 258:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_COMP_PWR                (uL)
 259:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_COMP_DLY                (uL)
 260:Generated_Source\PSoC6/ADC_1.h **** 
 261:Generated_Source\PSoC6/ADC_1.h ****     /* Clock parameters*/
 262:Generated_Source\PSoC6/ADC_1.h ****     #if (ADC_1_CLOCK_INTERNAL)
 263:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG2_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_1_CFG2_NOMINAL_CLOC
 264:Generated_Source\PSoC6/ADC_1.h ****     #endif /* (ADC_1_CLOCK_INTERNAL) */
 265:Generated_Source\PSoC6/ADC_1.h **** #endif /* (ADC_1_TOTAL_CONFIGS > 2) */
 266:Generated_Source\PSoC6/ADC_1.h **** 
 267:Generated_Source\PSoC6/ADC_1.h **** 
 268:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 269:Generated_Source\PSoC6/ADC_1.h **** /* End configuration 2 customizer defines                                     */
 270:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 271:Generated_Source\PSoC6/ADC_1.h **** 
 272:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 273:Generated_Source\PSoC6/ADC_1.h **** /* Begin configuration 3 customizer defines                                   */
 274:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 275:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_TOTAL_CONFIGS > 3)
 276:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SAMPLE_RATE             ()
 277:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_CHANNEL_BASE            (u)
 278:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_CHANNEL_COUNT           (u)
 279:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_VREF_SEL_MASK           (u)
 280:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_NOMINAL_CLOCK_FREQ      (u)
 281:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_CHANNEL_EN              (u)
 282:Generated_Source\PSoC6/ADC_1.h **** 
 283:Generated_Source\PSoC6/ADC_1.h ****     /* Sample Control Register */
 284:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SINGLE_ENDED_FORMAT     (uL)
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 7


 285:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_DIFFERENTIAL_FORMAT     (uL)
 286:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SAMPLES_AVERAGED        (uL)
 287:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_RANGE_INTR_MASK         (u)
 288:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SATURATE_INTR_MASK      (u)
 289:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_VNEG_INPUT_SEL          ()
 290:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SINGLE_PRESENT          ()
 291:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_VREF_MV_VALUE           ()
 292:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_APERTURE_TIME0          (uL)
 293:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_APERTURE_TIME1          (uL)
 294:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_APERTURE_TIME2          (uL)
 295:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_APERTURE_TIME3          (uL)
 296:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_FREERUNNING             (u)
 297:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_AVGERAGING_MODE         (uL)
 298:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_LOW_LIMIT               (u)
 299:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_HIGH_LIMIT              (u)
 300:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_RANGE_COND              (uL)
 301:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_USE_SOC                 (1uL)
 302:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_VREF_PWR                (uL)
 303:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_COMP_PWR                (uL)
 304:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_COMP_DLY                (uL)
 305:Generated_Source\PSoC6/ADC_1.h **** 
 306:Generated_Source\PSoC6/ADC_1.h ****     /* Clock parameters*/
 307:Generated_Source\PSoC6/ADC_1.h ****     #if (ADC_1_CLOCK_INTERNAL)
 308:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG3_CLOCKDIVIDER        (((CYDEV_CLK_PERICLK__HZ) / (ADC_1_CFG3_NOMINAL_CLOC
 309:Generated_Source\PSoC6/ADC_1.h ****     #endif /* (ADC_1_CLOCK_INTERNAL) */
 310:Generated_Source\PSoC6/ADC_1.h **** #endif /* (ADC_1_TOTAL_CONFIGS > 3) */
 311:Generated_Source\PSoC6/ADC_1.h **** 
 312:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 313:Generated_Source\PSoC6/ADC_1.h **** /* End configuration 3 customizer defines                                     */
 314:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 315:Generated_Source\PSoC6/ADC_1.h **** 
 316:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_DEFAULT_SAMPLE_MODE_SEL      (0u)
 317:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_FREERUNNING                  (1u)
 318:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_HARDWARESOC                  (1u)
 319:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_NEG_SEL_VSSA_KELVIN          (0x0uL)
 320:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_NEG_SEL_VREF                 (0x7uL)
 321:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_PWR_CTRL_VREF_NORMAL_PWR     (0x0uL)
 322:Generated_Source\PSoC6/ADC_1.h **** 
 323:Generated_Source\PSoC6/ADC_1.h **** /** ADC_1_TOTAL_CHANNELS_NUM
 324:Generated_Source\PSoC6/ADC_1.h **** * This constant represents the number of input channels available for scanning.
 325:Generated_Source\PSoC6/ADC_1.h **** */
 326:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_TOTAL_CHANNELS_NUM           (1u)
 327:Generated_Source\PSoC6/ADC_1.h **** 
 328:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
 329:Generated_Source\PSoC6/ADC_1.h **** *    Variables with External Linkage
 330:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
 331:Generated_Source\PSoC6/ADC_1.h **** /**
 332:Generated_Source\PSoC6/ADC_1.h **** * \addtogroup group_globals
 333:Generated_Source\PSoC6/ADC_1.h **** * Globals are noted in the descriptions of the functions that use globals.
 334:Generated_Source\PSoC6/ADC_1.h **** * They are marked with (R), (W), or (RW) noting whether the variable is read,
 335:Generated_Source\PSoC6/ADC_1.h **** * write, or read/write.
 336:Generated_Source\PSoC6/ADC_1.h **** * @{
 337:Generated_Source\PSoC6/ADC_1.h **** */
 338:Generated_Source\PSoC6/ADC_1.h **** 
 339:Generated_Source\PSoC6/ADC_1.h **** /** ADC_1_initVar
 340:Generated_Source\PSoC6/ADC_1.h **** * The ADC_1_initVar variable is used to indicate
 341:Generated_Source\PSoC6/ADC_1.h **** * initial configuration of this component. The variable is initialized to zero and
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 8


 342:Generated_Source\PSoC6/ADC_1.h **** * set to 1 the first time ADC_1_Start() is called. This allows for
 343:Generated_Source\PSoC6/ADC_1.h **** * component initialization without reinitialization in all subsequent calls to the
 344:Generated_Source\PSoC6/ADC_1.h **** * ADC_1_Start() routine.
 345:Generated_Source\PSoC6/ADC_1.h **** *
 346:Generated_Source\PSoC6/ADC_1.h **** * If reinitialization of the component is required, then the ADC_1_Init() function
 347:Generated_Source\PSoC6/ADC_1.h **** * can be called before the ADC_1_Start() or ADC_1_Enable()
 348:Generated_Source\PSoC6/ADC_1.h **** * functions.
 349:Generated_Source\PSoC6/ADC_1.h **** */
 350:Generated_Source\PSoC6/ADC_1.h **** extern uint8_t ADC_1_initVar;
 351:Generated_Source\PSoC6/ADC_1.h **** extern uint8_t ADC_1_selected;
 352:Generated_Source\PSoC6/ADC_1.h **** extern uint32_t ADC_1_currentConfig;
 353:Generated_Source\PSoC6/ADC_1.h **** 
 354:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_INIT_VAR_INIT_FLAG     (0x01u)
 355:Generated_Source\PSoC6/ADC_1.h **** 
 356:Generated_Source\PSoC6/ADC_1.h **** extern const ADC_1_CONFIG_STRUCT ADC_1_allConfigs[ADC_1_TOTAL_CONFIGS];
 357:Generated_Source\PSoC6/ADC_1.h **** 
 358:Generated_Source\PSoC6/ADC_1.h **** /* SysPm callback structure for deep sleep entry and exit.
 359:Generated_Source\PSoC6/ADC_1.h ****  * Call the Cy_SysPm_RegisterCallback function with this
 360:Generated_Source\PSoC6/ADC_1.h ****  * structure before calling Cy_SysPm_DeepSleep.
 361:Generated_Source\PSoC6/ADC_1.h **** */
 362:Generated_Source\PSoC6/ADC_1.h **** extern cy_stc_syspm_callback_t ADC_1_DeepSleepCallbackStruct;
 363:Generated_Source\PSoC6/ADC_1.h **** 
 364:Generated_Source\PSoC6/ADC_1.h **** /** @} globals */
 365:Generated_Source\PSoC6/ADC_1.h **** 
 366:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 367:Generated_Source\PSoC6/ADC_1.h **** /* *******************Global MUX_SWITCH0 Definitions ************************ */
 368:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 369:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_CFG0_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN)
 370:Generated_Source\PSoC6/ADC_1.h ****     /* Do not connect VSSA to VMINUS when one channel in differential mode used */
 371:Generated_Source\PSoC6/ADC_1.h ****     #if((ADC_1_TOTAL_CHANNELS_NUM == 1u) && (ADC_1_CFG0_SINGLE_PRESENT == 0u))
 372:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_MUX_SWITCH0_INIT      0u
 373:Generated_Source\PSoC6/ADC_1.h ****     #else    /* multiple channels or one single ended channel */
 374:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_MUX_SWITCH0_INIT      1u
 375:Generated_Source\PSoC6/ADC_1.h ****     #endif /* ((ADC_1_TOTAL_CHANNELS_NUM == 1u) && (ADC_1_CFG0_SINGLE_PRESENT == 0u)) */
 376:Generated_Source\PSoC6/ADC_1.h **** #else
 377:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_MUX_SWITCH0_INIT          0u
 378:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_CFG0_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN */
 379:Generated_Source\PSoC6/ADC_1.h **** 
 380:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 381:Generated_Source\PSoC6/ADC_1.h **** /* Begin configuration 0 calculated defines                                   */
 382:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 383:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SAMPLE_TIME01_INIT \
 384:Generated_Source\PSoC6/ADC_1.h ****         ((ADC_1_CFG0_APERTURE_TIME0 \
 385:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 386:Generated_Source\PSoC6/ADC_1.h ****         | (ADC_1_CFG0_APERTURE_TIME1 \
 387:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 388:Generated_Source\PSoC6/ADC_1.h **** 
 389:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SAMPLE_TIME23_INIT \
 390:Generated_Source\PSoC6/ADC_1.h ****         ((ADC_1_CFG0_APERTURE_TIME2 \
 391:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 392:Generated_Source\PSoC6/ADC_1.h ****         | (ADC_1_CFG0_APERTURE_TIME3 \
 393:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 394:Generated_Source\PSoC6/ADC_1.h **** 
 395:Generated_Source\PSoC6/ADC_1.h **** /* Enable soc pin if used */
 396:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_DSI_TRIGGER_EN_INIT \
 397:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_USE_SOC \
 398:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 9


 399:Generated_Source\PSoC6/ADC_1.h **** 
 400:Generated_Source\PSoC6/ADC_1.h **** /* Set soc operation to edge or level based on sample mode */
 401:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_CFG0_FREERUNNING == ADC_1_FREERUNNING)
 402:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 403:Generated_Source\PSoC6/ADC_1.h **** #else /* Edge trigger */
 404:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_DSI_TRIGGER_LEVEL_INIT    (0u)
 405:Generated_Source\PSoC6/ADC_1.h **** #endif /* End ADC_1_CFG0_FREERUNNING == ADC_1_FREERUNNING */
 406:Generated_Source\PSoC6/ADC_1.h **** 
 407:Generated_Source\PSoC6/ADC_1.h **** /* Set SE_NEG_INPUT */
 408:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_CFG0_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN)
 409:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_SE_NEG_INPUT_INIT \
 410:Generated_Source\PSoC6/ADC_1.h ****             ((uint32)(ADC_1_NEG_SEL_VSSA_KELVIN \
 411:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 412:Generated_Source\PSoC6/ADC_1.h **** #elif(ADC_1_CFG0_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VREF)
 413:Generated_Source\PSoC6/ADC_1.h **** 
 414:Generated_Source\PSoC6/ADC_1.h ****     /* Do not connect VNEG to VREF when one channel in differential mode used */
 415:Generated_Source\PSoC6/ADC_1.h ****     /* Only needed for config 0 since 2+ configs == 2+ channels */
 416:Generated_Source\PSoC6/ADC_1.h ****     #if((ADC_1_CFG0_CHANNEL_COUNT == 1u) && (ADC_1_CFG0_SINGLE_PRESENT == 0u))
 417:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG0_SE_NEG_INPUT_INIT     0u
 418:Generated_Source\PSoC6/ADC_1.h ****     #else    /* multiple channels or one single channel */
 419:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG0_SE_NEG_INPUT_INIT     (ADC_1_NEG_SEL_VREF \
 420:Generated_Source\PSoC6/ADC_1.h ****                                                             << SAR_CTRL_NEG_SEL_Pos )
 421:Generated_Source\PSoC6/ADC_1.h ****     #endif /* (ADC_1_CFG0_CHANNEL_COUNT == 1u) && (ADC_1_CFG0_CHANNELS_MODE != 0u) */
 422:Generated_Source\PSoC6/ADC_1.h **** #elif (ADC_1_CFG0_SINGLE_PRESENT != 0u)
 423:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_SE_NEG_INPUT_INIT         ADC_1_CFG0_NEG_OTHER
 424:Generated_Source\PSoC6/ADC_1.h **** #else
 425:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_SE_NEG_INPUT_INIT         0u
 426:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_CFG0_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN */
 427:Generated_Source\PSoC6/ADC_1.h **** 
 428:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 429:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_NEG_OTHER                 (uint16)((uint16)ADC_1_SARMUX__VNEG0 << SAR_CTRL_N
 430:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_SWITCH_CONF_INIT          0u
 431:Generated_Source\PSoC6/ADC_1.h **** #else /* Disable SAR sequencer from enabling routing switches in single channel mode */
 432:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_SWITCH_CONF_INIT          SAR_CTRL_SWITCH_DISABLE_Msk
 433:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_NEG_OTHER                 0u
 434:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_CFG0_CHANNEL_COUNT > 1u */
 435:Generated_Source\PSoC6/ADC_1.h **** 
 436:Generated_Source\PSoC6/ADC_1.h **** /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 437:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_TOTAL_CHANNELS_NUM == 1u)
 438:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_HW_CTRL_NEGVREF_INIT      0u
 439:Generated_Source\PSoC6/ADC_1.h **** #else
 440:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG0_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 441:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_CFG0_CHANNEL_COUNT == 1u */
 442:Generated_Source\PSoC6/ADC_1.h **** 
 443:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_POWER_INIT  (ADC_1_PWR_CTRL_VREF_NORMAL_PWR)
 444:Generated_Source\PSoC6/ADC_1.h **** 
 445:Generated_Source\PSoC6/ADC_1.h **** /* SAMPLE_CTRL initial values */
 446:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SE_RESULT_FORMAT_INIT \
 447:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_SINGLE_ENDED_FORMAT \
 448:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 449:Generated_Source\PSoC6/ADC_1.h **** 
 450:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_DIFF_RESULT_FORMAT_INIT \
 451:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_DIFFERENTIAL_FORMAT \
 452:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 453:Generated_Source\PSoC6/ADC_1.h **** 
 454:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_AVG_SAMPLES_NUM_INIT \
 455:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_SAMPLES_AVERAGED \
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 10


 456:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 457:Generated_Source\PSoC6/ADC_1.h **** 
 458:Generated_Source\PSoC6/ADC_1.h **** /* Combination of Average Mode and Average Shift */
 459:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_AVG_MODE_INIT \
 460:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_AVGERAGING_MODE \
 461:Generated_Source\PSoC6/ADC_1.h ****         << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 462:Generated_Source\PSoC6/ADC_1.h **** 
 463:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_TRIGGER_OUT_INIT      (0u)
 464:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_UAB_SCAN_MODE_INIT    (0u)
 465:Generated_Source\PSoC6/ADC_1.h **** 
 466:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_VREF_POWER_INIT  \
 467:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_VREF_PWR \
 468:Generated_Source\PSoC6/ADC_1.h ****         << SAR_CTRL_PWR_CTRL_VREF_Pos)
 469:Generated_Source\PSoC6/ADC_1.h **** 
 470:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_COMP_PWR_INIT  \
 471:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_COMP_PWR \
 472:Generated_Source\PSoC6/ADC_1.h ****         << SAR_CTRL_COMP_PWR_Pos)
 473:Generated_Source\PSoC6/ADC_1.h **** 
 474:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_COMP_DLY_INIT  \
 475:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_COMP_DLY \
 476:Generated_Source\PSoC6/ADC_1.h ****         << SAR_CTRL_COMP_DLY_Pos)
 477:Generated_Source\PSoC6/ADC_1.h **** 
 478:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_CTRL_INIT  \
 479:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_VREF_POWER_INIT \
 480:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_VREF_SEL_MASK \
 481:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_SE_NEG_INPUT_INIT \
 482:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_HW_CTRL_NEGVREF_INIT \
 483:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_COMP_DLY_INIT \
 484:Generated_Source\PSoC6/ADC_1.h ****         | SAR_CTRL_REFBUF_EN_Msk \
 485:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_COMP_PWR_INIT \
 486:Generated_Source\PSoC6/ADC_1.h ****         | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 487:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_SWITCH_CONF_INIT )
 488:Generated_Source\PSoC6/ADC_1.h **** 
 489:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_SAMPLE_CTRL_INIT \
 490:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_SE_RESULT_FORMAT_INIT \
 491:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_DIFF_RESULT_FORMAT_INIT \
 492:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_AVG_SAMPLES_NUM_INIT \
 493:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_AVG_MODE_INIT \
 494:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_DSI_TRIGGER_LEVEL_INIT \
 495:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_DSI_TRIGGER_EN_INIT \
 496:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_UAB_SCAN_MODE_INIT \
 497:Generated_Source\PSoC6/ADC_1.h ****         | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 498:Generated_Source\PSoC6/ADC_1.h ****         | ADC_1_CFG0_TRIGGER_OUT_INIT \
 499:Generated_Source\PSoC6/ADC_1.h ****         | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 500:Generated_Source\PSoC6/ADC_1.h **** )
 501:Generated_Source\PSoC6/ADC_1.h **** 
 502:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_RANGE_THRES_INIT \
 503:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_LOW_LIMIT \
 504:Generated_Source\PSoC6/ADC_1.h ****         | (uint32)((uint32)ADC_1_CFG0_HIGH_LIMIT \
 505:Generated_Source\PSoC6/ADC_1.h ****         << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 506:Generated_Source\PSoC6/ADC_1.h **** 
 507:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_1_CFG0_RANGE_COND
 508:Generated_Source\PSoC6/ADC_1.h **** 
 509:Generated_Source\PSoC6/ADC_1.h **** /* Misc Config
 510:Generated_Source\PSoC6/ADC_1.h ****     [0] - Freerunning: Set if the sample mode is freerunning
 511:Generated_Source\PSoC6/ADC_1.h **** */
 512:Generated_Source\PSoC6/ADC_1.h **** #define ADC_1_CFG0_MISC_CONFIG_INIT \
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 11


 513:Generated_Source\PSoC6/ADC_1.h ****         (ADC_1_CFG0_FREERUNNING)
 514:Generated_Source\PSoC6/ADC_1.h **** 
 515:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 516:Generated_Source\PSoC6/ADC_1.h **** /* End configuration 0 calculated defines                                     */
 517:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 518:Generated_Source\PSoC6/ADC_1.h **** 
 519:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 520:Generated_Source\PSoC6/ADC_1.h **** /* Begin configuration 1 calculated defines                                   */
 521:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 522:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_TOTAL_CONFIGS > 1)
 523:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SAMPLE_TIME01_INIT \
 524:Generated_Source\PSoC6/ADC_1.h ****             ((ADC_1_CFG1_APERTURE_TIME0 \
 525:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 526:Generated_Source\PSoC6/ADC_1.h ****             | (ADC_1_CFG1_APERTURE_TIME1 \
 527:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 528:Generated_Source\PSoC6/ADC_1.h **** 
 529:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SAMPLE_TIME23_INIT \
 530:Generated_Source\PSoC6/ADC_1.h ****             ((ADC_1_CFG1_APERTURE_TIME2 \
 531:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 532:Generated_Source\PSoC6/ADC_1.h ****             | (ADC_1_CFG1_APERTURE_TIME3 \
 533:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 534:Generated_Source\PSoC6/ADC_1.h **** 
 535:Generated_Source\PSoC6/ADC_1.h ****     /* Enable soc pin if used */
 536:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_DSI_TRIGGER_EN_INIT \
 537:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_USE_SOC \
 538:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 539:Generated_Source\PSoC6/ADC_1.h **** 
 540:Generated_Source\PSoC6/ADC_1.h ****     /* Set soc operation to edge or level based on sample mode */
 541:Generated_Source\PSoC6/ADC_1.h ****     #if(ADC_1_CFG1_FREERUNNING == ADC_1_FREERUNNING)
 542:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG1_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 543:Generated_Source\PSoC6/ADC_1.h ****     #else /* Edge trigger */
 544:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG1_DSI_TRIGGER_LEVEL_INIT    (0u)
 545:Generated_Source\PSoC6/ADC_1.h ****     #endif /* End ADC_1_CFG1_FREERUNNING == ADC_1_FREERUNNING */
 546:Generated_Source\PSoC6/ADC_1.h **** 
 547:Generated_Source\PSoC6/ADC_1.h ****     /* Set SE_NEG_INPUT */
 548:Generated_Source\PSoC6/ADC_1.h ****     #if(ADC_1_CFG1_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN)
 549:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG1_SE_NEG_INPUT_INIT \
 550:Generated_Source\PSoC6/ADC_1.h ****             ((uint32)(ADC_1_NEG_SEL_VSSA_KELVIN \
 551:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 552:Generated_Source\PSoC6/ADC_1.h ****     #elif(ADC_1_CFG1_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VREF)
 553:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG1_SE_NEG_INPUT_INIT     (ADC_1_NEG_SEL_VREF \
 554:Generated_Source\PSoC6/ADC_1.h ****                                                             << SAR_CTRL_NEG_SEL_Pos )
 555:Generated_Source\PSoC6/ADC_1.h ****     #elif (ADC_1_CFG1_SINGLE_PRESENT != 0u)
 556:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG1_SE_NEG_INPUT_INIT         ADC_1_CFG1_NEG_OTHER
 557:Generated_Source\PSoC6/ADC_1.h ****     #else
 558:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG1_SE_NEG_INPUT_INIT         0u
 559:Generated_Source\PSoC6/ADC_1.h ****     #endif /* ADC_1_CFG1_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN */
 560:Generated_Source\PSoC6/ADC_1.h **** 
 561:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_NEG_OTHER                 (uint16)((uint16)ADC_1_SARMUX__VNEG1 << SAR_CTRL_N
 562:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SWITCH_CONF_INIT          0u
 563:Generated_Source\PSoC6/ADC_1.h **** 
 564:Generated_Source\PSoC6/ADC_1.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 565:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 566:Generated_Source\PSoC6/ADC_1.h **** 
 567:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_POWER_INIT  (ADC_1_PWR_CTRL_VREF_NORMAL_PWR)
 568:Generated_Source\PSoC6/ADC_1.h **** 
 569:Generated_Source\PSoC6/ADC_1.h ****     /* SAMPLE_CTRL initial values */
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 12


 570:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SE_RESULT_FORMAT_INIT \
 571:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_SINGLE_ENDED_FORMAT \
 572:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 573:Generated_Source\PSoC6/ADC_1.h **** 
 574:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_DIFF_RESULT_FORMAT_INIT \
 575:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_DIFFERENTIAL_FORMAT \
 576:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 577:Generated_Source\PSoC6/ADC_1.h **** 
 578:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_AVG_SAMPLES_NUM_INIT \
 579:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_SAMPLES_AVERAGED \
 580:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 581:Generated_Source\PSoC6/ADC_1.h **** 
 582:Generated_Source\PSoC6/ADC_1.h ****     /* Combination of Average Mode and Average Shift */
 583:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_AVG_MODE_INIT \
 584:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_AVGERAGING_MODE \
 585:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 586:Generated_Source\PSoC6/ADC_1.h **** 
 587:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_TRIGGER_OUT_INIT      (0u)
 588:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_UAB_SCAN_MODE_INIT    (0u)
 589:Generated_Source\PSoC6/ADC_1.h **** 
 590:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_VREF_POWER_INIT  \
 591:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_VREF_PWR \
 592:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 593:Generated_Source\PSoC6/ADC_1.h **** 
 594:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_COMP_PWR_INIT  \
 595:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_COMP_PWR \
 596:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_COMP_PWR_Pos)
 597:Generated_Source\PSoC6/ADC_1.h **** 
 598:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_COMP_DLY_INIT  \
 599:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_COMP_DLY \
 600:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_COMP_DLY_Pos)
 601:Generated_Source\PSoC6/ADC_1.h **** 
 602:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_CTRL_INIT  \
 603:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_VREF_POWER_INIT \
 604:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_VREF_SEL_MASK \
 605:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_SE_NEG_INPUT_INIT \
 606:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_HW_CTRL_NEGVREF_INIT \
 607:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_COMP_DLY_INIT \
 608:Generated_Source\PSoC6/ADC_1.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 609:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_COMP_PWR_INIT \
 610:Generated_Source\PSoC6/ADC_1.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 611:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_SWITCH_CONF_INIT )
 612:Generated_Source\PSoC6/ADC_1.h **** 
 613:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_SAMPLE_CTRL_INIT \
 614:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_SE_RESULT_FORMAT_INIT \
 615:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_DIFF_RESULT_FORMAT_INIT \
 616:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_AVG_SAMPLES_NUM_INIT \
 617:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_AVG_MODE_INIT \
 618:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_DSI_TRIGGER_LEVEL_INIT \
 619:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_DSI_TRIGGER_EN_INIT \
 620:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_UAB_SCAN_MODE_INIT \
 621:Generated_Source\PSoC6/ADC_1.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 622:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG1_TRIGGER_OUT_INIT \
 623:Generated_Source\PSoC6/ADC_1.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 624:Generated_Source\PSoC6/ADC_1.h ****     )
 625:Generated_Source\PSoC6/ADC_1.h **** 
 626:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_RANGE_THRES_INIT \
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 13


 627:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_LOW_LIMIT \
 628:Generated_Source\PSoC6/ADC_1.h ****             | (uint32)((uint32)ADC_1_CFG1_HIGH_LIMIT \
 629:Generated_Source\PSoC6/ADC_1.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 630:Generated_Source\PSoC6/ADC_1.h **** 
 631:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_1_CFG1_RANGE_COND
 632:Generated_Source\PSoC6/ADC_1.h **** 
 633:Generated_Source\PSoC6/ADC_1.h ****     /* Misc Config
 634:Generated_Source\PSoC6/ADC_1.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 635:Generated_Source\PSoC6/ADC_1.h ****     */
 636:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG1_MISC_CONFIG_INIT \
 637:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG1_FREERUNNING)
 638:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_TOTAL_CONFIGS > 1 */
 639:Generated_Source\PSoC6/ADC_1.h **** 
 640:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 641:Generated_Source\PSoC6/ADC_1.h **** /* End configuration 1 calculated defines                                     */
 642:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 643:Generated_Source\PSoC6/ADC_1.h **** 
 644:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 645:Generated_Source\PSoC6/ADC_1.h **** /* Begin configuration 2 calculated defines                                   */
 646:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 647:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_TOTAL_CONFIGS > 2)
 648:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SAMPLE_TIME01_INIT \
 649:Generated_Source\PSoC6/ADC_1.h ****             ((ADC_1_CFG2_APERTURE_TIME0 \
 650:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 651:Generated_Source\PSoC6/ADC_1.h ****             | (ADC_1_CFG2_APERTURE_TIME1 \
 652:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 653:Generated_Source\PSoC6/ADC_1.h **** 
 654:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SAMPLE_TIME23_INIT \
 655:Generated_Source\PSoC6/ADC_1.h ****             ((ADC_1_CFG2_APERTURE_TIME2 \
 656:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 657:Generated_Source\PSoC6/ADC_1.h ****             | (ADC_1_CFG2_APERTURE_TIME3 \
 658:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 659:Generated_Source\PSoC6/ADC_1.h **** 
 660:Generated_Source\PSoC6/ADC_1.h ****     /* Enable soc pin if used */
 661:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_DSI_TRIGGER_EN_INIT \
 662:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_USE_SOC \
 663:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 664:Generated_Source\PSoC6/ADC_1.h **** 
 665:Generated_Source\PSoC6/ADC_1.h ****     /* Set soc operation to edge or level based on sample mode */
 666:Generated_Source\PSoC6/ADC_1.h ****     #if(ADC_1_CFG2_FREERUNNING == ADC_1_FREERUNNING)
 667:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG2_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 668:Generated_Source\PSoC6/ADC_1.h ****     #else /* Edge trigger */
 669:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG2_DSI_TRIGGER_LEVEL_INIT    (0u)
 670:Generated_Source\PSoC6/ADC_1.h ****     #endif /* End ADC_1_CFG2_FREERUNNING == ADC_1_FREERUNNING */
 671:Generated_Source\PSoC6/ADC_1.h **** 
 672:Generated_Source\PSoC6/ADC_1.h ****     /* Set SE_NEG_INPUT */
 673:Generated_Source\PSoC6/ADC_1.h ****     #if(ADC_1_CFG2_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN)
 674:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG2_SE_NEG_INPUT_INIT \
 675:Generated_Source\PSoC6/ADC_1.h ****             ((uint32)(ADC_1_NEG_SEL_VSSA_KELVIN \
 676:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 677:Generated_Source\PSoC6/ADC_1.h ****     #elif(ADC_1_CFG2_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VREF)
 678:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG2_SE_NEG_INPUT_INIT     (ADC_1_NEG_SEL_VREF \
 679:Generated_Source\PSoC6/ADC_1.h ****                                                                 << SAR_CTRL_NEG_SEL_Pos )
 680:Generated_Source\PSoC6/ADC_1.h ****     #elif (ADC_1_CFG2_SINGLE_PRESENT != 0u)
 681:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG2_SE_NEG_INPUT_INIT         ADC_1_CFG2_NEG_OTHER
 682:Generated_Source\PSoC6/ADC_1.h ****     #else
 683:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG2_SE_NEG_INPUT_INIT         0u
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 14


 684:Generated_Source\PSoC6/ADC_1.h ****     #endif /* ADC_1_CFG2_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN */
 685:Generated_Source\PSoC6/ADC_1.h **** 
 686:Generated_Source\PSoC6/ADC_1.h ****    #define ADC_1_CFG2_NEG_OTHER                 (uint16)((uint16)ADC_1_SARMUX__VNEG2 << SAR_CTRL_NE
 687:Generated_Source\PSoC6/ADC_1.h **** 
 688:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SWITCH_CONF_INIT          0u
 689:Generated_Source\PSoC6/ADC_1.h **** 
 690:Generated_Source\PSoC6/ADC_1.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 691:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 692:Generated_Source\PSoC6/ADC_1.h **** 
 693:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_POWER_INIT  (ADC_1_PWR_CTRL_VREF_NORMAL_PWR)
 694:Generated_Source\PSoC6/ADC_1.h **** 
 695:Generated_Source\PSoC6/ADC_1.h ****     /* SAMPLE_CTRL initial values */
 696:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SE_RESULT_FORMAT_INIT \
 697:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_SINGLE_ENDED_FORMAT \
 698:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 699:Generated_Source\PSoC6/ADC_1.h **** 
 700:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_DIFF_RESULT_FORMAT_INIT \
 701:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_DIFFERENTIAL_FORMAT \
 702:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 703:Generated_Source\PSoC6/ADC_1.h **** 
 704:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_AVG_SAMPLES_NUM_INIT \
 705:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_SAMPLES_AVERAGED \
 706:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 707:Generated_Source\PSoC6/ADC_1.h **** 
 708:Generated_Source\PSoC6/ADC_1.h ****     /* Combination of Average Mode and Average Shift */
 709:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_AVG_MODE_INIT \
 710:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_AVGERAGING_MODE \
 711:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 712:Generated_Source\PSoC6/ADC_1.h **** 
 713:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_TRIGGER_OUT_INIT      (0u)
 714:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_UAB_SCAN_MODE_INIT    (0u)
 715:Generated_Source\PSoC6/ADC_1.h **** 
 716:Generated_Source\PSoC6/ADC_1.h **** 
 717:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_VREF_POWER_INIT  \
 718:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_VREF_PWR \
 719:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 720:Generated_Source\PSoC6/ADC_1.h **** 
 721:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_COMP_PWR_INIT  \
 722:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_COMP_PWR \
 723:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_COMP_PWR_Pos)
 724:Generated_Source\PSoC6/ADC_1.h **** 
 725:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_COMP_DLY_INIT  \
 726:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_COMP_DLY \
 727:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_COMP_DLY_Pos)
 728:Generated_Source\PSoC6/ADC_1.h **** 
 729:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_CTRL_INIT  \
 730:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_VREF_POWER_INIT \
 731:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_VREF_SEL_MASK \
 732:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_SE_NEG_INPUT_INIT \
 733:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_HW_CTRL_NEGVREF_INIT \
 734:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_COMP_DLY_INIT \
 735:Generated_Source\PSoC6/ADC_1.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 736:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_COMP_PWR_INIT \
 737:Generated_Source\PSoC6/ADC_1.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 738:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_SWITCH_CONF_INIT )
 739:Generated_Source\PSoC6/ADC_1.h **** 
 740:Generated_Source\PSoC6/ADC_1.h **** 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 15


 741:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_SAMPLE_CTRL_INIT \
 742:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_SE_RESULT_FORMAT_INIT \
 743:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_DIFF_RESULT_FORMAT_INIT \
 744:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_AVG_SAMPLES_NUM_INIT \
 745:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_AVG_MODE_INIT \
 746:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_DSI_TRIGGER_LEVEL_INIT \
 747:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_DSI_TRIGGER_EN_INIT \
 748:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_UAB_SCAN_MODE_INIT \
 749:Generated_Source\PSoC6/ADC_1.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 750:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG2_TRIGGER_OUT_INIT \
 751:Generated_Source\PSoC6/ADC_1.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 752:Generated_Source\PSoC6/ADC_1.h ****     )
 753:Generated_Source\PSoC6/ADC_1.h **** 
 754:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_RANGE_THRES_INIT \
 755:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_LOW_LIMIT \
 756:Generated_Source\PSoC6/ADC_1.h ****             | (uint32)((uint32)ADC_1_CFG2_HIGH_LIMIT \
 757:Generated_Source\PSoC6/ADC_1.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 758:Generated_Source\PSoC6/ADC_1.h **** 
 759:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_1_CFG2_RANGE_COND
 760:Generated_Source\PSoC6/ADC_1.h **** 
 761:Generated_Source\PSoC6/ADC_1.h ****     /* Misc Config
 762:Generated_Source\PSoC6/ADC_1.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 763:Generated_Source\PSoC6/ADC_1.h ****     */
 764:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG2_MISC_CONFIG_INIT \
 765:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG2_FREERUNNING)
 766:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_TOTAL_CONFIGS > 2 */
 767:Generated_Source\PSoC6/ADC_1.h **** 
 768:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 769:Generated_Source\PSoC6/ADC_1.h **** /* End configuration 2 calculated defines                                     */
 770:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 771:Generated_Source\PSoC6/ADC_1.h **** 
 772:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 773:Generated_Source\PSoC6/ADC_1.h **** /* Begin configuration 3 calculated defines                                   */
 774:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 775:Generated_Source\PSoC6/ADC_1.h **** #if(ADC_1_TOTAL_CONFIGS > 3)
 776:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SAMPLE_TIME01_INIT \
 777:Generated_Source\PSoC6/ADC_1.h ****             ((ADC_1_CFG3_APERTURE_TIME0 \
 778:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) \
 779:Generated_Source\PSoC6/ADC_1.h ****             | (ADC_1_CFG3_APERTURE_TIME1 \
 780:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos))
 781:Generated_Source\PSoC6/ADC_1.h **** 
 782:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SAMPLE_TIME23_INIT \
 783:Generated_Source\PSoC6/ADC_1.h ****             ((ADC_1_CFG3_APERTURE_TIME2 \
 784:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos) \
 785:Generated_Source\PSoC6/ADC_1.h ****             | (ADC_1_CFG3_APERTURE_TIME3 \
 786:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos))
 787:Generated_Source\PSoC6/ADC_1.h **** 
 788:Generated_Source\PSoC6/ADC_1.h ****     /* Enable soc pin if used */
 789:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_DSI_TRIGGER_EN_INIT \
 790:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_USE_SOC \
 791:Generated_Source\PSoC6/ADC_1.h ****              << SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Pos)
 792:Generated_Source\PSoC6/ADC_1.h **** 
 793:Generated_Source\PSoC6/ADC_1.h ****     /* Set soc operation to edge or level based on sample mode */
 794:Generated_Source\PSoC6/ADC_1.h ****     #if(ADC_1_CFG3_FREERUNNING == ADC_1_FREERUNNING)
 795:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG3_DSI_TRIGGER_LEVEL_INIT    (SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk)
 796:Generated_Source\PSoC6/ADC_1.h ****     #else /* Edge trigger */
 797:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG3_DSI_TRIGGER_LEVEL_INIT    (0u)
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 16


 798:Generated_Source\PSoC6/ADC_1.h ****     #endif /* End ADC_1_CFG3_FREERUNNING == ADC_1_FREERUNNING */
 799:Generated_Source\PSoC6/ADC_1.h **** 
 800:Generated_Source\PSoC6/ADC_1.h ****     /* Set SE_NEG_INPUT  */
 801:Generated_Source\PSoC6/ADC_1.h ****     #if(ADC_1_CFG3_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN)
 802:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG3_SE_NEG_INPUT_INIT \
 803:Generated_Source\PSoC6/ADC_1.h ****             ((uint32)(ADC_1_NEG_SEL_VSSA_KELVIN \
 804:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_NEG_SEL_Pos ))
 805:Generated_Source\PSoC6/ADC_1.h ****     #elif(ADC_1_CFG3_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VREF)
 806:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG3_SE_NEG_INPUT_INIT     (ADC_1_NEG_SEL_VREF \
 807:Generated_Source\PSoC6/ADC_1.h ****                                                                 << SAR_CTRL_NEG_SEL_Pos )
 808:Generated_Source\PSoC6/ADC_1.h ****     #elif (ADC_1_CFG3_SINGLE_PRESENT != 0u)
 809:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG3_SE_NEG_INPUT_INIT         ADC_1_CFG3_NEG_OTHER
 810:Generated_Source\PSoC6/ADC_1.h ****     #else
 811:Generated_Source\PSoC6/ADC_1.h ****         #define ADC_1_CFG3_SE_NEG_INPUT_INIT         0u
 812:Generated_Source\PSoC6/ADC_1.h ****     #endif /* ADC_1_CFG3_VNEG_INPUT_SEL == ADC_1_NEG_SEL_VSSA_KELVIN */
 813:Generated_Source\PSoC6/ADC_1.h **** 
 814:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_NEG_OTHER                 (uint16)((uint16)ADC_1_SARMUX__VNEG3 << SAR_CTRL_N
 815:Generated_Source\PSoC6/ADC_1.h **** 
 816:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SWITCH_CONF_INIT          0u
 817:Generated_Source\PSoC6/ADC_1.h **** 
 818:Generated_Source\PSoC6/ADC_1.h ****     /* If the SAR is configured for multiple channels, always set SAR_HW_CTRL_NEGVREF to 1 */
 819:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_HW_CTRL_NEGVREF_INIT      SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk
 820:Generated_Source\PSoC6/ADC_1.h **** 
 821:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_POWER_INIT  (ADC_1_PWR_CTRL_VREF_NORMAL_PWR)
 822:Generated_Source\PSoC6/ADC_1.h **** 
 823:Generated_Source\PSoC6/ADC_1.h ****     /* SAMPLE_CTRL initial values */
 824:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SE_RESULT_FORMAT_INIT \
 825:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_SINGLE_ENDED_FORMAT \
 826:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos)
 827:Generated_Source\PSoC6/ADC_1.h **** 
 828:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_DIFF_RESULT_FORMAT_INIT \
 829:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_DIFFERENTIAL_FORMAT \
 830:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos)
 831:Generated_Source\PSoC6/ADC_1.h **** 
 832:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_AVG_SAMPLES_NUM_INIT \
 833:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_SAMPLES_AVERAGED \
 834:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_AVG_CNT_Pos)
 835:Generated_Source\PSoC6/ADC_1.h **** 
 836:Generated_Source\PSoC6/ADC_1.h ****     /* Combination of Average Mode and Average Shift */
 837:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_AVG_MODE_INIT \
 838:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_AVGERAGING_MODE \
 839:Generated_Source\PSoC6/ADC_1.h ****             << SAR_SAMPLE_CTRL_AVG_SHIFT_Pos)
 840:Generated_Source\PSoC6/ADC_1.h **** 
 841:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_TRIGGER_OUT_INIT      (0u)
 842:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_UAB_SCAN_MODE_INIT    (0u)
 843:Generated_Source\PSoC6/ADC_1.h **** 
 844:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_VREF_POWER_INIT  \
 845:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_VREF_PWR \
 846:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_PWR_CTRL_VREF_Pos)
 847:Generated_Source\PSoC6/ADC_1.h **** 
 848:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_COMP_PWR_INIT  \
 849:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_COMP_PWR \
 850:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_COMP_PWR_Pos)
 851:Generated_Source\PSoC6/ADC_1.h **** 
 852:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_COMP_DLY_INIT  \
 853:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_COMP_DLY \
 854:Generated_Source\PSoC6/ADC_1.h ****             << SAR_CTRL_COMP_DLY_Pos)
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 17


 855:Generated_Source\PSoC6/ADC_1.h **** 
 856:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_CTRL_INIT  \
 857:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_VREF_POWER_INIT \
 858:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_VREF_SEL_MASK \
 859:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_SE_NEG_INPUT_INIT \
 860:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_HW_CTRL_NEGVREF_INIT \
 861:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_COMP_DLY_INIT \
 862:Generated_Source\PSoC6/ADC_1.h ****             | SAR_CTRL_REFBUF_EN_Msk \
 863:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_COMP_PWR_INIT \
 864:Generated_Source\PSoC6/ADC_1.h ****             | SAR_CTRL_DSI_SYNC_CONFIG_Msk  \
 865:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_SWITCH_CONF_INIT )
 866:Generated_Source\PSoC6/ADC_1.h **** 
 867:Generated_Source\PSoC6/ADC_1.h **** 
 868:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_SAMPLE_CTRL_INIT \
 869:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_SE_RESULT_FORMAT_INIT \
 870:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_DIFF_RESULT_FORMAT_INIT \
 871:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_AVG_SAMPLES_NUM_INIT \
 872:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_AVG_MODE_INIT \
 873:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_DSI_TRIGGER_LEVEL_INIT \
 874:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_DSI_TRIGGER_EN_INIT \
 875:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_UAB_SCAN_MODE_INIT \
 876:Generated_Source\PSoC6/ADC_1.h ****             | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 877:Generated_Source\PSoC6/ADC_1.h ****             | ADC_1_CFG3_TRIGGER_OUT_INIT \
 878:Generated_Source\PSoC6/ADC_1.h ****             | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk \
 879:Generated_Source\PSoC6/ADC_1.h ****     )
 880:Generated_Source\PSoC6/ADC_1.h **** 
 881:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_RANGE_THRES_INIT \
 882:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_LOW_LIMIT \
 883:Generated_Source\PSoC6/ADC_1.h ****             | (uint32)((uint32)ADC_1_CFG3_HIGH_LIMIT \
 884:Generated_Source\PSoC6/ADC_1.h ****             << SAR_RANGE_THRES_RANGE_HIGH_Pos))
 885:Generated_Source\PSoC6/ADC_1.h **** 
 886:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_RANGE_COND_INIT   (cy_en_sar_range_detect_condition_t)ADC_1_CFG3_RANGE_COND
 887:Generated_Source\PSoC6/ADC_1.h **** 
 888:Generated_Source\PSoC6/ADC_1.h ****     /* Misc Config
 889:Generated_Source\PSoC6/ADC_1.h ****         [0] - Freerunning: Set if the sample mode is freerunning
 890:Generated_Source\PSoC6/ADC_1.h ****     */
 891:Generated_Source\PSoC6/ADC_1.h ****     #define ADC_1_CFG3_MISC_CONFIG_INIT \
 892:Generated_Source\PSoC6/ADC_1.h ****             (ADC_1_CFG3_FREERUNNING )
 893:Generated_Source\PSoC6/ADC_1.h **** 
 894:Generated_Source\PSoC6/ADC_1.h **** #endif /* ADC_1_TOTAL_CONFIGS > 3 */
 895:Generated_Source\PSoC6/ADC_1.h **** 
 896:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 897:Generated_Source\PSoC6/ADC_1.h **** /* End configuration 3 calculated defines                                     */
 898:Generated_Source\PSoC6/ADC_1.h **** /* ************************************************************************** */
 899:Generated_Source\PSoC6/ADC_1.h **** 
 900:Generated_Source\PSoC6/ADC_1.h **** /******************************************************************************
 901:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_Enable
 902:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//*
 903:Generated_Source\PSoC6/ADC_1.h **** *
 904:Generated_Source\PSoC6/ADC_1.h **** * \brief Enables the component.
 905:Generated_Source\PSoC6/ADC_1.h **** *
 906:Generated_Source\PSoC6/ADC_1.h **** * \param None
 907:Generated_Source\PSoC6/ADC_1.h **** *
 908:Generated_Source\PSoC6/ADC_1.h **** * \return None
 909:Generated_Source\PSoC6/ADC_1.h **** *
 910:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect
 911:Generated_Source\PSoC6/ADC_1.h **** *  None
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 18


 912:Generated_Source\PSoC6/ADC_1.h **** *
 913:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
 914:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_Enable(void)
 915:Generated_Source\PSoC6/ADC_1.h **** {
 916:Generated_Source\PSoC6/ADC_1.h ****     Cy_SAR_Enable(ADC_1_SAR__HW);
 917:Generated_Source\PSoC6/ADC_1.h **** }
 918:Generated_Source\PSoC6/ADC_1.h **** 
 919:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
 920:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_Stop
 921:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
 922:Generated_Source\PSoC6/ADC_1.h **** *
 923:Generated_Source\PSoC6/ADC_1.h **** * \brief This function stops ADC conversions and puts the ADC into its lowest
 924:Generated_Source\PSoC6/ADC_1.h **** * power mode.
 925:Generated_Source\PSoC6/ADC_1.h **** *
 926:Generated_Source\PSoC6/ADC_1.h **** * \param None
 927:Generated_Source\PSoC6/ADC_1.h **** *
 928:Generated_Source\PSoC6/ADC_1.h **** * \return None
 929:Generated_Source\PSoC6/ADC_1.h **** *
 930:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect
 931:Generated_Source\PSoC6/ADC_1.h **** * Do not use the ADC_1_Stop() API to halt conversions. Instead use the
 932:Generated_Source\PSoC6/ADC_1.h **** * ADC_1_StopConvert() API. If you use the ADC_1_Stop() API
 933:Generated_Source\PSoC6/ADC_1.h **** * to halt conversions then later use the ADC_1_Start() and
 934:Generated_Source\PSoC6/ADC_1.h **** * ADC_1_StartConvert() APIs to resume conversions, the first channel
 935:Generated_Source\PSoC6/ADC_1.h **** * of the scan may be corrupt. The ADC_1_StopConvert() API will enable
 936:Generated_Source\PSoC6/ADC_1.h **** * the ADC_1 to complete the current scan of channels. After the
 937:Generated_Source\PSoC6/ADC_1.h **** * channel scan is complete, the ADC_1 will stop all conversions, which
 938:Generated_Source\PSoC6/ADC_1.h **** * can be detected by the use of an ISR or the ADC_1_IsEndConversion()
 939:Generated_Source\PSoC6/ADC_1.h **** * function.
 940:Generated_Source\PSoC6/ADC_1.h **** *
 941:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
 942:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_Stop(void)
 943:Generated_Source\PSoC6/ADC_1.h **** {
 944:Generated_Source\PSoC6/ADC_1.h ****     Cy_SAR_Disable(ADC_1_SAR__HW);
 945:Generated_Source\PSoC6/ADC_1.h **** }
 946:Generated_Source\PSoC6/ADC_1.h **** 
 947:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
 948:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_StopConvert
 949:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
 950:Generated_Source\PSoC6/ADC_1.h **** *
 951:Generated_Source\PSoC6/ADC_1.h **** * \brief Forces the ADC_1 to stop conversions. If a conversion is
 952:Generated_Source\PSoC6/ADC_1.h **** * currently executing, that conversion will complete, but no further conversions
 953:Generated_Source\PSoC6/ADC_1.h **** * will occur.
 954:Generated_Source\PSoC6/ADC_1.h **** *
 955:Generated_Source\PSoC6/ADC_1.h **** * \param None
 956:Generated_Source\PSoC6/ADC_1.h **** *
 957:Generated_Source\PSoC6/ADC_1.h **** * \return None
 958:Generated_Source\PSoC6/ADC_1.h **** *
 959:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
 960:Generated_Source\PSoC6/ADC_1.h **** *
 961:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
 962:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_StopConvert(void)
 963:Generated_Source\PSoC6/ADC_1.h **** {
 964:Generated_Source\PSoC6/ADC_1.h ****     Cy_SAR_StopConvert(ADC_1_SAR__HW);
 965:Generated_Source\PSoC6/ADC_1.h **** }
 966:Generated_Source\PSoC6/ADC_1.h **** 
 967:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
 968:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_GetResult16
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 19


 969:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
 970:Generated_Source\PSoC6/ADC_1.h **** *
 971:Generated_Source\PSoC6/ADC_1.h **** * \brief Gets the data available in the channel result data register
 972:Generated_Source\PSoC6/ADC_1.h **** *
 973:Generated_Source\PSoC6/ADC_1.h **** * \param chan The ADC_1 channel to read the result from. The first
 974:Generated_Source\PSoC6/ADC_1.h **** * channel is 0.
 975:Generated_Source\PSoC6/ADC_1.h **** *
 976:Generated_Source\PSoC6/ADC_1.h **** * \return Returns converted data as a signed 16-bit integer.
 977:Generated_Source\PSoC6/ADC_1.h **** *
 978:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
 979:Generated_Source\PSoC6/ADC_1.h **** *
 980:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
 981:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE int16_t ADC_1_GetResult16(uint32_t chan)
 982:Generated_Source\PSoC6/ADC_1.h **** {
 983:Generated_Source\PSoC6/ADC_1.h ****     /* Halt CPU in debug mode if channel is out of valid range */
 984:Generated_Source\PSoC6/ADC_1.h ****     CY_ASSERT(chan < ADC_1_allConfigs[ADC_1_currentConfig].numChannels);
 985:Generated_Source\PSoC6/ADC_1.h **** 
 986:Generated_Source\PSoC6/ADC_1.h ****     return Cy_SAR_GetResult16(ADC_1_SAR__HW, chan);
  42              		.loc 2 986 0
  43 0002 0E4C     		ldr	r4, .L2
  44              	.LBE21:
  45              	.LBE20:
  18:light_sensor.c ****     // Pulisce l'interrupt in sospeso
  19:light_sensor.c ****    //NVIC_ClearPendingIRQ(ADC_1_IRQ_cfg.intrSrc);
  20:light_sensor.c ****     
  21:light_sensor.c ****     // Inizializza il campione a 0
  22:light_sensor.c ****     sample_uV = 0;
  46              		.loc 1 22 0
  47 0004 0E4E     		ldr	r6, .L2+4
  48 0006 0025     		movs	r5, #0
  49              	.LBB24:
  50              	.LBB22:
  51              		.loc 2 986 0
  52 0008 2946     		mov	r1, r5
  53 000a 2046     		mov	r0, r4
  54              	.LBE22:
  55              	.LBE24:
  56              		.loc 1 22 0
  57 000c 3560     		str	r5, [r6]
  58              	.LVL0:
  59              	.LBB25:
  60              	.LBB23:
  61              		.loc 2 986 0
  62 000e FFF7FEFF 		bl	Cy_SAR_GetResult16
  63              	.LVL1:
  64              	.LBE23:
  65              	.LBE25:
  23:light_sensor.c ****     
  24:light_sensor.c ****     // Ottiene il risultato grezzo dell'ADC
  25:light_sensor.c ****     int16_t raw_counts = ADC_1_GetResult16(0);
  26:light_sensor.c ****     
  27:light_sensor.c ****     // Converte il risultato grezzo in conti
  28:light_sensor.c ****     int16_t counts = Cy_SAR_RawCounts2Counts(ADC_1_SAR__HW, 0, raw_counts);
  66              		.loc 1 28 0
  67 0012 2946     		mov	r1, r5
  68 0014 0246     		mov	r2, r0
  69 0016 2046     		mov	r0, r4
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 20


  70 0018 FFF7FEFF 		bl	Cy_SAR_RawCounts2Counts
  71              	.LVL2:
  72              	.LBB26:
  73              	.LBB27:
 987:Generated_Source\PSoC6/ADC_1.h **** }
 988:Generated_Source\PSoC6/ADC_1.h **** 
 989:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
 990:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_GetResult32
 991:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
 992:Generated_Source\PSoC6/ADC_1.h **** *
 993:Generated_Source\PSoC6/ADC_1.h **** * \brief Gets the data available in the channel result data register.
 994:Generated_Source\PSoC6/ADC_1.h **** *
 995:Generated_Source\PSoC6/ADC_1.h **** * \param chan The ADC_1 channel to read the result from. The first
 996:Generated_Source\PSoC6/ADC_1.h **** * channel is 0.
 997:Generated_Source\PSoC6/ADC_1.h **** *
 998:Generated_Source\PSoC6/ADC_1.h **** * \return Returns converted data as a signed 32-bit integer.
 999:Generated_Source\PSoC6/ADC_1.h **** *
1000:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
1001:Generated_Source\PSoC6/ADC_1.h **** *
1002:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1003:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE int32_t ADC_1_GetResult32(uint32_t chan)
1004:Generated_Source\PSoC6/ADC_1.h **** {
1005:Generated_Source\PSoC6/ADC_1.h ****     int32_t finalResult;
1006:Generated_Source\PSoC6/ADC_1.h **** 
1007:Generated_Source\PSoC6/ADC_1.h ****     /* Halt CPU in debug mode if channel is out of valid range */
1008:Generated_Source\PSoC6/ADC_1.h ****     CY_ASSERT(chan < ADC_1_allConfigs[ADC_1_currentConfig].numChannels);
1009:Generated_Source\PSoC6/ADC_1.h **** 
1010:Generated_Source\PSoC6/ADC_1.h ****     finalResult = Cy_SAR_GetResult32(ADC_1_SAR__HW, chan);
1011:Generated_Source\PSoC6/ADC_1.h **** 
1012:Generated_Source\PSoC6/ADC_1.h ****     return finalResult;
1013:Generated_Source\PSoC6/ADC_1.h **** }
1014:Generated_Source\PSoC6/ADC_1.h **** 
1015:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
1016:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_SetLowLimit
1017:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1018:Generated_Source\PSoC6/ADC_1.h **** *
1019:Generated_Source\PSoC6/ADC_1.h **** * \brief Sets the low limit parameter for a limit condition.
1020:Generated_Source\PSoC6/ADC_1.h **** *
1021:Generated_Source\PSoC6/ADC_1.h **** * \param lowLimit The low limit for a limit condition.
1022:Generated_Source\PSoC6/ADC_1.h **** *
1023:Generated_Source\PSoC6/ADC_1.h **** * \return None
1024:Generated_Source\PSoC6/ADC_1.h **** *
1025:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
1026:Generated_Source\PSoC6/ADC_1.h **** *
1027:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1028:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_SetLowLimit(uint32_t lowLimit)
1029:Generated_Source\PSoC6/ADC_1.h **** {
1030:Generated_Source\PSoC6/ADC_1.h ****     Cy_SAR_SetLowLimit(ADC_1_SAR__HW, lowLimit);
1031:Generated_Source\PSoC6/ADC_1.h **** }
1032:Generated_Source\PSoC6/ADC_1.h **** 
1033:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
1034:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_SetHighLimit
1035:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1036:Generated_Source\PSoC6/ADC_1.h **** *
1037:Generated_Source\PSoC6/ADC_1.h **** * \brief Sets the high limit parameter for a limit condition.
1038:Generated_Source\PSoC6/ADC_1.h **** *
1039:Generated_Source\PSoC6/ADC_1.h **** * \param highLimit The high limit for a limit condition.
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 21


1040:Generated_Source\PSoC6/ADC_1.h **** *
1041:Generated_Source\PSoC6/ADC_1.h **** * \return None
1042:Generated_Source\PSoC6/ADC_1.h **** *
1043:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
1044:Generated_Source\PSoC6/ADC_1.h **** *
1045:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1046:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_SetHighLimit(uint32_t highLimit)
1047:Generated_Source\PSoC6/ADC_1.h **** {
1048:Generated_Source\PSoC6/ADC_1.h ****     Cy_SAR_SetHighLimit(ADC_1_SAR__HW, highLimit);
1049:Generated_Source\PSoC6/ADC_1.h **** }
1050:Generated_Source\PSoC6/ADC_1.h **** 
1051:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
1052:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_SetLimitMask
1053:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1054:Generated_Source\PSoC6/ADC_1.h **** *
1055:Generated_Source\PSoC6/ADC_1.h **** * \brief Sets the channel limit condition mask.
1056:Generated_Source\PSoC6/ADC_1.h **** *
1057:Generated_Source\PSoC6/ADC_1.h **** *
1058:Generated_Source\PSoC6/ADC_1.h **** * \param limitMask
1059:Generated_Source\PSoC6/ADC_1.h **** * Sets which channels can cause a limit condition interrupt.
1060:Generated_Source\PSoC6/ADC_1.h **** * Bit N of the mask enables the limit condition interrupt for channel N.
1061:Generated_Source\PSoC6/ADC_1.h **** * The limitMask cannot be larger than the number of channels.
1062:Generated_Source\PSoC6/ADC_1.h **** * If a channel is not enabled, it cannot cause any interrupts.
1063:Generated_Source\PSoC6/ADC_1.h **** *
1064:Generated_Source\PSoC6/ADC_1.h **** * \return None
1065:Generated_Source\PSoC6/ADC_1.h **** *
1066:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
1067:Generated_Source\PSoC6/ADC_1.h **** *
1068:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1069:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_SetLimitMask(uint32_t limitMask)
1070:Generated_Source\PSoC6/ADC_1.h **** {
1071:Generated_Source\PSoC6/ADC_1.h ****     Cy_SAR_SetRangeInterruptMask(ADC_1_SAR__HW, limitMask);
1072:Generated_Source\PSoC6/ADC_1.h **** }
1073:Generated_Source\PSoC6/ADC_1.h **** 
1074:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
1075:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_SetSatMask
1076:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1077:Generated_Source\PSoC6/ADC_1.h **** *
1078:Generated_Source\PSoC6/ADC_1.h **** * \brief Sets the channel saturation event mask.
1079:Generated_Source\PSoC6/ADC_1.h **** *
1080:Generated_Source\PSoC6/ADC_1.h **** * \param satMask
1081:Generated_Source\PSoC6/ADC_1.h **** * Sets which channels can cause a saturation event interrupt.
1082:Generated_Source\PSoC6/ADC_1.h **** * Bit N of the mask enables the saturation event interrupt for channel N.
1083:Generated_Source\PSoC6/ADC_1.h **** * The satMask cannot be larger than the number of channels.
1084:Generated_Source\PSoC6/ADC_1.h **** * If a channel is not enabled, it cannot cause any interrupts.
1085:Generated_Source\PSoC6/ADC_1.h **** *
1086:Generated_Source\PSoC6/ADC_1.h **** * \return None
1087:Generated_Source\PSoC6/ADC_1.h **** *
1088:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
1089:Generated_Source\PSoC6/ADC_1.h **** *
1090:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1091:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE void ADC_1_SetSatMask(uint32_t satMask)
1092:Generated_Source\PSoC6/ADC_1.h **** {
1093:Generated_Source\PSoC6/ADC_1.h ****     Cy_SAR_SetSatInterruptMask(ADC_1_SAR__HW, satMask);
1094:Generated_Source\PSoC6/ADC_1.h **** }
1095:Generated_Source\PSoC6/ADC_1.h **** 
1096:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 22


1097:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_SetOffset
1098:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1099:Generated_Source\PSoC6/ADC_1.h **** *
1100:Generated_Source\PSoC6/ADC_1.h **** * \brief Sets the ADC offset that is used by the functions ADC_1_CountsTo_uVolts,
1101:Generated_Source\PSoC6/ADC_1.h **** * ADC_1_CountsTo_mVolts, and ADC_1_CountsTo_Volts.
1102:Generated_Source\PSoC6/ADC_1.h **** *
1103:Generated_Source\PSoC6/ADC_1.h **** * Offset is applied to counts before unit scaling and gain.  All CountsTo_[mV, uV, V]olts()
1104:Generated_Source\PSoC6/ADC_1.h **** * functions use the following equation:
1105:Generated_Source\PSoC6/ADC_1.h **** *     V = (Counts/AvgDivider - Offset)*TEN_VOLT/Gain
1106:Generated_Source\PSoC6/ADC_1.h **** * See CountsTo_Volts() for more about this formula.
1107:Generated_Source\PSoC6/ADC_1.h **** *
1108:Generated_Source\PSoC6/ADC_1.h **** * To set channel 0's offset based on known V_offset_mV, use:
1109:Generated_Source\PSoC6/ADC_1.h **** *     ADC_1_SetOffset(0uL, -1 * V_offset_mV * (1uL << (Resolution - 1)) / V_ref_mV);
1110:Generated_Source\PSoC6/ADC_1.h **** *
1111:Generated_Source\PSoC6/ADC_1.h **** * \param chan ADC_1 channel number.
1112:Generated_Source\PSoC6/ADC_1.h **** *
1113:Generated_Source\PSoC6/ADC_1.h **** * \param offset This value is a measured value when the inputs are shorted or
1114:Generated_Source\PSoC6/ADC_1.h **** * connected to the same input voltage.
1115:Generated_Source\PSoC6/ADC_1.h **** *
1116:Generated_Source\PSoC6/ADC_1.h **** * \return cy_en_sar_status_t
1117:Generated_Source\PSoC6/ADC_1.h **** * - CY_SAR_BAD_PARAM: channel number is equal to or greater than CY_SAR_MAX_NUM_CHANNELS
1118:Generated_Source\PSoC6/ADC_1.h **** * - CY_SAR_SUCCESS: offset was set successfully
1119:Generated_Source\PSoC6/ADC_1.h **** *
1120:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
1121:Generated_Source\PSoC6/ADC_1.h **** *
1122:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1123:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE cy_en_sar_status_t ADC_1_SetOffset(uint32_t chan, int16_t offset)
1124:Generated_Source\PSoC6/ADC_1.h **** {
1125:Generated_Source\PSoC6/ADC_1.h ****     /* Halt CPU in debug mode if channel is out of valid range */
1126:Generated_Source\PSoC6/ADC_1.h ****     CY_ASSERT(chan < ADC_1_allConfigs[ADC_1_currentConfig].numChannels);
1127:Generated_Source\PSoC6/ADC_1.h **** 
1128:Generated_Source\PSoC6/ADC_1.h ****     return Cy_SAR_SetOffset(chan, offset);
1129:Generated_Source\PSoC6/ADC_1.h **** }
1130:Generated_Source\PSoC6/ADC_1.h **** 
1131:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
1132:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_SetGain
1133:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1134:Generated_Source\PSoC6/ADC_1.h **** *
1135:Generated_Source\PSoC6/ADC_1.h **** * \brief Sets the ADC_1 gain in counts per 10 volt for the voltage
1136:Generated_Source\PSoC6/ADC_1.h **** * conversion functions. This value is set by default by the reference and
1137:Generated_Source\PSoC6/ADC_1.h **** * input range settings. Gain is applied after offset and unit scaling.  All
1138:Generated_Source\PSoC6/ADC_1.h **** * CountsTo_[mV, uV, V]olts() functions use the following equation:
1139:Generated_Source\PSoC6/ADC_1.h **** *     V = (Counts/AvgDivider - Offset)*TEN_VOLT/Gain
1140:Generated_Source\PSoC6/ADC_1.h **** * See CountsTo_Volts() for more about this formula.
1141:Generated_Source\PSoC6/ADC_1.h **** *
1142:Generated_Source\PSoC6/ADC_1.h **** * To set channel 0's gain based on known V_ref_mV, use:
1143:Generated_Source\PSoC6/ADC_1.h **** *     ADC_1_SetGain(0uL, 10000 * (1uL << (Resolution - 1)) / V_ref_mV);
1144:Generated_Source\PSoC6/ADC_1.h **** *
1145:Generated_Source\PSoC6/ADC_1.h **** * \param chan ADC_1 channel number.
1146:Generated_Source\PSoC6/ADC_1.h **** *
1147:Generated_Source\PSoC6/ADC_1.h **** * \param adcGain ADC_1 gain in counts per 10 volt.
1148:Generated_Source\PSoC6/ADC_1.h **** *
1149:Generated_Source\PSoC6/ADC_1.h **** * \return cy_en_sar_status_t
1150:Generated_Source\PSoC6/ADC_1.h **** * - CY_SAR_BAD_PARAM: channel number is equal to or greater than CY_SAR_MAX_NUM_CHANNELS
1151:Generated_Source\PSoC6/ADC_1.h **** * - CY_SAR_SUCCESS: gain was set successfully
1152:Generated_Source\PSoC6/ADC_1.h **** *
1153:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 23


1154:Generated_Source\PSoC6/ADC_1.h **** *
1155:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1156:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE cy_en_sar_status_t ADC_1_SetGain(uint32_t chan, int32_t adcGain)
1157:Generated_Source\PSoC6/ADC_1.h **** {
1158:Generated_Source\PSoC6/ADC_1.h ****     /* Halt CPU in debug mode if channel is out of valid range */
1159:Generated_Source\PSoC6/ADC_1.h ****     CY_ASSERT(chan < ADC_1_allConfigs[ADC_1_currentConfig].numChannels);
1160:Generated_Source\PSoC6/ADC_1.h **** 
1161:Generated_Source\PSoC6/ADC_1.h ****     return Cy_SAR_SetGain(chan, adcGain);
1162:Generated_Source\PSoC6/ADC_1.h **** }
1163:Generated_Source\PSoC6/ADC_1.h **** 
1164:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
1165:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_CountsTo_Volts
1166:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1167:Generated_Source\PSoC6/ADC_1.h **** *
1168:Generated_Source\PSoC6/ADC_1.h **** * \brief Converts the ADC output to Volts as a float32. For example, if the ADC
1169:Generated_Source\PSoC6/ADC_1.h **** * measured 0.534 volts, the return value would be 0.534.
1170:Generated_Source\PSoC6/ADC_1.h **** * The calculation of voltage depends on the contents of Cy_SAR_offset[],
1171:Generated_Source\PSoC6/ADC_1.h **** * Cy_SAR_countsPer10Volt[], and other parameters.  The equation used is:
1172:Generated_Source\PSoC6/ADC_1.h **** *
1173:Generated_Source\PSoC6/ADC_1.h **** *     V = (Counts/AvgDivider - Offset)*TEN_VOLT/Gain
1174:Generated_Source\PSoC6/ADC_1.h **** * -Counts = Raw Counts from SAR register
1175:Generated_Source\PSoC6/ADC_1.h **** * -AvgDivider = divider based on averaging mode
1176:Generated_Source\PSoC6/ADC_1.h **** *     -Sequential, Sum: AvgDivider = number averaged
1177:Generated_Source\PSoC6/ADC_1.h **** *         Note: The divider should be a maximum of 16. If using more averages,
1178:Generated_Source\PSoC6/ADC_1.h **** *         pre-scale Counts by (number averaged / 16)
1179:Generated_Source\PSoC6/ADC_1.h **** *     -Interleaved, Sum: AvgDivider = number averaged
1180:Generated_Source\PSoC6/ADC_1.h **** *     -Sequential, Fixed: AvgDivider = 1
1181:Generated_Source\PSoC6/ADC_1.h **** * -Offset = Cy_SAR_offset[]
1182:Generated_Source\PSoC6/ADC_1.h **** * -TEN_VOLT = 10V constant and unit scalar.
1183:Generated_Source\PSoC6/ADC_1.h **** * -Gain = Cy_SAR_countsPer10Volt[]
1184:Generated_Source\PSoC6/ADC_1.h **** *
1185:Generated_Source\PSoC6/ADC_1.h **** * When the Vref is based on Vdda, the value used for Vdda is set for the project
1186:Generated_Source\PSoC6/ADC_1.h **** * in the System tab of the DWR.
1187:Generated_Source\PSoC6/ADC_1.h **** *
1188:Generated_Source\PSoC6/ADC_1.h **** * \param chan ADC_1 channel number.
1189:Generated_Source\PSoC6/ADC_1.h **** *
1190:Generated_Source\PSoC6/ADC_1.h **** * \param adcCounts Result from the ADC_1 conversion.
1191:Generated_Source\PSoC6/ADC_1.h **** *
1192:Generated_Source\PSoC6/ADC_1.h **** * \return Result in Volts.
1193:Generated_Source\PSoC6/ADC_1.h **** *
1194:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
1195:Generated_Source\PSoC6/ADC_1.h **** *
1196:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1197:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE float32_t ADC_1_CountsTo_Volts(uint32_t chan, int16_t adcCounts)
1198:Generated_Source\PSoC6/ADC_1.h **** {
1199:Generated_Source\PSoC6/ADC_1.h ****     /* Halt CPU in debug mode if channel is out of valid range */
1200:Generated_Source\PSoC6/ADC_1.h ****     CY_ASSERT(chan < ADC_1_allConfigs[ADC_1_currentConfig].numChannels);
1201:Generated_Source\PSoC6/ADC_1.h **** 
1202:Generated_Source\PSoC6/ADC_1.h ****     return Cy_SAR_CountsTo_Volts(ADC_1_SAR__HW, chan, adcCounts);
1203:Generated_Source\PSoC6/ADC_1.h **** }
1204:Generated_Source\PSoC6/ADC_1.h **** 
1205:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
1206:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_CountsTo_mVolts
1207:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1208:Generated_Source\PSoC6/ADC_1.h **** *
1209:Generated_Source\PSoC6/ADC_1.h **** * \brief Converts the ADC output to millivolts as an int16. For example, if the ADC
1210:Generated_Source\PSoC6/ADC_1.h **** * measured 0.534 volts, the return value would be 534.
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 24


1211:Generated_Source\PSoC6/ADC_1.h **** * The calculation of voltage depends on the contents of Cy_SAR_offset[],
1212:Generated_Source\PSoC6/ADC_1.h **** * Cy_SAR_countsPer10Volt[], and other parameters.  The equation used is:
1213:Generated_Source\PSoC6/ADC_1.h **** *
1214:Generated_Source\PSoC6/ADC_1.h **** *     V = (Counts/AvgDivider - Offset)*TEN_VOLT/Gain
1215:Generated_Source\PSoC6/ADC_1.h **** * -Counts = Raw Counts from SAR register
1216:Generated_Source\PSoC6/ADC_1.h **** * -AvgDivider = divider based on averaging mode
1217:Generated_Source\PSoC6/ADC_1.h **** *     -Sequential, Sum: AvgDivider = number averaged
1218:Generated_Source\PSoC6/ADC_1.h **** *         Note: The divider should be a maximum of 16. If using more averages,
1219:Generated_Source\PSoC6/ADC_1.h **** *         pre-scale Counts by (number averaged / 16)
1220:Generated_Source\PSoC6/ADC_1.h **** *     -Interleaved, Sum: AvgDivider = number averaged
1221:Generated_Source\PSoC6/ADC_1.h **** *     -Sequential, Fixed: AvgDivider = 1
1222:Generated_Source\PSoC6/ADC_1.h **** * -Offset = Cy_SAR_offset[]
1223:Generated_Source\PSoC6/ADC_1.h **** * -TEN_VOLT = 10V constant and unit scalar.
1224:Generated_Source\PSoC6/ADC_1.h **** * -Gain = Cy_SAR_countsPer10Volt[]
1225:Generated_Source\PSoC6/ADC_1.h **** *
1226:Generated_Source\PSoC6/ADC_1.h **** * When the Vref is based on Vdda, the value used for Vdda is set for the project
1227:Generated_Source\PSoC6/ADC_1.h **** * in the System tab of the DWR.
1228:Generated_Source\PSoC6/ADC_1.h **** *
1229:Generated_Source\PSoC6/ADC_1.h **** * \param chan ADC_1 channel number.
1230:Generated_Source\PSoC6/ADC_1.h **** *
1231:Generated_Source\PSoC6/ADC_1.h **** * \param adcCounts Result from the ADC_1 conversion.
1232:Generated_Source\PSoC6/ADC_1.h **** *
1233:Generated_Source\PSoC6/ADC_1.h **** * \return Result in mV.
1234:Generated_Source\PSoC6/ADC_1.h **** *
1235:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None.
1236:Generated_Source\PSoC6/ADC_1.h **** *
1237:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1238:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE int16_t ADC_1_CountsTo_mVolts(uint32_t chan, int16_t adcCounts)
1239:Generated_Source\PSoC6/ADC_1.h **** {
1240:Generated_Source\PSoC6/ADC_1.h ****     /* Halt CPU in debug mode if channel is out of valid range */
1241:Generated_Source\PSoC6/ADC_1.h ****     CY_ASSERT(chan < ADC_1_allConfigs[ADC_1_currentConfig].numChannels);
1242:Generated_Source\PSoC6/ADC_1.h **** 
1243:Generated_Source\PSoC6/ADC_1.h ****     return Cy_SAR_CountsTo_mVolts(ADC_1_SAR__HW, chan, adcCounts);
1244:Generated_Source\PSoC6/ADC_1.h **** }
1245:Generated_Source\PSoC6/ADC_1.h **** 
1246:Generated_Source\PSoC6/ADC_1.h **** /*******************************************************************************
1247:Generated_Source\PSoC6/ADC_1.h **** * Function Name: ADC_1_CountsTo_uVolts
1248:Generated_Source\PSoC6/ADC_1.h **** ****************************************************************************//**
1249:Generated_Source\PSoC6/ADC_1.h **** *
1250:Generated_Source\PSoC6/ADC_1.h **** * \brief Converts the ADC output to microvolts as an int32. For example, if the ADC
1251:Generated_Source\PSoC6/ADC_1.h **** * measured 0.534 volts, the return value would be 534000.
1252:Generated_Source\PSoC6/ADC_1.h **** * The calculation of voltage depends on the contents of Cy_SAR_offset[],
1253:Generated_Source\PSoC6/ADC_1.h **** * Cy_SAR_countsPer10Volt[], and other parameters.  The equation used is:
1254:Generated_Source\PSoC6/ADC_1.h **** *
1255:Generated_Source\PSoC6/ADC_1.h **** *     V = (Counts/AvgDivider - Offset)*TEN_VOLT/Gain
1256:Generated_Source\PSoC6/ADC_1.h **** * -Counts = Raw Counts from SAR register
1257:Generated_Source\PSoC6/ADC_1.h **** * -AvgDivider = divider based on averaging mode
1258:Generated_Source\PSoC6/ADC_1.h **** *     -Sequential, Sum: AvgDivider = number averaged
1259:Generated_Source\PSoC6/ADC_1.h **** *         Note: The divider should be a maximum of 16. If using more averages,
1260:Generated_Source\PSoC6/ADC_1.h **** *         pre-scale Counts by (number averaged / 16)
1261:Generated_Source\PSoC6/ADC_1.h **** *     -Interleaved, Sum: AvgDivider = number averaged
1262:Generated_Source\PSoC6/ADC_1.h **** *     -Sequential, Fixed: AvgDivider = 1
1263:Generated_Source\PSoC6/ADC_1.h **** * -Offset = Cy_SAR_offset[]
1264:Generated_Source\PSoC6/ADC_1.h **** * -TEN_VOLT = 10V constant and unit scalar.
1265:Generated_Source\PSoC6/ADC_1.h **** * -Gain = Cy_SAR_countsPer10Volt[]
1266:Generated_Source\PSoC6/ADC_1.h **** *
1267:Generated_Source\PSoC6/ADC_1.h **** * When the Vref is based on Vdda, the value used for Vdda is set for the project
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 25


1268:Generated_Source\PSoC6/ADC_1.h **** * in the System tab of the DWR.
1269:Generated_Source\PSoC6/ADC_1.h **** *
1270:Generated_Source\PSoC6/ADC_1.h **** * \param chan ADC_1 channel number.
1271:Generated_Source\PSoC6/ADC_1.h **** *
1272:Generated_Source\PSoC6/ADC_1.h **** * \param adcCounts Result from the ADC_1 conversion.
1273:Generated_Source\PSoC6/ADC_1.h **** *
1274:Generated_Source\PSoC6/ADC_1.h **** * \return Result in microvolts.
1275:Generated_Source\PSoC6/ADC_1.h **** *
1276:Generated_Source\PSoC6/ADC_1.h **** * \sideeffect None
1277:Generated_Source\PSoC6/ADC_1.h **** *
1278:Generated_Source\PSoC6/ADC_1.h **** *******************************************************************************/
1279:Generated_Source\PSoC6/ADC_1.h **** __STATIC_INLINE int32_t ADC_1_CountsTo_uVolts(uint32_t chan, int16_t adcCounts)
1280:Generated_Source\PSoC6/ADC_1.h **** {
1281:Generated_Source\PSoC6/ADC_1.h ****     /* Halt CPU in debug mode if channel is out of valid range */
1282:Generated_Source\PSoC6/ADC_1.h ****     CY_ASSERT(chan < ADC_1_allConfigs[ADC_1_currentConfig].numChannels);
1283:Generated_Source\PSoC6/ADC_1.h **** 
1284:Generated_Source\PSoC6/ADC_1.h ****     return Cy_SAR_CountsTo_uVolts(ADC_1_SAR__HW, chan, adcCounts);
  74              		.loc 2 1284 0
  75 001c 2946     		mov	r1, r5
  76 001e 0246     		mov	r2, r0
  77 0020 2046     		mov	r0, r4
  78              	.LVL3:
  79 0022 FFF7FEFF 		bl	Cy_SAR_CountsTo_uVolts
  80              	.LVL4:
  81              	.LBE27:
  82              	.LBE26:
  29:light_sensor.c ****     
  30:light_sensor.c ****     // Converte i conti in microvolt
  31:light_sensor.c ****     sample_uV = ADC_1_CountsTo_uVolts(0, counts);
  32:light_sensor.c ****     enable = 0;
  83              		.loc 1 32 0
  84 0026 074B     		ldr	r3, .L2+8
  31:light_sensor.c ****     enable = 0;
  85              		.loc 1 31 0
  86 0028 3060     		str	r0, [r6]
  87              		.loc 1 32 0
  88 002a 1D60     		str	r5, [r3]
  89              	.LVL5:
  90              	.LBB28:
  91              	.LBB29:
  92              		.file 3 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/sar/cy_sar.h"
   1:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************************************************//**
   2:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \file cy_sar.h
   3:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \version 1.20
   4:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
   5:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Header file for the SAR driver.
   6:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
   7:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ********************************************************************************
   8:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \copyright
   9:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Copyright 2017-2018, Cypress Semiconductor Corporation. All rights reserved.
  10:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * You may use this file only in accordance with the license, terms, conditions,
  11:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * disclaimers, and limitations in the end user license agreement accompanying
  12:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the software package with which this file was provided.
  13:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
  14:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
  15:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /**
  16:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \addtogroup group_sar
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 26


  17:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
  18:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This driver configures and controls the SAR ADC subsystem block.
  19:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  20:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The functions and other declarations used in this driver are in cy_sar.h. 
  21:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * You can include cy_pdl.h (ModusToolbox only) to get access to all functions 
  22:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and declarations in the PDL. 
  23:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  24:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This SAR ADC subsystem is comprised of:
  25:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a 12-bit SAR converter (SARADC)
  26:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - an embedded reference block (SARREF)
  27:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a mux (\ref group_sar_sarmux "SARMUX") at the inputs of the converter
  28:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a sequence controller (\ref group_sar_sarmux "SARSEQ") that enables multi-channel acquisition
  29:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       in a round robin fashion, without CPU intervention, to maximize scan rates.
  30:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  31:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_block_diagram.png
  32:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  33:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The high level features of the subsystem are:
  34:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - maximum sample rate of 1 Msps
  35:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Sixteen individually configurable channels (depends on device routing capabilities)
  36:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - per channel selectable
  37:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - single-ended or differential input mode
  38:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - input from external pin (8 channels in single-ended mode or 4 channels in differential mo
  39:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         or from internal signals (AMUXBUS, CTB, Die Temperature Sensor)
  40:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - choose one of four programmable acquisition times
  41:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - averaging and accumulation
  42:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - scan can be triggered by firmware or hardware in single shot or continuous mode
  43:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - hardware averaging from 2 to 256 samples
  44:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - selectable voltage references
  45:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - internal VDDA and VDDA/2 references
  46:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - buffered 1.2 V bandgap reference from \ref group_sysanalog "AREF"
  47:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       - external reference from dedicated pin
  48:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Interrupt generation
  49:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  50:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_usage Usage
  51:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  52:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The high level steps to use this driver are:
  53:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  54:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_initialization
  55:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_trigger_conversions
  56:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_handle_interrupts
  57:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   -# \ref group_sar_retrieve_result
  58:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  59:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_initialization Initialization and Enable
  60:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  61:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To configure the SAR subsystem, call \ref Cy_SAR_Init. Pass in a pointer to the \ref SAR_Type
  62:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * structure for the base hardware register address and pass in the configuration structure,
  63:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref cy_stc_sar_config_t.
  64:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  65:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * After initialization, call \ref Cy_SAR_Enable to enable the hardware.
  66:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  67:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Here is guidance on how to set the data fields of the configuration structure:
  68:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  69:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_ctrl uint32_t ctrl
  70:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  71:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field specifies configurations that apply to all channels such as the Vref
  72:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * source or the negative terminal selection for all single-ended channels.
  73:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_ctrl_" and "OR" them t
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 27


  74:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_pwr_ctrl_vref_t
  75:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_vref_sel_t
  76:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_bypass_cap_t
  77:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_neg_sel_t
  78:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_hw_ctrl_negvref_t
  79:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_comp_delay_t
  80:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_comp_pwr_t
  81:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_sarmux_deep_sleep_t
  82:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_ctrl_sarseq_routing_switches_t
  83:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  84:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAR_CTRL
  85:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  86:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleCtrl uint32_t sampleCtrl
  87:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  88:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures sampling details that apply to all channels.
  89:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_sample_" and "OR" them
  90:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_result_align_t
  91:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_single_ended_format_t
  92:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_differential_format_t
  93:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_avg_cnt_t
  94:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_avg_mode_t
  95:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_sample_ctrl_trigger_mode_t
  96:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  97:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_CTRL
  98:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
  99:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleTime01 uint32_t sampleTime01
 100:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 101:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the value for sample times 0 and 1 in ADC clock cycles.
 102:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 103:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR has four programmable 10-bit aperture times that are configured using two data fields,
 104:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime01 and
 105:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23.
 106:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Ten bits allow for a range of 0 to 1023 cycles, however 0 and 1 are invalid.
 107:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The minimum aperture time is 167 ns. With an 18 MHz ADC clock, this is
 108:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * equal to 3 cycles or a value of 4 in this field. The actual aperture time is one cycle less than
 109:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the value stored in this field.
 110:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 111:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_sample_time_shift_t.
 112:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 113:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_TIME01
 114:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 115:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_sampleTime23 uint32_t sampleTime23
 116:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 117:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the value for sample times 2 and 3 in ADC clock cycles.
 118:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_sample_time_shift_t.
 119:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 120:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SAMPLE_TIME23
 121:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 122:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeThres uint32_t rangeThres
 123:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 124:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the upper and lower thresholds for the range interrupt.
 125:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * These thresholds apply on a global level for all channels with range detection enabled.
 126:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 127:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ supports range detection to allow for automatic detection of sample values
 128:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * compared to two programmable thresholds without CPU involvement.
 129:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is done after averaging, alignment, and sign extension (if applicable). In other 
 130:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * threshold values need to have the same data format as the result data.
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 28


 131:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The values are interpreted as signed or unsigned according to each channel's configuration.
 132:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 133:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the shifts defined in \ref cy_en_sar_range_thres_shift_t.
 134:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 135:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The \ref Cy_SAR_SetLowLimit and \ref Cy_SAR_SetHighLimit provide run-time configurability of thes
 136:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 137:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_RANGE_THRES
 138:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 139:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeCond cy_en_sar_range_detect_condition_t rangeCond
 140:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 141:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures the condition (below, inside, outside, or above) that will trigger
 142:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the range interrupt. Select a value from the \ref cy_en_sar_range_detect_condition_t enum.
 143:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 144:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_chanEn uint32_t chanEn
 145:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 146:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will be scanned.
 147:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. Bit 0 enables channel 0, bit 1 enables channel 1,
 148:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * bit 2 enables channel 2, and so on.
 149:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 150:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_chanConfig uint32_t chanConfig[16]
 151:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 152:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each channel has its own channel configuration register.
 153:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel configuration specifies which pin/signal is connected to that channel
 154:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and how the channel is sampled.
 155:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 156:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select a value from each of the following enums that begin with "cy_en_sar_chan_config_" and "OR"
 157:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 158:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_input_mode_t
 159:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_pos_pin_addr_t
 160:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_pos_port_addr_t
 161:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_avg_en_t
 162:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_sample_time_t
 163:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_neg_pin_addr_t
 164:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - \ref cy_en_sar_chan_config_neg_port_addr_t
 165:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 166:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Some important considerations are:
 167:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - The POS_PORT_ADDR and POS_PIN_ADDR bit fields are used by the SARSEQ to select
 168:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   the connection to the positive terminal (Vplus) of the ADC for each channel.
 169:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - When the channel is an unpaired differential input (\ref CY_SAR_CHAN_DIFFERENTIAL_UNPAIRED), 
 170:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   NEG_PORT_ADDR and NEG_PIN_ADDR are used by the SARSEQ to select the connection
 171:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   to the negative terminal (Vminus) of the ADC.
 172:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - When the channel is a differential input pair (\ref CY_SAR_CHAN_DIFFERENTIAL_PAIRED), the NEG
 173:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   For differential input pairs, only the pin for the positive terminal needs to be
 174:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   specified and this pin must be even. For example, Pin 0 (positive terminal) and Pin 1 (negative
 175:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   are a pair. Pin 2 (positive terminal) and Pin 3 (negative terminal) are a pair.
 176:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 177:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the SARSEQ is disabled (\ref cy_en_sar_ctrl_sarseq_routing_switches_t) or
 178:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * it is not controlling any switches (\ref group_sar_init_struct_muxSwitchSqCtrl = 0), the port and
 179:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are ignored. This is possible when there is only one channel to scan.
 180:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 181:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CHAN_CONFIG
 182:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 183:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_intrMask uint32_t intrMask
 184:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 185:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which interrupt events (end of scan, overflow, or firmware collision) will 
 186:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 187:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select one or more values from the \ref cy_en_sar_intr_mask_t enum and "OR" them
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 29


 188:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * together.
 189:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 190:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_INTR_MASK
 191:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 192:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_satIntrMask uint32_t satIntrMask
 193:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 194:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will cause a saturation interrupt.
 195:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 196:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ has a saturation detect that is always applied to every conversion.
 197:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This feature detects whether a channel's sample value is equal to the minimum or maximum values.
 198:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This allows the firmware to take action, for example, discard the result, when the SARADC saturat
 199:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The sample value is tested right after conversion, that is, before averaging. This means that it
 200:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * can happen that the interrupt is set while the averaged result in the data register is not
 201:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * equal to the minimum or maximum.
 202:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 203:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. A value of 0 disables saturation detection for all channels.
 204:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 205:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_rangeIntrMask uint32_t rangeIntrMask
 206:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 207:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field configures which channels will cause a range detection interrupt.
 208:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit corresponds to a channel. A value of 0 disables range detection for all channels.
 209:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 210:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_muxSwitch uint32_t muxSwitch
 211:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 212:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field is the firmware control of the SARMUX switches.
 213:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 214:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use one or more values from the \ref cy_en_sar_mux_switch_fw_ctrl_t enum and "OR" them together.
 215:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the SARSEQ is enabled, the SARMUX switches that will be used must
 216:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * also be closed using this firmware control.
 217:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 218:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_MUX_SWITCH
 219:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 220:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Firmware control can be changed at run-time by calling \ref Cy_SAR_SetAnalogSwitch with \ref CY_S
 221:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and the desired switch states.
 222:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 223:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_muxSwitchSqCtrl uint32_t muxSwitchSqCtrl
 224:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 225:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field enables or disables SARSEQ control of the SARMUX switches.
 226:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To disable control of all switches, set this field to 0. To disable the SARSEQ all together,
 227:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * use \ref CY_SAR_SARSEQ_SWITCH_DISABLE when configuring the \ref group_sar_init_struct_ctrl regist
 228:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 229:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use one or more values from the \ref cy_en_sar_mux_switch_sq_ctrl_t enum and "OR" them together.
 230:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 231:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_MUX_SQ_CTRL
 232:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 233:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * SARSEQ control can be changed at run-time by calling \ref Cy_SAR_SetSwitchSarSeqCtrl.
 234:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 235:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_configRouting bool configRouting
 236:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 237:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If true, the \ref group_sar_init_struct_muxSwitch and \ref group_sar_init_struct_muxSwitchSqCtrl 
 238:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * will be used. If false, the fields will be ignored.
 239:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 240:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_init_struct_vrefMvValue uint32_t vrefMvValue
 241:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 242:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This field sets the value of the reference voltage in millivolts used. This value
 243:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is used for converting counts to volts in the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mV
 244:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions.
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 30


 245:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 246:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_trigger_conversions Triggering Conversions
 247:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 248:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR subsystem has the following modes for triggering a conversion:
 249:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 250:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 251:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Mode</th>
 252:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Description</th>
 253:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Usage</th>
 254:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 255:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 256:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Continuous</td>
 257:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>After completing a scan, the
 258:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     SARSEQ will immediately start the next scan. That is, the SARSEQ will always be BUSY.
 259:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     As a result all other triggers, firmware or hardware, are essentially ignored.
 260:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *  </td>
 261:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enter this mode, call \ref Cy_SAR_StartConvert with \ref CY_SAR_START_CONVERT_CONTINUO
 262:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     To stop continuous conversions, call \ref Cy_SAR_StopConvert.
 263:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 264:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 265:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 266:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Firmware single shot</td>
 267:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A single conversion of all enabled channels is triggered with a function call to \ref Cy_
 268:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_START_CONVERT_SINGLE_SHOT.
 269:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 270:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>
 271:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     Firmware triggering is always available by calling \ref Cy_SAR_StartConvert with \ref CY_SAR_
 272:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     To allow only firmware triggering, or disable
 273:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     hardware triggering, set up the \ref cy_stc_sar_config_t config structure with \ref CY_SAR_TR
 274:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 275:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 276:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 277:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Hardware edge sensitive</td>
 278:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A single conversion of all enabled channels is triggered on the rising edge of the hardwa
 279:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     trigger signal.</td>
 280:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enable this mode, set up the \ref cy_stc_sar_config_t config structure with
 281:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE.</td>
 282:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    </tr>
 283:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    <tr>
 284:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Hardware level sensitive</td>
 285:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Conversions are triggered continuously when the hardware trigger signal is high.</td>
 286:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>To enable this mode, set up the \ref cy_stc_sar_config_t config structure with
 287:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     \ref CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL.</td>
 288:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *    </tr>
 289:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 290:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 291:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The trigger mode can be changed during run time with \ref Cy_SAR_SetConvertMode.
 292:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 293:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * For the hardware trigger modes, use the \ref group_trigmux driver to route an internal or externa
 294:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * signal to the SAR trigger input.
 295:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When making the required \ref Cy_TrigMux_Connect calls, use the pre-defined enum, TRIG6_OUT_PASS_
 296:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * for the SAR trigger input.
 297:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 298:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CONFIG_TRIGGER
 299:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 300:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_handle_interrupts Handling Interrupts
 301:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 31


 302:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR can generate interrupts on these events:
 303:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 304:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - End of scan (EOS): when scanning of all enabled channels complete.
 305:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Overflow: when the result register is updated before the previous result is read.
 306:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - FW collision: when a new trigger is received while the SAR is still processing the previous t
 307:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Saturation detection: when the channel result is equal to the minimum or maximum value.
 308:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Range detection: when the channel result meets the programmed upper or lower threshold values
 309:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 310:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR interrupt to the NVIC is raised any time the intersection (logic and) of the interrupt
 311:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * flags and the corresponding interrupt masks are non-zero.
 312:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 313:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Implement an interrupt routine and assign it to the SAR interrupt.
 314:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Use the pre-defined enum, pass_interrupt_sar_IRQn, as the interrupt source for the SAR.
 315:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 316:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following code snippet demonstrates how to implement a routine to handle the interrupt.
 317:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The routine gets called when any one of the SAR interrupts are triggered.
 318:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When servicing an interrupt, the user must clear the interrupt so that subsequent
 319:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * interrupts can be handled.
 320:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 321:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_ISR
 322:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 323:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following code snippet demonstrates how to configure and enable the interrupt.
 324:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 325:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_CONFIG_INTR
 326:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 327:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Alternately, instead of handling the interrupts, the \ref Cy_SAR_IsEndConversion function
 328:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * allows for firmware polling of the end of conversion status.
 329:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 330:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_retrieve_result Retrieve Channel Results
 331:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 332:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Retrieve the ADC result by calling \ref Cy_SAR_GetResult16 with the desired channel.
 333:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To convert the result to a voltage, pass the ADC result to \ref Cy_SAR_CountsTo_Volts, \ref Cy_SA
 334:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts.
 335:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 336:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_clock SAR Clock Configuration
 337:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 338:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR requires a clock. Assign a clock to the SAR using the
 339:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * pre-defined enum, PCLK_PASS_CLOCK_SAR, to identify the SAR subsystem.
 340:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the clock divider value to achieve the desired clock rate. The SAR can support
 341:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * a maximum frequency of 18 MHz.
 342:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 343:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm4.c SAR_SNIPPET_CONFIGURE_CLOCK
 344:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 345:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_scan_time Scan Rate
 346:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 347:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The scan rate is dependent on the following:
 348:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 349:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - ADC clock rate
 350:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Number of channels
 351:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Averaging
 352:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Resolution
 353:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - Acquisition times
 354:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 355:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_acquisition_time Acquisition Time
 356:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 357:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The acquisition time of a channel is based on which of the four global aperture times are selecte
 358:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * channel. The selection is done during initialization per channel with \ref group_sar_init_struct_
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 32


 359:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The four global aperture times are also set during initialization with \ref group_sar_init_struct
 360:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23. Note that these global aperture times are in SAR clock c
 361:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * acquisition time is 1 less than that value in the register.
 362:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 363:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_acquisition_time_eqn.png
 364:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 365:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_channel_sample_time Channel Sample Time
 366:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 367:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The sample time for a channel is the time required to acquire the analog signal
 368:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and convert it to a digital code.
 369:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 370:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_channel_sample_time_eqn.png
 371:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 372:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR ADC is a 12-bit converter so Resolution = 12.
 373:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 374:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_total_scan_time Total Scan Time
 375:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 376:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channels using one of the sequential averaging modes (\ref CY_SAR_AVG_MODE_SEQUENTIAL_ACCUM or \r
 377:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are sampled multiple times per scan. The number of samples averaged are set during initialization
 378:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * with \ref group_sar_init_struct_sampleCtrl using one of the values from \ref cy_en_sar_sample_ctr
 379:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channels that are not averaged or use the \ref CY_SAR_AVG_MODE_INTERLEAVED mode are only sampled 
 380:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 381:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The total scan time is the sum of each channel's sample time multiplied by the samples per scan.
 382:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 383:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_scan_rate_eqn.png
 384:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 385:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * where N is the total number of channels in the scan.
 386:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 387:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_sarmux SARMUX and SARSEQ
 388:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 389:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARMUX is an analog programmable multiplexer. Its switches can be controlled by the SARSEQ or
 390:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and the inputs can come from:
 391:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - a dedicated port (can support 8 single-ended channels or 4 differential channels)
 392:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - an internal die temperature (DieTemp) sensor
 393:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - CTB output via SARBUS0/1 (if CTBs are available on the device)
 394:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - AMUXBUSA/B
 395:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 396:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure shows the SARMUX switches. See the device datasheet for the exact location o
 397:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 398:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_switches.png
 399:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 400:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When using the SARSEQ, the following configurations must be performed:
 401:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - enable SARSEQ control of required switches (see \ref group_sar_init_struct_muxSwitchSqCtrl)
 402:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - close the required switches with firmware (see \ref group_sar_init_struct_muxSwitch)
 403:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   - configure the POS_PORT_ADDR and POS_PIN_ADDR, and if used, the NEG_PORT_ADDR and NEG_PIN_ADDR
 404:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 405:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * While firmware can control every switch in the SARMUX, not every switch can be controlled by the 
 406:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Additionally, switches outside of the SARMUX such as the AMUXBUSA/B switches or
 407:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * CTB switches will require separate function calls (see \ref group_gpio "GPIO" and \ref group_ctb 
 408:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ can control three switches in the \ref group_ctb "CTB" driver (see \ref Cy_CTB_EnableS
 409:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * These switches need to be enabled for SARSEQ control if the CTB outputs are used as the SARMUX in
 410:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 411:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following table shows the required POS_PORT_ADDR and POS_PIN_ADDR settings
 412:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * for different input connections.
 413:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 414:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 415:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 33


 416:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Input Connection Selection</th>
 417:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>POS_PORT_ADDR</th>
 418:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>POS_PIN_ADDR</th>
 419:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 420:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 421:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>SARMUX dedicated port</td>
 422:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX</td>
 423:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_0 through \ref CY_SAR_CHAN_POS_PIN_ADDR_7</td>
 424:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 425:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 426:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>DieTemp sensor</td>
 427:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 428:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_0</td>
 429:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 430:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 431:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>AMUXBUSA</td>
 432:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 433:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_2</td>
 434:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 435:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 436:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>AMUXBUSB</td>
 437:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_SARMUX_VIRT</td>
 438:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_3</td>
 439:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 440:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 441:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>CTB0 Opamp0 1x output</td>
 442:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_CTB0</td>
 443:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_2</td>
 444:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 445:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 446:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>CTB0 Opamp1 1x output</td>
 447:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_POS_PORT_ADDR_CTB0</td>
 448:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>\ref CY_SAR_CHAN_POS_PIN_ADDR_3</td>
 449:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 450:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 451:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 452:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_dietemp Input from DieTemp sensor
 453:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 454:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When using the DieTemp sensor, always use single-ended mode.
 455:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The temperature sensor can be routed to Vplus using the \ref CY_SAR_MUX_FW_TEMP_VPLUS switch.
 456:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Connecting this switch will also enable the sensor. Set the \ref group_sar_acquisition_time "acqu
 457:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * be at least 1 us to meet the settling time of the temperature sensor.
 458:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 459:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_dietemp.png
 460:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 461:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_DIETEMP
 462:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 463:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_se_diff Input from SARMUX port
 464:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 465:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how two GPIOs on the SARMUX dedicated port
 466:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 467:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 468:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_dedicated_port.png
 469:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 470:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_SE_DIFF
 471:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 472:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_ctb Input from CTB output visa SARBUS0/1
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 34


 473:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 474:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how the two opamp outputs from the CTB
 475:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 476:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Note that separate function calls are needed to configure and enable the opamps, perform required
 477:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and enable SARSEQ control of the switches contained in the CTB.
 478:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 479:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_ctb.png
 480:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 481:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_CTB
 482:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 483:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \subsection group_sar_sarmux_amuxbus Input from other pins through AMUXBUSA/B
 484:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 485:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The following figure and code snippet show how two GPIOs on any port through the AMUXBUSA and AMU
 486:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are connected to the SARADC as separate single-ended channels and as a differential-pair channel.
 487:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Note that separate function calls are needed to route the device pins to the SARMUX. The AMUXBUSe
 488:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * are separated into multiple segments and these segments are connected/disconnected using the AMUX
 489:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * registers in the HSIOM. In the following code snippet, to connect Port 1 to the SARMUX, the left 
 490:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * switches of AMUX_SPLIT_CTL[1] and AMUX_SPLIT_CTL[6] need to be closed.
 491:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 492:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \image html sar_sarmux_amuxbus.png
 493:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 494:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_02.cydsn/main_cm4.c SNIPPET_SAR_SARMUX_AMUXBUS
 495:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 496:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_low_power Low Power Support
 497:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This SAR driver provides a callback function to handle power mode transitions.
 498:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The \ref Cy_SAR_DeepSleepCallback function ensures that SAR conversions are stopped
 499:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * before Deep Sleep entry. Upon wakeup, the callback
 500:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * enables the hardware and continuous conversions, if previously enabled.
 501:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 502:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To trigger the callback execution, the callback must be registered before calling \ref Cy_SysPm_C
 503:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_syspm driver for more information about power mode transitions and
 504:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * callback registration.
 505:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 506:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Recall that during configuration of the \ref group_sar_init_struct_ctrl "ctrl" field,
 507:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the SARMUX can be configured to remain enabled in Deep Sleep mode.
 508:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * All other blocks (SARADC, REFBUF, and SARSEQ) do not support Deep Sleep mode operation.
 509:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 510:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_more_information More Information
 511:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * For more information on the SAR ADC subsystem, refer to the technical reference manual (TRM).
 512:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 513:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_MISRA MISRA-C Compliance]
 514:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 515:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This driver has the following specific deviations:
 516:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 517:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 518:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 519:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>MISRA Rule</th>
 520:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Rule Class (Required/Advisory)</th>
 521:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Rule Description</th>
 522:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <th>Description of Deviation(s)</th>
 523:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 524:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 525:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>11.4</td>
 526:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Advisory</td>
 527:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>A cast should not be performed between a pointer to object type and a different pointer t
 528:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>The cy_syspm driver defines the pointer to void in the \ref cy_stc_syspm_callback_params_
 529:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       This SAR driver implements a Deep Sleep callback conforming to the cy_syspm driver requirem
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 35


 530:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       When the callback is called, the base should point to the SAR_Type register address.
 531:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 532:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 533:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 534:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 535:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \section group_sar_changelog Changelog
 536:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * <table class="doxtable">
 537:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr><th>Version</th><th>Changes</th><th>Reason for Change</th></tr>
 538:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 539:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td rowspan="2">1.20</td>
 540:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Flattened the organization of the driver source code into the single source directory and
 541:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Driver library directory-structure simplification.</td>
 542:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 543:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 544:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Added register access layer. Use register access macros instead
 545:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         of direct register access using dereferenced pointers.</td>
 546:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Makes register access device-independent, so that the PDL does 
 547:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         not need to be recompiled for each supported part number.</td>
 548:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 549:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 550:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td rowspan="3">1.10</td>
 551:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Added workaround for parts with out of range CAP_TRIM in Init API.</td>
 552:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Correct CAP_TRIM is necessary achieving specified SAR ADC linearity</td>
 553:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 554:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 555:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Turn off the entire hardware block only if the SARMUX is not enabled 
 556:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *          for Deep Sleep operation.                
 557:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     </td>
 558:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td> Improvement of the \ref Cy_SAR_DeepSleep flow</td>
 559:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 560:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 561:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Updated "Low Power Support" section to describe registering the Deep Sleep callback.
 562:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *         Added parenthesis around logical AND operation in Sleep API.</td>
 563:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Documentation update and clarification</td>
 564:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 565:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   <tr>
 566:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>1.0</td>
 567:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td>Initial version</td>
 568:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *     <td></td>
 569:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   </tr>
 570:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * </table>
 571:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 572:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_macros Macros
 573:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_functions Functions
 574:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \{
 575:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_basic         Initialization and Basic Functions
 576:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_power         Low Power Callback
 577:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_config        Run-time Configuration Functions
 578:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_countsto      Counts Conversion Functions
 579:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_interrupt     Interrupt Functions
 580:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_switches      SARMUX Switch Control Functions
 581:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_functions_helper        Useful Configuration Query Functions
 582:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \}
 583:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_globals Global Variables
 584:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_data_structures Data Structures
 585:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \defgroup group_sar_enums Enumerated Types
 586:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \{
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 36


 587:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_ctrl_register_enums         Control Register Enums
 588:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_sample_ctrl_register_enums  Sample Control Register Enums
 589:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_sample_time_shift_enums     Sample Time Register Enums
 590:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_range_thres_register_enums  Range Interrupt Register Enums
 591:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_chan_config_register_enums  Channel Configuration Register Enums
 592:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_intr_mask_t_register_enums  Interrupt Mask Register Enums
 593:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       \defgroup group_sar_mux_switch_register_enums   SARMUX Switch Control Register Enums
 594:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \}
 595:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 596:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 597:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #if !defined(CY_SAR_H)
 598:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_H
 599:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 600:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stdint.h>
 601:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stdbool.h>
 602:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include <stddef.h>
 603:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_device_headers.h"
 604:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_syslib.h"
 605:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_syspm.h"
 606:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #include "cy_device.h"
 607:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 608:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #ifdef CY_IP_MXS40PASS_SAR
 609:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 610:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #if defined(__cplusplus)
 611:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern "C" {
 612:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #endif
 613:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 614:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_macros
 615:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 616:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 617:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 618:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Driver major version */
 619:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DRV_VERSION_MAJOR        1
 620:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 621:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Driver minor version */
 622:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DRV_VERSION_MINOR        20
 623:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 624:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** SAR driver identifier */
 625:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_ID                       CY_PDL_DRV_ID(0x01u)
 626:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 627:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Maximum number of channels */
 628:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_MAX_NUM_CHANNELS         (PASS_SAR_SAR_CHANNELS)
 629:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 630:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \cond INTERNAL */
 631:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DEINIT                   (0uL)             /**< De-init value for most SAR registers
 632:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_TIME_DEINIT       ((3uL << SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos) | (3uL << SAR_
 633:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CLEAR_ALL_SWITCHES       (0x3FFFFFFFuL)    /**< Value to clear all SARMUX switches *
 634:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_DEINIT_SQ_CTRL           (SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P0_Msk \
 635:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P1_Msk \
 636:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P2_Msk \
 637:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P3_Msk \
 638:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P4_Msk \
 639:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P5_Msk \
 640:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P6_Msk \
 641:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P7_Msk \
 642:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_VSSA_Msk \
 643:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_TEMP_Msk \
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 37


 644:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSA_Msk \
 645:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSB_Msk \
 646:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS0_Msk \
 647:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS1_Msk)
 648:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_CTRL_MASK            (SAR_CTRL_PWR_CTRL_VREF_Msk \
 649:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_VREF_SEL_Msk \
 650:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_VREF_BYP_CAP_EN_Msk \
 651:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_NEG_SEL_Msk \
 652:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_SAR_HW_CTRL_NEGVREF_Msk \
 653:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_COMP_DLY_Msk \
 654:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_REFBUF_EN_Msk \
 655:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_COMP_PWR_Msk \
 656:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DEEPSLEEP_ON_Msk \
 657:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DSI_SYNC_CONFIG_Msk \
 658:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_DSI_MODE_Msk \
 659:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_SWITCH_DISABLE_Msk \
 660:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CTRL_ENABLED_Msk)
 661:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_SAMPLE_CTRL_MASK     (SAR_SAMPLE_CTRL_LEFT_ALIGN_Msk \
 662:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Msk \
 663:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Msk \
 664:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_CNT_Msk \
 665:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_SHIFT_Msk \
 666:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_AVG_MODE_Msk \
 667:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_CONTINUOUS_Msk \
 668:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk \
 669:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_TRIGGER_LEVEL_Msk \
 670:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_DSI_SYNC_TRIGGER_Msk \
 671:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_UAB_SCAN_MODE_Msk \
 672:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_REPEAT_INVALID_Msk \
 673:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_SEL_Msk \
 674:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_SEL_EN_Msk \
 675:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_VALID_IGNORE_Msk \
 676:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_TRIGGER_OUT_EN_Msk \
 677:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_SAMPLE_CTRL_EOS_DSI_OUT_EN_Msk)
 678:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_CHAN_CONFIG_MASK     (SAR_CHAN_CONFIG_POS_PIN_ADDR_Msk \
 679:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_POS_PORT_ADDR_Msk \
 680:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_DIFFERENTIAL_EN_Msk \
 681:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_AVG_EN_Msk \
 682:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Msk \
 683:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_PIN_ADDR_Msk \
 684:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_PORT_ADDR_Msk \
 685:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_NEG_ADDR_EN_Msk \
 686:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         | SAR_CHAN_CONFIG_DSI_OUT_EN_Msk)
 687:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_REG_SAMPLE_TIME_MASK     (SAR_SAMPLE_TIME01_SAMPLE_TIME0_Msk | SAR_SAMPLE_TIME01_SAM
 688:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 689:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_2US_DELAY                (2u)              /**< Delay used in Enable API function to
 690:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10V_COUNTS               (10.0F)           /**< Value of 10 in volts */
 691:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10MV_COUNTS              (10000)           /**< Value of 10 in millivolts */
 692:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_10UV_COUNTS              (10000000L)       /**< Value of 10 in microvolts */
 693:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_WRK_MAX_12BIT            (0x00001000uL)    /**< Maximum SAR work register value for 
 694:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGE_LIMIT_MAX          (0xFFFFuL)        /**< Maximum value for the low and high r
 695:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM_MAX             (0x3FuL)          /**< Maximum value for CAP_TRIM */
 696:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM_MIN             (0x00uL)          /**< Maximum value for CAP_TRIM */
 697:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CAP_TRIM                 (0x0BuL)          /**< Correct cap trim value */
 698:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 699:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /**< Macros for conditions used in CY_ASSERT calls */
 700:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHANNUM(chan)            ((chan) < CY_SAR_MAX_NUM_CHANNELS)
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 38


 701:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHANMASK(mask)           ((mask) < (1uL << CY_SAR_MAX_NUM_CHANNELS))
 702:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGECOND(cond)          ((cond) <= CY_SAR_RANGE_COND_OUTSIDE)
 703:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_INTRMASK(mask)           ((mask) <= (uint32_t)(CY_SAR_INTR_EOS_MASK | CY_SAR_INTR_OV
 704:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_TRIGGER(mode)            (((mode) == CY_SAR_TRIGGER_MODE_FW_ONLY) \
 705:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         || ((mode) == CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE) \
 706:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****                                         || ((mode) == CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL))
 707:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RETURN(mode)             (((mode) == CY_SAR_RETURN_STATUS) || ((mode) == CY_SAR_WAIT
 708:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_STARTCONVERT(mode)       (((mode) == CY_SAR_START_CONVERT_SINGLE_SHOT) || ((mode) ==
 709:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_RANGE_LIMIT(limit)       ((limit) <= CY_SAR_RANGE_LIMIT_MAX)
 710:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHSELECT(select)     ((select) == CY_SAR_MUX_SWITCH0)
 711:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHMASK(mask)         ((mask) <= CY_SAR_CLEAR_ALL_SWITCHES)
 712:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SWITCHSTATE(state)       (((state) == CY_SAR_SWITCH_OPEN) || ((state) == CY_SAR_SWIT
 713:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SQMASK(mask)             (((mask) & (~CY_SAR_DEINIT_SQ_CTRL)) == 0uL)
 714:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SQCTRL(ctrl)             (((ctrl) == CY_SAR_SWITCH_SEQ_CTRL_ENABLE) || ((ctrl) == CY
 715:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 716:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CTRL(value)              (((value) & (~CY_SAR_REG_CTRL_MASK)) == 0uL)
 717:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_CTRL(value)       (((value) & (~CY_SAR_REG_SAMPLE_CTRL_MASK)) == 0uL)
 718:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_SAMPLE_TIME(value)       (((value) & (~CY_SAR_REG_SAMPLE_TIME_MASK)) == 0uL)
 719:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define CY_SAR_CHAN_CONFIG(value)       (((value) & (~CY_SAR_REG_CHAN_CONFIG_MASK)) == 0uL)
 720:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \endcond */
 721:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 722:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_macro */
 723:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 724:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_globals
 725:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 726:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 727:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
 728:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *        Global Variables
 729:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
 730:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 731:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This array is used to calibrate the offset for each channel.
 732:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 733:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * At initialization, channels that are single-ended, signed, and with Vneg = Vref
 734:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * have an offset of -(2^12)/2 = -2048. All other channels have an offset of 0.
 735:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The offset can be overridden using \ref Cy_SAR_SetOffset.
 736:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 737:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel offsets are used by the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts, and
 738:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions to convert counts to voltage.
 739:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 740:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 741:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern volatile int16_t Cy_SAR_offset[CY_SAR_MAX_NUM_CHANNELS];
 742:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 743:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This array is used to calibrate the gain for each channel.
 744:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 745:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * It is set at initialization and the value depends on the SARADC resolution
 746:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and voltage reference, 10*(2^12)/(2*Vref).
 747:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The gain can be overridden using \ref Cy_SAR_SetGain.
 748:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 749:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel gains are used by the \ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts, and
 750:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts functions to convert counts to voltage.
 751:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 752:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** extern volatile int32_t Cy_SAR_countsPer10Volt[CY_SAR_MAX_NUM_CHANNELS];
 753:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 754:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_globals */
 755:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 756:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_enums
 757:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 39


 758:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 759:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 760:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /******************************************************************************
 761:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  * Enumerations
 762:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  *****************************************************************************/
 763:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 764:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** The SAR status/error code definitions */
 765:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 766:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 767:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SUCCESS    = 0x00uL,                                      /**< Success */
 768:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BAD_PARAM  = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x01uL,    /**< Invalid input parameters 
 769:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TIMEOUT    = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x02uL,    /**< A timeout occurred */
 770:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CONVERSION_NOT_COMPLETE = CY_SAR_ID | CY_PDL_STATUS_ERROR | 0x03uL,    /**< SAR conversi
 771:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_status_t;
 772:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 773:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for starting a conversion used in \ref Cy_SAR_StartConvert */
 774:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 775:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 776:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_START_CONVERT_SINGLE_SHOT = 0uL, /**< Start a single scan (one shot) from firmware */
 777:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_START_CONVERT_CONTINUOUS  = 1uL, /**< Continuously scan enabled channels and ignores all
 778:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_start_convert_sel_t;
 779:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 780:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for the return mode used in \ref Cy_SAR_IsEndConversion */
 781:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 782:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 783:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RETURN_STATUS    = 0uL,      /**< Immediately returns the conversion status. */
 784:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_WAIT_FOR_RESULT  = 1uL,    /**< Does not return a result until the conversion of all seq
 785:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_return_mode_t;
 786:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 787:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Switch state definitions */
 788:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 789:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 790:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_OPEN      = 0uL,    /**< Open the switch */
 791:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_CLOSE     = 1uL     /**< Close the switch */
 792:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_state_t;
 793:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 794:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Definitions for sequencer control of switches */
 795:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 796:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 797:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_SEQ_CTRL_DISABLE = 0uL, /**< Disable sequencer control of switch */
 798:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SWITCH_SEQ_CTRL_ENABLE  = 1uL  /**< Enable sequencer control of switch */
 799:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_sar_seq_ctrl_t;
 800:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 801:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Switch register selection for \ref Cy_SAR_SetAnalogSwitch and \ref Cy_SAR_GetAnalogSwitch */
 802:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 803:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 804:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SWITCH0  = 0uL,      /**< SARMUX switch control register */
 805:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_switch_register_sel_t;
 806:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 807:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_ctrl_register_enums
 808:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR CTRL register
 809:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 810:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 811:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Reference voltage buffer power mode definitions */
 812:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 813:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 814:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_100     = 0uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< Full power (100%) */
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 40


 815:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_80      = 1uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 80% power */
 816:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_60      = 2uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 60% power */
 817:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_50      = 3uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 50% power */
 818:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_40      = 4uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 40% power */
 819:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_30      = 5uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 30% power */
 820:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_20      = 6uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 20% power */
 821:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_PWR_10      = 7uL << SAR_CTRL_PWR_CTRL_VREF_Pos,      /**< 10% power */
 822:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_pwr_ctrl_vref_t;
 823:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 824:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Reference voltage selection definitions */
 825:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 826:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 827:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_BGR         = 4uL << SAR_CTRL_VREF_SEL_Pos,     /**< System wide bandgap from \
 828:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_EXT         = 5uL << SAR_CTRL_VREF_SEL_Pos,     /**< External Vref direct from 
 829:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_VDDA_DIV_2  = 6uL << SAR_CTRL_VREF_SEL_Pos,     /**< Vdda/2 (Vref buffer on) */
 830:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_VREF_SEL_VDDA        = 7uL << SAR_CTRL_VREF_SEL_Pos      /**< Vdda */
 831:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_vref_sel_t;
 832:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 833:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Vref bypass cap enable.
 834:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When enabled, a bypass capacitor should
 835:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * be connected to the dedicated Vref pin of the device.
 836:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Refer to the device datasheet for the minimum bypass capacitor value to use.
 837:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 838:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 839:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 840:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BYPASS_CAP_DISABLE = 0uL << SAR_CTRL_VREF_BYP_CAP_EN_Pos,    /**< Disable Vref bypass ca
 841:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_BYPASS_CAP_ENABLE  = 1uL << SAR_CTRL_VREF_BYP_CAP_EN_Pos     /**< Enable Vref bypass cap
 842:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_bypass_cap_t;
 843:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 844:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Negative terminal (Vminus) selection definitions for single-ended channels.
 845:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 846:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The Vminus input for single ended channels can be connected to
 847:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Vref, VSSA, or routed out to an external pin.
 848:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The options for routing to a pin are through Pin 1, Pin 3, Pin 5, or Pin 7
 849:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * of the SARMUX dedicated port or an acore wire in AROUTE, if available on the device.
 850:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 851:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref CY_SAR_NEG_SEL_VSSA_KELVIN comes straight from a Vssa pad without any shared branches
 852:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * so as to keep quiet and avoid voltage drops.
 853:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 854:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 855:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 856:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_VSSA_KELVIN  = 0uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to VSSA_KELVIN 
 857:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P1           = 2uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 1 of SAR
 858:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P3           = 3uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 3 of SAR
 859:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P5           = 4uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 5 of SAR
 860:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_P7           = 5uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to Pin 6 of SAR
 861:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_ACORE        = 6uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to an ACORE in 
 862:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_SEL_VREF         = 7uL << SAR_CTRL_NEG_SEL_Pos,  /**< Connect Vminus to VREF input o
 863:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_neg_sel_t;
 864:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 865:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable hardware control of the switch between Vref and the Vminus input */
 866:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 867:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 868:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_NEGVREF_FW_ONLY = 0uL << SAR_CTRL_SAR_HW_CTRL_NEGVREF_Pos,    /**< Only firmware co
 869:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_NEGVREF_HW      = 1uL << SAR_CTRL_SAR_HW_CTRL_NEGVREF_Pos     /**< Enable hardware 
 870:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_hw_ctrl_negvref_t;
 871:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 41


 872:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the comparator latch delay */
 873:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 874:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 875:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_2P5    = 0uL << SAR_CTRL_COMP_DLY_Pos,    /**< 2.5 ns delay, use for SAR c
 876:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_4      = 1uL << SAR_CTRL_COMP_DLY_Pos,    /**< 4 ns delay, use for SAR con
 877:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_10     = 2uL << SAR_CTRL_COMP_DLY_Pos,    /**< 10 ns delay, use for SAR co
 878:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CTRL_COMP_DLY_12     = 3uL << SAR_CTRL_COMP_DLY_Pos     /**< 12 ns delay, use for SAR co
 879:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_comp_delay_t;
 880:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 881:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the comparator power mode */
 882:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 883:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 884:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_100     = 0uL << SAR_CTRL_COMP_PWR_Pos,      /**< 100% power, use this for > 2 
 885:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_80      = 1uL << SAR_CTRL_COMP_PWR_Pos,      /**< 80% power, use this for 1.5 -
 886:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_60      = 2uL << SAR_CTRL_COMP_PWR_Pos,      /**< 60% power, use this for 1.0 -
 887:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_50      = 3uL << SAR_CTRL_COMP_PWR_Pos,      /**< 50% power, use this for 500 k
 888:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_40      = 4uL << SAR_CTRL_COMP_PWR_Pos,      /**< 40% power, use this for 250 -
 889:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_30      = 5uL << SAR_CTRL_COMP_PWR_Pos,      /**< 30% power, use this for 100 -
 890:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_20      = 6uL << SAR_CTRL_COMP_PWR_Pos,      /**< 20% power, use this for TDB s
 891:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_COMP_PWR_10      = 7uL << SAR_CTRL_COMP_PWR_Pos,      /**< 10% power, use this for < 100
 892:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_comp_pwr_t;
 893:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 894:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable the SARMUX during Deep Sleep power mode. */
 895:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 896:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 897:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DEEPSLEEP_SARMUX_OFF = 0uL << SAR_CTRL_DEEPSLEEP_ON_Pos,    /**< Disable SARMUX operatio
 898:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DEEPSLEEP_SARMUX_ON  = 1uL << SAR_CTRL_DEEPSLEEP_ON_Pos     /**< Enable SARMUX operation
 899:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_sarmux_deep_sleep_t;
 900:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 901:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable the SARSEQ control of routing switches */
 902:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 903:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 904:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SARSEQ_SWITCH_ENABLE    = 0uL << SAR_CTRL_SWITCH_DISABLE_Pos,    /**< Enable the SARSEQ 
 905:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SARSEQ_SWITCH_DISABLE   = 1uL << SAR_CTRL_SWITCH_DISABLE_Pos     /**< Disable the SARSEQ
 906:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_ctrl_sarseq_routing_switches_t;
 907:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 908:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
 909:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 910:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_sample_ctrl_register_enums
 911:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations are used in configuring the SAR SAMPLE_CTRL register
 912:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
 913:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 914:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure result alignment, either left or right aligned.
 915:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 916:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \note
 917:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Averaging always uses right alignment. If the \ref CY_SAR_LEFT_ALIGN
 918:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is selected with averaging enabled, it is ignored.
 919:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 920:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \note
 921:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The voltage conversion functions (\ref Cy_SAR_CountsTo_Volts, \ref Cy_SAR_CountsTo_mVolts,
 922:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref Cy_SAR_CountsTo_uVolts) are only valid for right alignment.
 923:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * */
 924:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 925:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 926:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RIGHT_ALIGN  = 0uL << SAR_SAMPLE_CTRL_LEFT_ALIGN_Pos,    /**< Right align result data to
 927:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_LEFT_ALIGN   = 1uL << SAR_SAMPLE_CTRL_LEFT_ALIGN_Pos     /**< Left align result data to 
 928:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_result_align_t;
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 42


 929:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 930:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure format, signed or unsigned, of single-ended channels */
 931:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 932:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 933:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SINGLE_ENDED_UNSIGNED  = 0uL << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos,    /**< Result 
 934:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SINGLE_ENDED_SIGNED    = 1uL << SAR_SAMPLE_CTRL_SINGLE_ENDED_SIGNED_Pos     /**< Result 
 935:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_single_ended_format_t;
 936:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 937:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure format, signed or unsigned, of differential channels */
 938:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 939:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 940:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DIFFERENTIAL_UNSIGNED  = 0uL << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos,    /**< Result 
 941:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_DIFFERENTIAL_SIGNED    = 1uL << SAR_SAMPLE_CTRL_DIFFERENTIAL_SIGNED_Pos     /**< Result 
 942:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_differential_format_t;
 943:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 944:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure number of samples for averaging.
 945:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This applies only to channels with averaging enabled.
 946:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 947:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 948:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 949:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_2          = 0uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 950:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_4          = 1uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 951:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_8          = 2uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 952:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_16         = 3uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 953:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_32         = 4uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 954:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_64         = 5uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 955:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_128        = 6uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos,    /**< Set samples averaged to
 956:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_CNT_256        = 7uL << SAR_SAMPLE_CTRL_AVG_CNT_Pos     /**< Set samples averaged to
 957:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_avg_cnt_t;
 958:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 959:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the averaging mode.
 960:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 961:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Sequential accumulate and dump: a channel will be sampled back to back.
 962:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 20-bit register. At the end
 963:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   of the scan, the accumulated value is shifted right to fit into 16 bits
 964:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 965:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Sequential fixed:  a channel will be sampled back to back.
 966:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 20-bit register. At the end
 967:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   of the scan, the accumulated value is shifted right to fit into 12 bits
 968:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 969:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Interleaved: a channel will be sampled once per scan.
 970:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The result is added to a running sum in a 16-bit register.
 971:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In the scan where the final averaging count is reached,
 972:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   the accumulated value is shifted right to fit into 12 bits
 973:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and stored into the CHAN_RESULT register.
 974:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In all other scans, the CHAN_RESULT will have an invalid result.
 975:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In interleaved mode, make sure that the averaging
 976:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   count is low enough to ensure that the intermediate value does not exceed 16 bits,
 977:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   that is averaging count is 16 or less. Otherwise, the MSBs will be lost.
 978:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In the special case that averaging is enabled for all enabled channels
 979:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   and interleaved mode is used, the interrupt frequency
 980:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   will be reduced by a factor of the number of samples averaged.
 981:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 982:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 983:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 984:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_SEQUENTIAL_ACCUM    = 0uL,                               /**< Set mode to seque
 985:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_SEQUENTIAL_FIXED    = SAR_SAMPLE_CTRL_AVG_SHIFT_Msk,     /**< Set mode to seque
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 43


 986:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_AVG_MODE_INTERLEAVED         = SAR_SAMPLE_CTRL_AVG_MODE_Msk,      /**< Set mode to inter
 987:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_avg_mode_t;
 988:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
 989:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the trigger mode.
 990:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
 991:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Firmware triggering is always enabled and can be single shot or continuous.
 992:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Additionally, hardware triggering can be enabled with the option to be
 993:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * edge or level sensitive.
 994:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
 995:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
 996:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
 997:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_ONLY        = 0uL,                                /**< Firmware trigger 
 998:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_AND_HWEDGE  = SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk, /**< Enable edge sensi
 999:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_TRIGGER_MODE_FW_AND_HWLEVEL = SAR_SAMPLE_CTRL_DSI_TRIGGER_EN_Msk | SAR_SAMPLE_CTRL_DSI_T
1000:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_ctrl_trigger_mode_t;
1001:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1002:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1003:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1004:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_sample_time_shift_enums
1005:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR SAMPLE_TIME* registers
1006:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1007:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1008:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the sample time by using these shifts */
1009:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1010:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1011:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME0_SHIFT       = SAR_SAMPLE_TIME01_SAMPLE_TIME0_Pos,             /**< Shift fo
1012:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME1_SHIFT       = SAR_SAMPLE_TIME01_SAMPLE_TIME1_Pos,             /**< Shift fo
1013:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME2_SHIFT       = SAR_SAMPLE_TIME23_SAMPLE_TIME2_Pos,             /**< Shift fo
1014:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_SAMPLE_TIME3_SHIFT       = SAR_SAMPLE_TIME23_SAMPLE_TIME3_Pos,             /**< Shift fo
1015:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_sample_time_shift_t;
1016:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1017:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1018:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_range_thres_register_enums
1019:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR RANGE* registers
1020:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1021:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1022:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the lower and upper thresholds for range detection
1023:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1024:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SARSEQ supports range detection to allow for automatic detection of sample
1025:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * values compared to two programmable thresholds without CPU involvement.
1026:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is defined by two global thresholds and a condition.
1027:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The RANGE_LOW value defines the lower threshold and RANGE_HIGH defines
1028:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the upper threshold of the range.
1029:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1030:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detect is done after averaging, alignment, and sign extension (if applicable).
1031:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * In other words, the thresholds values must have the same data format as the result data.
1032:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Range detection is always done for all channels scanned. By making RANGE_INTR_MASK=0,
1033:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the firmware can choose to ignore the range detect interrupt for any channel.
1034:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1035:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1036:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1037:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_LOW_SHIFT      = SAR_RANGE_THRES_RANGE_LOW_Pos,        /**< Shift for setting lowe
1038:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_HIGH_SHIFT     = SAR_RANGE_THRES_RANGE_HIGH_Pos,       /**< Shift for setting uppe
1039:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_range_thres_shift_t;
1040:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1041:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the condition (below, inside, above, or outside) of the range detection interrupt */
1042:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 44


1043:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1044:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_BELOW     = 0uL,  /**< Range interrupt detected when result < RANGE_LOW */
1045:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_INSIDE    = 1uL,  /**< Range interrupt detected when RANGE_LOW <= result < RA
1046:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_ABOVE     = 2uL,  /**< Range interrupt detected when RANGE_HIGH <= result */
1047:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_RANGE_COND_OUTSIDE   = 3uL,  /**< Range interrupt detected when result < RANGE_LOW || RA
1048:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_range_detect_condition_t;
1049:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1050:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1051:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_chan_config_register_enums
1052:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR CHAN_CONFIG register
1053:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1054:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1055:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure the input mode of the channel
1056:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1057:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Single ended channel: the \ref cy_en_sar_ctrl_neg_sel_t selection in the \ref group_sar_init_st
1058:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   determines what drives the Vminus pin
1059:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Differential paired: Vplus and Vminus are a pair. Bit 0 of \ref cy_en_sar_chan_config_pos_pin_a
1060:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   is ignored and considered to be 0.
1061:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   In other words, \ref cy_en_sar_chan_config_pos_pin_addr_t "POS_PIN_ADDR" points to the even pin
1062:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   The even pin is connected to Vplus and the odd pin is connected to Vminus.
1063:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \ref cy_en_sar_chan_config_pos_port_addr_t "POS_PORT_ADDR" is used to identify the port that co
1064:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Differential unpaired: The \ref cy_en_sar_chan_config_neg_pin_addr_t "NEG_PIN_ADDR" and
1065:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   \ref cy_en_sar_chan_config_neg_port_addr_t "NEG_PORT_ADDR" determine what drives the Vminus pin
1066:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   This is a variation of differential mode with no even-odd pair limitation
1067:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1068:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1069:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1070:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SINGLE_ENDED            = 0uL,                                     /**< Single ende
1071:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_DIFFERENTIAL_PAIRED     = SAR_CHAN_CONFIG_DIFFERENTIAL_EN_Msk,     /**< Differentia
1072:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_DIFFERENTIAL_UNPAIRED   = SAR_CHAN_CONFIG_NEG_ADDR_EN_Msk          /**< Differentia
1073:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_input_mode_t;
1074:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1075:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the pin connected to the Vplus terminal of the SARADC. */
1076:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1077:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1078:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_0     = 0uL,                                            /**< Pin 0 on 
1079:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_1     = 1uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 1 on 
1080:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_2     = 2uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 2 on 
1081:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_3     = 3uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 3 on 
1082:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_4     = 4uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 4 on 
1083:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_5     = 5uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 5 on 
1084:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_6     = 6uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 6 on 
1085:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_POS_PIN_ADDR_7     = 7uL << SAR_CHAN_CONFIG_POS_PIN_ADDR_Pos,        /**< Pin 7 on 
1086:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_pos_pin_addr_t;
1087:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1088:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the port that contains the pin connected to the Vplus terminal of the SARA
1089:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1090:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_POS_PORT_ADDR_SARMUX is for the dedicated SARMUX port (8 pins)
1091:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 1 through 4 are respectively the pins of CTB0, CTB1, CTB2, and CTB3 (if present)
1092:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 7, 5, and 6 (VPORT0/1/2) are the groups of internal signals that can be selected
1093:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   in the SARMUX or AROUTE (if present).
1094:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1095:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1096:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1097:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1098:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1099:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_SARMUX         = 0uL,                                       /**< Dedicated
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 45


1100:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB0           = 1uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1101:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB1           = 2uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1102:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB2           = 3uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1103:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_CTB3           = 4uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< Outputs f
1104:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_AROUTE_VIRT2   = 5uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1105:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_AROUTE_VIRT1   = 6uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1106:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_POS_PORT_ADDR_SARMUX_VIRT    = 7uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< SARMUX vi
1107:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_pos_port_addr_t;
1108:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1109:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Enable or disable averaging for the channel */
1110:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1111:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1112:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_AVG_DISABLE      = 0uL,                                 /**< Disable averaging for 
1113:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_AVG_ENABLE       = 1uL << SAR_CHAN_CONFIG_AVG_EN_Pos    /**< Enable averaging for t
1114:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_avg_en_t;
1115:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1116:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Select which sample time to use for the channel.
1117:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * There are four global samples times available set by \ref group_sar_init_struct_sampleTime01 and
1118:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \ref group_sar_init_struct_sampleTime23.
1119:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1120:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1121:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1122:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_0     = 0uL,                                          /**< Use sample t
1123:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_1     = 1uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1124:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_2     = 2uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1125:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_SAMPLE_TIME_3     = 3uL << SAR_CHAN_CONFIG_SAMPLE_TIME_SEL_Pos,   /**< Use sample t
1126:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_sample_time_t;
1127:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1128:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the pin connected to the Vminus terminal of the SARADC. */
1129:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1130:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1131:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_0     = 0uL,                                            /**< Pin 0 on 
1132:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_1     = 1uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 1 on 
1133:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_2     = 2uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 2 on 
1134:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_3     = 3uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 3 on 
1135:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_4     = 4uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 4 on 
1136:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_5     = 5uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 5 on 
1137:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_6     = 6uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 6 on 
1138:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_CHAN_NEG_PIN_ADDR_7     = 7uL << SAR_CHAN_CONFIG_NEG_PIN_ADDR_Pos,        /**< Pin 7 on 
1139:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_neg_pin_addr_t;
1140:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1141:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure address of the port that contains the pin connected to the Vminus terminal of the SAR
1142:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1143:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 0 is 8 pins of the SARMUX
1144:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Port 7, 5, and 6 (VPORT0/1/2) are the groups of internal signals that can be selected
1145:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   in the SARMUX or AROUTE (if present).
1146:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1147:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1148:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1149:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_SARMUX         = 0uL,                                       /**< Dedicated
1150:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_AROUTE_VIRT2   = 5uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1151:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_AROUTE_VIRT1   = 6uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< AROUTE vi
1152:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_NEG_PORT_ADDR_SARMUX_VIRT    = 7uL << SAR_CHAN_CONFIG_POS_PORT_ADDR_Pos,  /**< SARMUX vi
1153:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_chan_config_neg_port_addr_t;
1154:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1155:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1156:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 46


1157:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_intr_mask_t_register_enums
1158:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the SAR INTR_MASK register
1159:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1160:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1161:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Configure which signal will cause an interrupt event.
1162:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1163:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - End of scan (EOS): occurs after completing a scan of all enabled channels
1164:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Overflow: occurs when hardware sets a new EOS interrupt while the previous interrupt
1165:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   has not be cleared by the firmware
1166:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - Firmware collision: occurs when firmware attempts to start one-shot
1167:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *   conversion while the SAR is busy.
1168:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1169:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable all, one, or none of the interrupt events.
1170:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1171:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1172:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1173:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_MASK_NONE           = 0uL,                                  /**< Disable all interr
1174:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_EOS_MASK            = SAR_INTR_MASK_EOS_MASK_Msk,           /**< Enable end of scan
1175:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_OVERFLOW_MASK       = SAR_INTR_MASK_OVERFLOW_MASK_Msk,      /**< Enable overflow in
1176:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_INTR_FW_COLLISION_MASK   = SAR_INTR_MASK_FW_COLLISION_MASK_Msk,  /**< Enable firmware co
1177:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_intr_mask_t;
1178:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1179:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1180:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1181:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_mux_switch_register_enums
1182:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of enumerations aids in configuring the \ref group_sar_init_struct_muxSwitch and \ref gr
1183:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1184:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1185:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1186:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Firmware control for the SARMUX switches to connect analog signals to the SAR ADC
1187:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1188:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To close multiple switches, "OR" the enum values together.
1189:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1190:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1191:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1192:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1193:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1194:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Vplus */
1195:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P0_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P0_VPLUS_Msk,    /**< Switch between Pi
1196:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P1_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P1_VPLUS_Msk,    /**< Switch between Pi
1197:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P2_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P2_VPLUS_Msk,    /**< Switch between Pi
1198:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P3_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P3_VPLUS_Msk,    /**< Switch between Pi
1199:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P4_VPLUS_Msk,    /**< Switch between Pi
1200:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P5_VPLUS_Msk,    /**< Switch between Pi
1201:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P6_VPLUS_Msk,    /**< Switch between Pi
1202:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_VPLUS         = SAR_MUX_SWITCH0_MUX_FW_P7_VPLUS_Msk,    /**< Switch between Pi
1203:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1204:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Vminus */
1205:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P0_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P0_VMINUS_Msk,   /**< Switch between Pi
1206:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P1_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P1_VMINUS_Msk,   /**< Switch between Pi
1207:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P2_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P2_VMINUS_Msk,   /**< Switch between Pi
1208:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P3_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P3_VMINUS_Msk,   /**< Switch between Pi
1209:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P4_VMINUS_Msk,   /**< Switch between Pi
1210:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P5_VMINUS_Msk,   /**< Switch between Pi
1211:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P6_VMINUS_Msk,   /**< Switch between Pi
1212:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_VMINUS        = SAR_MUX_SWITCH0_MUX_FW_P7_VMINUS_Msk,   /**< Switch between Pi
1213:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 47


1214:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Vssa to Vminus and temperature sensor to Vplus */
1215:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_VSSA_VMINUS      = SAR_MUX_SWITCH0_MUX_FW_VSSA_VMINUS_Msk,    /**< Switch between
1216:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_TEMP_VPLUS       = SAR_MUX_SWITCH0_MUX_FW_TEMP_VPLUS_Msk,     /**< Switch between
1217:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1218:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Amuxbus A and B to Vplus and Vminus */
1219:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSA_VPLUS   = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSA_VPLUS_Msk,     /**< Switch bet
1220:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSB_VPLUS   = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSB_VPLUS_Msk,     /**< Switch bet
1221:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSA_VMINUS  = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSA_VMINUS_Msk,    /**< Switch bet
1222:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_AMUXBUSB_VMINUS  = SAR_MUX_SWITCH0_MUX_FW_AMUXBUSB_VMINUS_Msk,    /**< Switch bet
1223:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1224:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Sarbus 0 and 1 to Vplus and Vminus */
1225:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS0_VPLUS    = SAR_MUX_SWITCH0_MUX_FW_SARBUS0_VPLUS_Msk,      /**< Switch bet
1226:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS1_VPLUS    = SAR_MUX_SWITCH0_MUX_FW_SARBUS1_VPLUS_Msk,      /**< Switch bet
1227:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS0_VMINUS   = SAR_MUX_SWITCH0_MUX_FW_SARBUS0_VMINUS_Msk,     /**< Switch bet
1228:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_SARBUS1_VMINUS   = SAR_MUX_SWITCH0_MUX_FW_SARBUS1_VMINUS_Msk,     /**< Switch bet
1229:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1230:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* SARMUX pins to Core IO */
1231:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P4_COREIO0       = SAR_MUX_SWITCH0_MUX_FW_P4_COREIO0_Msk,      /**< Switch betwee
1232:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P5_COREIO1       = SAR_MUX_SWITCH0_MUX_FW_P5_COREIO1_Msk,      /**< Switch betwee
1233:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P6_COREIO2       = SAR_MUX_SWITCH0_MUX_FW_P6_COREIO2_Msk,      /**< Switch betwee
1234:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_FW_P7_COREIO3       = SAR_MUX_SWITCH0_MUX_FW_P7_COREIO3_Msk,      /**< Switch betwee
1235:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_mux_switch_fw_ctrl_t;
1236:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1237:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** Mask definitions of SARMUX switches that can be controlled by the SARSEQ.
1238:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1239:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * To enable sequencer control of multiple switches, "OR" the enum values together.
1240:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1241:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_sarmux section for more guidance.
1242:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1243:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef enum
1244:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1245:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P0           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P0_Msk,        /**< Enable
1246:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P1           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P1_Msk,        /**< Enable
1247:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P2           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P2_Msk,        /**< Enable
1248:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P3           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P3_Msk,        /**< Enable
1249:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P4           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P4_Msk,        /**< Enable
1250:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P5           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P5_Msk,        /**< Enable
1251:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P6           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P6_Msk,        /**< Enable
1252:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_P7           = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_P7_Msk,        /**< Enable
1253:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_VSSA         = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_VSSA_Msk,      /**< Enable
1254:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_TEMP         = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_TEMP_Msk,      /**< Enable
1255:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_AMUXBUSA     = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSA_Msk,  /**< Enable
1256:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_AMUXBUSB     = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_AMUXBUSB_Msk,  /**< Enable
1257:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_SARBUS0      = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS0_Msk,   /**< Enable
1258:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_SAR_MUX_SQ_CTRL_SARBUS1      = SAR_MUX_SWITCH_SQ_CTRL_MUX_SQ_CTRL_SARBUS1_Msk,   /**< Enable
1259:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }cy_en_sar_mux_switch_sq_ctrl_t;
1260:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1261:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /* \} */
1262:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1263:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_enums */
1264:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1265:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_data_structures
1266:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1267:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1268:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1269:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
1270:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *       Configuration Structures
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 48


1271:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
1272:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1273:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This structure is used to initialize the SAR ADC subsystem.
1274:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1275:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The SAR ADC subsystem is highly configurable with many options.
1276:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * When calling \ref Cy_SAR_Init, provide a pointer to the structure containing this configuration d
1277:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * A set of enumerations is provided in this
1278:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * driver to help with configuring this structure.
1279:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1280:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See the \ref group_sar_initialization section for guidance.
1281:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** **/
1282:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef struct
1283:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1284:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t ctrl;                                      /**< Control register settings (applies to 
1285:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleCtrl;                                /**< Sample control register settings (appl
1286:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleTime01;                              /**< Sample time in ADC clocks for Sample T
1287:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t sampleTime23;                              /**< Sample time in ADC clocks for Sample T
1288:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t rangeThres;                                /**< Range detect threshold register for al
1289:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     cy_en_sar_range_detect_condition_t rangeCond;       /**< Range detect condition (below, inside,
1290:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t chanEn;                                    /**< Enable bits for the channels */
1291:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t chanConfig[CY_SAR_MAX_NUM_CHANNELS];       /**< Channel configuration */
1292:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t intrMask;                                  /**< Interrupt enable mask */
1293:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t satIntrMask;                               /**< Saturation detection interrupt enable 
1294:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t rangeIntrMask;                             /**< Range detection interrupt enable mask 
1295:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t muxSwitch;                                 /**< SARMUX firmware switches to connect an
1296:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t muxSwitchSqCtrl;                           /**< Enable SARSEQ control of specific SARM
1297:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     bool configRouting;                                 /**< Configure or ignore routing related re
1298:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t vrefMvValue;                               /**< Reference voltage in millivolts used i
1299:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** } cy_stc_sar_config_t;
1300:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1301:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This structure is used by the driver to backup the state of the SAR
1302:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * before entering sleep so that it can be re-enabled after waking up */
1303:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** typedef struct
1304:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1305:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t hwEnabled;         /**< SAR enabled state */
1306:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     uint32_t continuous;        /**< State of the continuous bit */
1307:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** } cy_stc_sar_state_backup_t;
1308:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1309:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} group_sar_data_structures */
1310:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1311:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions
1312:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1313:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1314:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1315:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** This macro is for backward compatibility macro for driver v1.10 and before, 
1316:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****  * the preferred API is \ref Cy_SAR_DeepSleep */
1317:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** #define Cy_SAR_Sleep    Cy_SAR_DeepSleep
1318:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1319:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /***************************************
1320:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *        Function Prototypes
1321:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ***************************************/
1322:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1323:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_basic
1324:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for initialization and basic usage
1325:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1326:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1327:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_Init(SAR_Type *base, const cy_stc_sar_config_t *config);
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 49


1328:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_DeInit(SAR_Type *base, bool deInitRouting);
1329:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_Enable(SAR_Type *base);
1330:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_Disable(SAR_Type *base);
1331:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_StartConvert(SAR_Type *base, cy_en_sar_start_convert_sel_t startSelect);
1332:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_StopConvert(SAR_Type *base);
1333:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_IsEndConversion(SAR_Type *base, cy_en_sar_return_mode_t retMode);
1334:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_GetResult16(const SAR_Type *base, uint32_t chan);
1335:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int32_t Cy_SAR_GetResult32(const SAR_Type *base, uint32_t chan);
1336:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetChanResultUpdated(const SAR_Type *base);
1337:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1338:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1339:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_power
1340:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for Deep Sleep entry and exit
1341:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1342:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1343:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_syspm_status_t Cy_SAR_DeepSleepCallback(cy_stc_syspm_callback_params_t *callbackParams, cy_en
1344:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_DeepSleep(SAR_Type *base);
1345:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_Wakeup(SAR_Type *base);
1346:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1347:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1348:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_config
1349:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions allows changes to the SAR configuration
1350:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * after initialization.
1351:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1352:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1353:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetConvertMode(SAR_Type *base, cy_en_sar_sample_ctrl_trigger_mode_t mode);
1354:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetChanMask(SAR_Type *base, uint32_t enableMask);
1355:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetLowLimit(SAR_Type *base, uint32_t lowLimit);
1356:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetHighLimit(SAR_Type *base, uint32_t highLimit);
1357:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeCond(SAR_Type *base, cy_en_sar_range_detect_condition_t cond);
1358:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1359:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1360:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_countsto
1361:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions performs counts to *volts conversions.
1362:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1363:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1364:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_RawCounts2Counts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1365:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** float32_t Cy_SAR_CountsTo_Volts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1366:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int16_t Cy_SAR_CountsTo_mVolts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1367:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** int32_t Cy_SAR_CountsTo_uVolts(const SAR_Type *base, uint32_t chan, int16_t adcCounts);
1368:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_SetOffset(uint32_t chan, int16_t offset);
1369:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** cy_en_sar_status_t Cy_SAR_SetGain(uint32_t chan, int32_t adcGain);
1370:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1371:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1372:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_switches
1373:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for controlling/querying the SARMUX switches
1374:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1375:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1376:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetAnalogSwitch(SAR_Type *base, cy_en_sar_switch_register_sel_t switchSelect, uint32_t 
1377:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** uint32_t Cy_SAR_GetAnalogSwitch(const SAR_Type *base, cy_en_sar_switch_register_sel_t switchSelect)
1378:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetVssaVminusSwitch(SAR_Type *base, cy_en_sar_switch_state_t state);
1379:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** void Cy_SAR_SetSwitchSarSeqCtrl(SAR_Type *base, uint32_t switchMask, cy_en_sar_switch_sar_seq_ctrl_
1380:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetVssaSarSeqCtrl(SAR_Type *base, cy_en_sar_switch_sar_seq_ctrl_t ctrl)
1381:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1382:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1383:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_interrupt
1384:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions are related to SAR interrupts.
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 50


1385:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1386:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1387:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatus(const SAR_Type *base);
1388:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearInterrupt(SAR_Type *base, uint32_t intrMask);
1389:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterrupt(SAR_Type *base, uint32_t intrMask);
1390:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterruptMask(SAR_Type *base, uint32_t intrMask);
1391:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptMask(const SAR_Type *base);
1392:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatusMasked(const SAR_Type *base);
1393:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1394:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatus(const SAR_Type *base);
1395:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearRangeInterrupt(SAR_Type *base, uint32_t chanMask);
1396:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterrupt(SAR_Type *base, uint32_t chanMask);
1397:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterruptMask(SAR_Type *base, uint32_t chanMask);
1398:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptMask(const SAR_Type *base);
1399:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatusMasked(const SAR_Type *base);
1400:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1401:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptStatus(const SAR_Type *base);
1402:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearSatInterrupt(SAR_Type *base, uint32_t chanMask);
1403:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetSatInterrupt(SAR_Type *base, uint32_t chanMask);
1404:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetSatInterruptMask(SAR_Type *base, uint32_t chanMask);
1405:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptMask(const SAR_Type *base);
1406:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetSatInterruptStatusMasked(const SAR_Type *base);
1407:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1408:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptCause(const SAR_Type *base);
1409:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1410:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1411:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1412:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_helper
1413:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * This set of functions is for useful configuration query
1414:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1415:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1416:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** bool Cy_SAR_IsChannelSigned(const SAR_Type *base, uint32_t chan);
1417:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** bool Cy_SAR_IsChannelSingleEnded(const SAR_Type *base, uint32_t chan);
1418:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE bool Cy_SAR_IsChannelDifferential(const SAR_Type *base, uint32_t chan);
1419:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1420:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1421:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_basic
1422:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1423:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1424:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1425:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1426:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1427:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_Disable
1428:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1429:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1430:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Turn off the hardware block.
1431:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1432:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1433:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1434:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1435:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1436:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1437:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1438:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_Disable(SAR_Type *base)
1439:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1440:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_CTRL(base) &= ~SAR_CTRL_ENABLED_Msk;
1441:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 51


1442:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1443:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1444:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1445:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetChanResultUpdated
1446:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1447:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1448:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return whether the RESULT register has been updated or not.
1449:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the bit is high, the corresponding channel RESULT register was updated,
1450:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * i.e. was sampled during the previous scan and, in case of Interleaved averaging,
1451:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * reached the averaging count.
1452:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the bit is low, the corresponding channel is not enabled or the averaging count
1453:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * is not yet reached for Interleaved averaging.
1454:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1455:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1456:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1457:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1458:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1459:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Each bit of the result corresponds to the channel.
1460:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Bit 0 is for channel 0, etc.
1461:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1462:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1463:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1464:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_CHAN_RESULT_UPDATED
1465:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1466:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1467:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetChanResultUpdated(const SAR_Type *base)
1468:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1469:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_CHAN_RESULT_UPDATED(base);
1470:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1471:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1472:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1473:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_config
1474:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1475:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1476:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1477:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1478:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1479:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetChanMask
1480:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1481:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1482:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the enable/disable mask for the channels.
1483:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1484:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1485:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1486:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1487:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param enableMask
1488:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Channel enable/disable mask. Each bit corresponds to a channel.
1489:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - 0: the corresponding channel is disabled.
1490:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - 1: the corresponding channel is enabled; it will be included in the next scan.
1491:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1492:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1493:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1494:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1495:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1496:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_CHAN_MASK
1497:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1498:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 52


1499:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetChanMask(SAR_Type *base, uint32_t enableMask)
1500:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1501:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(enableMask));
1502:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1503:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_CHAN_EN(base) = enableMask;
1504:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1505:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1506:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1507:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1508:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetRangeCond
1509:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1510:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1511:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Set the condition in which range detection interrupts are triggered.
1512:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1513:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1514:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1515:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1516:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param cond
1517:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * A value of the enum \ref cy_en_sar_range_detect_condition_t.
1518:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1519:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1520:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1521:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1522:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1523:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_RANGE_COND
1524:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1525:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1526:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeCond(SAR_Type *base, cy_en_sar_range_detect_condition_t cond)
1527:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1528:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L3(CY_SAR_RANGECOND(cond));
1529:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1530:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_COND(base) = (uint32_t)cond << SAR_RANGE_COND_RANGE_COND_Pos;
1531:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1532:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1533:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \} */
1534:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1535:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /** \addtogroup group_sar_functions_interrupt
1536:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \{
1537:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** */
1538:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1539:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetInterruptStatus
1540:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1541:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1542:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the interrupt register status.
1543:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1544:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1545:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1546:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1547:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return Interrupt status
1548:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1549:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1550:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1551:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_ISR
1552:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1553:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1554:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatus(const SAR_Type *base)
1555:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 53


1556:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_INTR(base);
  93              		.loc 3 1556 0
  94 002c D4F81032 		ldr	r3, [r4, #528]
  95              	.LVL6:
  96              	.LBE29:
  97              	.LBE28:
  98              	.LBB30:
  99              	.LBB31:
1557:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1558:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1559:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1560:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1561:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_ClearInterrupt
1562:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1563:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1564:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Clear the interrupt.
1565:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The interrupt must be cleared with this function so that the hardware
1566:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * can set subsequent interrupts and those interrupts can be forwarded
1567:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * to the interrupt controller, if enabled.
1568:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1569:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1570:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1571:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1572:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1573:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts to clear. Typically this will be the value returned
1574:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * from \ref Cy_SAR_GetInterruptStatus.
1575:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Alternately, select one or more values from \ref cy_en_sar_intr_mask_t and "OR" them together.
1576:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1577:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1578:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1579:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1580:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1581:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1582:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1583:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearInterrupt(SAR_Type *base, uint32_t intrMask)
1584:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1585:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
1586:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1587:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR(base) = intrMask;
1588:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1589:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Dummy read for buffered writes. */
1590:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     (void) SAR_INTR(base);
1591:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1592:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1593:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1594:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1595:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetInterrupt
1596:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1597:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1598:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Trigger an interrupt with software.
1599:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1600:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1601:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1602:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1603:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1604:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts to set.
1605:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Select one or more values from \ref cy_en_sar_intr_mask_t and "OR" them together.
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 54


1606:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1607:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1608:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1609:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1610:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1611:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1612:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1613:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterrupt(SAR_Type *base, uint32_t intrMask)
1614:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1615:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
1616:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1617:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR_SET(base) = intrMask;
1618:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1619:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1620:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1621:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1622:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetInterruptMask
1623:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1624:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1625:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable which interrupts can trigger the CPU interrupt controller.
1626:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1627:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1628:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1629:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1630:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param intrMask
1631:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The mask of interrupts. Select one or more values from \ref cy_en_sar_intr_mask_t
1632:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * and "OR" them together.
1633:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_MASK_NONE : Disable EOS, overflow, and firmware collision interrupts.
1634:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_EOS_MASK
1635:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_OVERFLOW_MASK
1636:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * - \ref CY_SAR_INTR_FW_COLLISION_MASK
1637:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1638:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1639:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1640:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1641:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1642:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_INTERRUPT_MASK
1643:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1644:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1645:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetInterruptMask(SAR_Type *base, uint32_t intrMask)
1646:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1647:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_INTRMASK(intrMask));
1648:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1649:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_INTR_MASK(base) = intrMask;
1650:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1651:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1652:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1653:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1654:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetInterruptMask
1655:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1656:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1657:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return which interrupts can trigger the CPU interrupt controller
1658:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * as configured by \ref Cy_SAR_SetInterruptMask.
1659:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1660:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1661:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1662:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 55


1663:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1664:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Interrupt mask. Compare this value with masks in \ref cy_en_sar_intr_mask_t.
1665:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1666:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1667:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1668:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_INTERRUPT_MASK
1669:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1670:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1671:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptMask(const SAR_Type *base)
1672:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1673:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_INTR_MASK(base);
1674:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1675:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1676:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1677:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1678:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetInterruptStatusMasked
1679:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1680:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1681:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the bitwise AND between the interrupt request and mask registers.
1682:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * See \ref Cy_SAR_GetInterruptStatus and \ref Cy_SAR_GetInterruptMask.
1683:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1684:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1685:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1686:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1687:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1688:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Bitwise AND of the interrupt request and mask registers
1689:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1690:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1691:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetInterruptStatusMasked(const SAR_Type *base)
1692:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1693:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_INTR_MASKED(base);
1694:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1695:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1696:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1697:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1698:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_GetRangeInterruptStatus
1699:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1700:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1701:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Return the range interrupt register status.
1702:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * If the status bit is low for a channel, the channel may not be enabled
1703:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * (\ref Cy_SAR_SetChanMask), range detection is not enabled for the
1704:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * channel (\ref Cy_SAR_SetRangeInterruptMask), or range detection was not
1705:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * triggered for the channel.
1706:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1707:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1708:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1709:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1710:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return
1711:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The range interrupt status for all channels. Bit 0 is for channel 0, etc.
1712:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1713:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1714:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1715:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_GET_RANGE_INTERRUPT_STATUS
1716:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1717:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1718:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE uint32_t Cy_SAR_GetRangeInterruptStatus(const SAR_Type *base)
1719:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 56


1720:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     return SAR_RANGE_INTR(base);
1721:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1722:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1723:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1724:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1725:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_ClearRangeInterrupt
1726:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1727:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1728:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Clear the range interrupt for the specified channel mask.
1729:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The interrupt must be cleared with this function so that
1730:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * the hardware can set subset interrupts and those interrupts can
1731:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * be forwarded to the interrupt controller, if enabled.
1732:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1733:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1734:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1735:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1736:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
1737:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
1738:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Typically, this is the value returned from \ref Cy_SAR_GetRangeInterruptStatus.
1739:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1740:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1741:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1742:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1743:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_ClearRangeInterrupt(SAR_Type *base, uint32_t chanMask)
1744:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1745:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1746:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1747:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_INTR(base) = chanMask;
 100              		.loc 3 1747 0
 101 0030 C4F83032 		str	r3, [r4, #560]
1748:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1749:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     /* Dummy read for buffered writes. */
1750:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     (void) SAR_RANGE_INTR(base);
 102              		.loc 3 1750 0
 103 0034 D4F83032 		ldr	r3, [r4, #560]
 104              	.LVL7:
 105 0038 70BD     		pop	{r4, r5, r6, pc}
 106              	.L3:
 107 003a 00BF     		.align	2
 108              	.L2:
 109 003c 00001D41 		.word	1092419584
 110 0040 00000000 		.word	sample_uV
 111 0044 00000000 		.word	enable
 112              	.LBE31:
 113              	.LBE30:
 114              		.cfi_endproc
 115              	.LFE739:
 116              		.size	ADC_1_my_ISR, .-ADC_1_my_ISR
 117              		.section	.text.LightSensor_Init,"ax",%progbits
 118              		.align	1
 119              		.global	LightSensor_Init
 120              		.thumb
 121              		.thumb_func
 122              		.type	LightSensor_Init, %function
 123              	LightSensor_Init:
 124              	.LFB738:
   8:light_sensor.c ****     ADC_1_StartEx(ADC_1_my_ISR);
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 57


 125              		.loc 1 8 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129 0000 08B5     		push	{r3, lr}
 130              		.cfi_def_cfa_offset 8
 131              		.cfi_offset 3, -8
 132              		.cfi_offset 14, -4
   9:light_sensor.c ****     ADC_1_SetEosMask(0);
 133              		.loc 1 9 0
 134 0002 0548     		ldr	r0, .L5
 135 0004 FFF7FEFF 		bl	ADC_1_StartEx
 136              	.LVL8:
  10:light_sensor.c ****    // ADC_1_SetHighLimit(2);
 137              		.loc 1 10 0
 138 0008 0020     		movs	r0, #0
 139 000a FFF7FEFF 		bl	ADC_1_SetEosMask
 140              	.LVL9:
 141              	.LBB32:
 142              	.LBB33:
 143              	.LBB34:
1751:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1752:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1753:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1754:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1755:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetRangeInterrupt
1756:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1757:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1758:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Trigger a range interrupt with software for the specific channel mask.
1759:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1760:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1761:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1762:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1763:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
1764:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
1765:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1766:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1767:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1768:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1769:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterrupt(SAR_Type *base, uint32_t chanMask)
1770:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1771:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1772:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1773:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_INTR_SET(base) = chanMask;
1774:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** }
1775:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1776:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1777:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** /*******************************************************************************
1778:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Function Name: Cy_SAR_SetRangeInterruptMask
1779:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** ****************************************************************************//**
1780:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1781:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Enable which channels can trigger a range interrupt.
1782:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1783:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param base
1784:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * Pointer to structure describing registers
1785:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1786:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \param chanMask
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 58


1787:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * The channel mask. Bit 0 is for channel 0, etc.
1788:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1789:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \return None
1790:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1791:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \funcusage
1792:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1793:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** * \snippet sar_sut_01.cydsn/main_cm0p.c SNIPPET_SAR_SET_RANGE_INTERRUPT_MASK
1794:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *
1795:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** *******************************************************************************/
1796:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** __STATIC_INLINE void Cy_SAR_SetRangeInterruptMask(SAR_Type *base, uint32_t chanMask)
1797:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** {
1798:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     CY_ASSERT_L2(CY_SAR_CHANMASK(chanMask));
1799:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h **** 
1800:Generated_Source\PSoC6\pdl\drivers/peripheral/sar/cy_sar.h ****     SAR_RANGE_INTR_MASK(base) = chanMask;
 144              		.loc 3 1800 0
 145 000e 034B     		ldr	r3, .L5+4
 146 0010 0122     		movs	r2, #1
 147 0012 C3F83822 		str	r2, [r3, #568]
 148              	.LVL10:
 149 0016 08BD     		pop	{r3, pc}
 150              	.L6:
 151              		.align	2
 152              	.L5:
 153 0018 00000000 		.word	ADC_1_my_ISR
 154 001c 00001D41 		.word	1092419584
 155              	.LBE34:
 156              	.LBE33:
 157              	.LBE32:
 158              		.cfi_endproc
 159              	.LFE738:
 160              		.size	LightSensor_Init, .-LightSensor_Init
 161              		.comm	sample_uV,4,4
 162              		.text
 163              	.Letext0:
 164              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 165              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 166              		.file 6 "Generated_Source\\PSoC6\\pdl\\devices/psoc6/include/ip/cyip_sar.h"
 167              		.file 7 "Generated_Source\\PSoC6\\pdl\\devices/psoc6/include/psoc6_01_config.h"
 168              		.file 8 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/device/cy_device.h"
 169              		.file 9 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/scb/cy_scb_uart.h"
 170              		.file 10 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/tcpwm/cy_tcpwm_counter.h"
 171              		.file 11 "Generated_Source\\PSoC6\\pdl\\drivers/peripheral/tcpwm/cy_tcpwm_pwm.h"
 172              		.file 12 "Generated_Source\\PSoC6\\pdl\\cmsis/include/core_cm4.h"
 173              		.file 13 "Generated_Source\\PSoC6/UART_1.h"
 174              		.file 14 "Generated_Source\\PSoC6/Counter_1.h"
 175              		.file 15 "Generated_Source\\PSoC6/PWM_L.h"
 176              		.file 16 "Generated_Source\\PSoC6/PWM_R.h"
 177              		.file 17 "Generated_Source\\PSoC6/Counter_2.h"
 178              		.file 18 "Generated_Source\\PSoC6/Counter_4.h"
 179              		.file 19 "Generated_Source\\PSoC6/Counter_3.h"
 180              		.file 20 "globals.h"
 181              		.section	.debug_info,"",%progbits
 182              	.Ldebug_info0:
 183 0000 200F0000 		.4byte	0xf20
 184 0004 0400     		.2byte	0x4
 185 0006 00000000 		.4byte	.Ldebug_abbrev0
 186 000a 04       		.byte	0x4
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 59


 187 000b 01       		.uleb128 0x1
 188 000c 5A000000 		.4byte	.LASF247
 189 0010 0C       		.byte	0xc
 190 0011 750E0000 		.4byte	.LASF248
 191 0015 F0010000 		.4byte	.LASF249
 192 0019 20000000 		.4byte	.Ldebug_ranges0+0x20
 193 001d 00000000 		.4byte	0
 194 0021 00000000 		.4byte	.Ldebug_line0
 195 0025 02       		.uleb128 0x2
 196 0026 02       		.byte	0x2
 197 0027 05       		.byte	0x5
 198 0028 2F0A0000 		.4byte	.LASF0
 199 002c 02       		.uleb128 0x2
 200 002d 01       		.byte	0x1
 201 002e 06       		.byte	0x6
 202 002f 890B0000 		.4byte	.LASF1
 203 0033 03       		.uleb128 0x3
 204 0034 4D010000 		.4byte	.LASF3
 205 0038 04       		.byte	0x4
 206 0039 1D       		.byte	0x1d
 207 003a 3E000000 		.4byte	0x3e
 208 003e 02       		.uleb128 0x2
 209 003f 01       		.byte	0x1
 210 0040 08       		.byte	0x8
 211 0041 E7090000 		.4byte	.LASF2
 212 0045 03       		.uleb128 0x3
 213 0046 11050000 		.4byte	.LASF4
 214 004a 04       		.byte	0x4
 215 004b 29       		.byte	0x29
 216 004c 25000000 		.4byte	0x25
 217 0050 03       		.uleb128 0x3
 218 0051 950B0000 		.4byte	.LASF5
 219 0055 04       		.byte	0x4
 220 0056 2B       		.byte	0x2b
 221 0057 5B000000 		.4byte	0x5b
 222 005b 02       		.uleb128 0x2
 223 005c 02       		.byte	0x2
 224 005d 07       		.byte	0x7
 225 005e 490C0000 		.4byte	.LASF6
 226 0062 03       		.uleb128 0x3
 227 0063 62070000 		.4byte	.LASF7
 228 0067 04       		.byte	0x4
 229 0068 3F       		.byte	0x3f
 230 0069 6D000000 		.4byte	0x6d
 231 006d 02       		.uleb128 0x2
 232 006e 04       		.byte	0x4
 233 006f 05       		.byte	0x5
 234 0070 A7030000 		.4byte	.LASF8
 235 0074 03       		.uleb128 0x3
 236 0075 E8040000 		.4byte	.LASF9
 237 0079 04       		.byte	0x4
 238 007a 41       		.byte	0x41
 239 007b 7F000000 		.4byte	0x7f
 240 007f 02       		.uleb128 0x2
 241 0080 04       		.byte	0x4
 242 0081 07       		.byte	0x7
 243 0082 D7050000 		.4byte	.LASF10
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 60


 244 0086 02       		.uleb128 0x2
 245 0087 08       		.byte	0x8
 246 0088 05       		.byte	0x5
 247 0089 E2020000 		.4byte	.LASF11
 248 008d 02       		.uleb128 0x2
 249 008e 08       		.byte	0x8
 250 008f 07       		.byte	0x7
 251 0090 D9010000 		.4byte	.LASF12
 252 0094 04       		.uleb128 0x4
 253 0095 04       		.byte	0x4
 254 0096 05       		.byte	0x5
 255 0097 696E7400 		.ascii	"int\000"
 256 009b 02       		.uleb128 0x2
 257 009c 04       		.byte	0x4
 258 009d 07       		.byte	0x7
 259 009e 8E050000 		.4byte	.LASF13
 260 00a2 03       		.uleb128 0x3
 261 00a3 A20D0000 		.4byte	.LASF14
 262 00a7 05       		.byte	0x5
 263 00a8 18       		.byte	0x18
 264 00a9 33000000 		.4byte	0x33
 265 00ad 03       		.uleb128 0x3
 266 00ae DA020000 		.4byte	.LASF15
 267 00b2 05       		.byte	0x5
 268 00b3 20       		.byte	0x20
 269 00b4 45000000 		.4byte	0x45
 270 00b8 03       		.uleb128 0x3
 271 00b9 9B050000 		.4byte	.LASF16
 272 00bd 05       		.byte	0x5
 273 00be 24       		.byte	0x24
 274 00bf 50000000 		.4byte	0x50
 275 00c3 03       		.uleb128 0x3
 276 00c4 DF090000 		.4byte	.LASF17
 277 00c8 05       		.byte	0x5
 278 00c9 2C       		.byte	0x2c
 279 00ca 62000000 		.4byte	0x62
 280 00ce 03       		.uleb128 0x3
 281 00cf 2A0B0000 		.4byte	.LASF18
 282 00d3 05       		.byte	0x5
 283 00d4 30       		.byte	0x30
 284 00d5 74000000 		.4byte	0x74
 285 00d9 02       		.uleb128 0x2
 286 00da 04       		.byte	0x4
 287 00db 07       		.byte	0x7
 288 00dc 17080000 		.4byte	.LASF19
 289 00e0 05       		.uleb128 0x5
 290 00e1 CE000000 		.4byte	0xce
 291 00e5 06       		.uleb128 0x6
 292 00e6 E0000000 		.4byte	0xe0
 293 00ea 07       		.uleb128 0x7
 294 00eb E5000000 		.4byte	0xe5
 295 00ef FA000000 		.4byte	0xfa
 296 00f3 08       		.uleb128 0x8
 297 00f4 D9000000 		.4byte	0xd9
 298 00f8 01       		.byte	0x1
 299 00f9 00       		.byte	0
 300 00fa 07       		.uleb128 0x7
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 61


 301 00fb E0000000 		.4byte	0xe0
 302 00ff 0A010000 		.4byte	0x10a
 303 0103 08       		.uleb128 0x8
 304 0104 D9000000 		.4byte	0xd9
 305 0108 0F       		.byte	0xf
 306 0109 00       		.byte	0
 307 010a 07       		.uleb128 0x7
 308 010b E5000000 		.4byte	0xe5
 309 010f 1A010000 		.4byte	0x11a
 310 0113 08       		.uleb128 0x8
 311 0114 D9000000 		.4byte	0xd9
 312 0118 0F       		.byte	0xf
 313 0119 00       		.byte	0
 314 011a 07       		.uleb128 0x7
 315 011b E5000000 		.4byte	0xe5
 316 011f 2A010000 		.4byte	0x12a
 317 0123 08       		.uleb128 0x8
 318 0124 D9000000 		.4byte	0xd9
 319 0128 02       		.byte	0x2
 320 0129 00       		.byte	0
 321 012a 07       		.uleb128 0x7
 322 012b E5000000 		.4byte	0xe5
 323 012f 3A010000 		.4byte	0x13a
 324 0133 08       		.uleb128 0x8
 325 0134 D9000000 		.4byte	0xd9
 326 0138 0E       		.byte	0xe
 327 0139 00       		.byte	0
 328 013a 09       		.uleb128 0x9
 329 013b 080F     		.2byte	0xf08
 330 013d 06       		.byte	0x6
 331 013e 21       		.byte	0x21
 332 013f C2030000 		.4byte	0x3c2
 333 0143 0A       		.uleb128 0xa
 334 0144 D4090000 		.4byte	.LASF20
 335 0148 06       		.byte	0x6
 336 0149 22       		.byte	0x22
 337 014a E0000000 		.4byte	0xe0
 338 014e 00       		.byte	0
 339 014f 0A       		.uleb128 0xa
 340 0150 92080000 		.4byte	.LASF21
 341 0154 06       		.byte	0x6
 342 0155 23       		.byte	0x23
 343 0156 E0000000 		.4byte	0xe0
 344 015a 04       		.byte	0x4
 345 015b 0A       		.uleb128 0xa
 346 015c 530A0000 		.4byte	.LASF22
 347 0160 06       		.byte	0x6
 348 0161 24       		.byte	0x24
 349 0162 C7030000 		.4byte	0x3c7
 350 0166 08       		.byte	0x8
 351 0167 0A       		.uleb128 0xa
 352 0168 03050000 		.4byte	.LASF23
 353 016c 06       		.byte	0x6
 354 016d 25       		.byte	0x25
 355 016e E0000000 		.4byte	0xe0
 356 0172 10       		.byte	0x10
 357 0173 0A       		.uleb128 0xa
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 62


 358 0174 C3080000 		.4byte	.LASF24
 359 0178 06       		.byte	0x6
 360 0179 26       		.byte	0x26
 361 017a E0000000 		.4byte	0xe0
 362 017e 14       		.byte	0x14
 363 017f 0A       		.uleb128 0xa
 364 0180 9E080000 		.4byte	.LASF25
 365 0184 06       		.byte	0x6
 366 0185 27       		.byte	0x27
 367 0186 E0000000 		.4byte	0xe0
 368 018a 18       		.byte	0x18
 369 018b 0A       		.uleb128 0xa
 370 018c 8B010000 		.4byte	.LASF26
 371 0190 06       		.byte	0x6
 372 0191 28       		.byte	0x28
 373 0192 E0000000 		.4byte	0xe0
 374 0196 1C       		.byte	0x1c
 375 0197 0A       		.uleb128 0xa
 376 0198 BB080000 		.4byte	.LASF27
 377 019c 06       		.byte	0x6
 378 019d 29       		.byte	0x29
 379 019e E0000000 		.4byte	0xe0
 380 01a2 20       		.byte	0x20
 381 01a3 0A       		.uleb128 0xa
 382 01a4 AA070000 		.4byte	.LASF28
 383 01a8 06       		.byte	0x6
 384 01a9 2A       		.byte	0x2a
 385 01aa E0000000 		.4byte	0xe0
 386 01ae 24       		.byte	0x24
 387 01af 0A       		.uleb128 0xa
 388 01b0 70090000 		.4byte	.LASF29
 389 01b4 06       		.byte	0x6
 390 01b5 2B       		.byte	0x2b
 391 01b6 E1030000 		.4byte	0x3e1
 392 01ba 28       		.byte	0x28
 393 01bb 0A       		.uleb128 0xa
 394 01bc 32050000 		.4byte	.LASF30
 395 01c0 06       		.byte	0x6
 396 01c1 2C       		.byte	0x2c
 397 01c2 E6030000 		.4byte	0x3e6
 398 01c6 80       		.byte	0x80
 399 01c7 0A       		.uleb128 0xa
 400 01c8 DC0A0000 		.4byte	.LASF31
 401 01cc 06       		.byte	0x6
 402 01cd 2D       		.byte	0x2d
 403 01ce F0030000 		.4byte	0x3f0
 404 01d2 C0       		.byte	0xc0
 405 01d3 0B       		.uleb128 0xb
 406 01d4 790C0000 		.4byte	.LASF32
 407 01d8 06       		.byte	0x6
 408 01d9 2E       		.byte	0x2e
 409 01da FA030000 		.4byte	0x3fa
 410 01de 0001     		.2byte	0x100
 411 01e0 0B       		.uleb128 0xb
 412 01e1 84090000 		.4byte	.LASF33
 413 01e5 06       		.byte	0x6
 414 01e6 2F       		.byte	0x2f
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 63


 415 01e7 04040000 		.4byte	0x404
 416 01eb 4001     		.2byte	0x140
 417 01ed 0B       		.uleb128 0xb
 418 01ee 50080000 		.4byte	.LASF34
 419 01f2 06       		.byte	0x6
 420 01f3 30       		.byte	0x30
 421 01f4 0E040000 		.4byte	0x40e
 422 01f8 8001     		.2byte	0x180
 423 01fa 0B       		.uleb128 0xb
 424 01fb 050B0000 		.4byte	.LASF35
 425 01ff 06       		.byte	0x6
 426 0200 31       		.byte	0x31
 427 0201 18040000 		.4byte	0x418
 428 0205 C001     		.2byte	0x1c0
 429 0207 0B       		.uleb128 0xb
 430 0208 E3060000 		.4byte	.LASF36
 431 020c 06       		.byte	0x6
 432 020d 32       		.byte	0x32
 433 020e E5000000 		.4byte	0xe5
 434 0212 0002     		.2byte	0x200
 435 0214 0B       		.uleb128 0xb
 436 0215 8E0D0000 		.4byte	.LASF37
 437 0219 06       		.byte	0x6
 438 021a 33       		.byte	0x33
 439 021b E5000000 		.4byte	0xe5
 440 021f 0402     		.2byte	0x204
 441 0221 0B       		.uleb128 0xb
 442 0222 3D060000 		.4byte	.LASF38
 443 0226 06       		.byte	0x6
 444 0227 34       		.byte	0x34
 445 0228 E5000000 		.4byte	0xe5
 446 022c 0802     		.2byte	0x208
 447 022e 0B       		.uleb128 0xb
 448 022f 8F0A0000 		.4byte	.LASF39
 449 0233 06       		.byte	0x6
 450 0234 35       		.byte	0x35
 451 0235 E5000000 		.4byte	0xe5
 452 0239 0C02     		.2byte	0x20c
 453 023b 0B       		.uleb128 0xb
 454 023c C1010000 		.4byte	.LASF40
 455 0240 06       		.byte	0x6
 456 0241 36       		.byte	0x36
 457 0242 E0000000 		.4byte	0xe0
 458 0246 1002     		.2byte	0x210
 459 0248 0B       		.uleb128 0xb
 460 0249 B5070000 		.4byte	.LASF41
 461 024d 06       		.byte	0x6
 462 024e 37       		.byte	0x37
 463 024f E0000000 		.4byte	0xe0
 464 0253 1402     		.2byte	0x214
 465 0255 0B       		.uleb128 0xb
 466 0256 68060000 		.4byte	.LASF42
 467 025a 06       		.byte	0x6
 468 025b 38       		.byte	0x38
 469 025c E0000000 		.4byte	0xe0
 470 0260 1802     		.2byte	0x218
 471 0262 0B       		.uleb128 0xb
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 64


 472 0263 2B090000 		.4byte	.LASF43
 473 0267 06       		.byte	0x6
 474 0268 39       		.byte	0x39
 475 0269 E5000000 		.4byte	0xe5
 476 026d 1C02     		.2byte	0x21c
 477 026f 0B       		.uleb128 0xb
 478 0270 24050000 		.4byte	.LASF44
 479 0274 06       		.byte	0x6
 480 0275 3A       		.byte	0x3a
 481 0276 E0000000 		.4byte	0xe0
 482 027a 2002     		.2byte	0x220
 483 027c 0B       		.uleb128 0xb
 484 027d 19090000 		.4byte	.LASF45
 485 0281 06       		.byte	0x6
 486 0282 3B       		.byte	0x3b
 487 0283 E0000000 		.4byte	0xe0
 488 0287 2402     		.2byte	0x224
 489 0289 0B       		.uleb128 0xb
 490 028a E20B0000 		.4byte	.LASF46
 491 028e 06       		.byte	0x6
 492 028f 3C       		.byte	0x3c
 493 0290 E0000000 		.4byte	0xe0
 494 0294 2802     		.2byte	0x228
 495 0296 0B       		.uleb128 0xb
 496 0297 C00B0000 		.4byte	.LASF47
 497 029b 06       		.byte	0x6
 498 029c 3D       		.byte	0x3d
 499 029d E5000000 		.4byte	0xe5
 500 02a1 2C02     		.2byte	0x22c
 501 02a3 0B       		.uleb128 0xb
 502 02a4 CA060000 		.4byte	.LASF48
 503 02a8 06       		.byte	0x6
 504 02a9 3E       		.byte	0x3e
 505 02aa E0000000 		.4byte	0xe0
 506 02ae 3002     		.2byte	0x230
 507 02b0 0B       		.uleb128 0xb
 508 02b1 15040000 		.4byte	.LASF49
 509 02b5 06       		.byte	0x6
 510 02b6 3F       		.byte	0x3f
 511 02b7 E0000000 		.4byte	0xe0
 512 02bb 3402     		.2byte	0x234
 513 02bd 0B       		.uleb128 0xb
 514 02be CA020000 		.4byte	.LASF50
 515 02c2 06       		.byte	0x6
 516 02c3 40       		.byte	0x40
 517 02c4 E0000000 		.4byte	0xe0
 518 02c8 3802     		.2byte	0x238
 519 02ca 0B       		.uleb128 0xb
 520 02cb 34030000 		.4byte	.LASF51
 521 02cf 06       		.byte	0x6
 522 02d0 41       		.byte	0x41
 523 02d1 E5000000 		.4byte	0xe5
 524 02d5 3C02     		.2byte	0x23c
 525 02d7 0B       		.uleb128 0xb
 526 02d8 E8030000 		.4byte	.LASF52
 527 02dc 06       		.byte	0x6
 528 02dd 42       		.byte	0x42
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 65


 529 02de E5000000 		.4byte	0xe5
 530 02e2 4002     		.2byte	0x240
 531 02e4 0B       		.uleb128 0xb
 532 02e5 9A090000 		.4byte	.LASF53
 533 02e9 06       		.byte	0x6
 534 02ea 43       		.byte	0x43
 535 02eb 22040000 		.4byte	0x422
 536 02ef 4402     		.2byte	0x244
 537 02f1 0B       		.uleb128 0xb
 538 02f2 1B000000 		.4byte	.LASF54
 539 02f6 06       		.byte	0x6
 540 02f7 44       		.byte	0x44
 541 02f8 E0000000 		.4byte	0xe0
 542 02fc 8002     		.2byte	0x280
 543 02fe 0B       		.uleb128 0xb
 544 02ff A4090000 		.4byte	.LASF55
 545 0303 06       		.byte	0x6
 546 0304 45       		.byte	0x45
 547 0305 2C040000 		.4byte	0x42c
 548 0309 8402     		.2byte	0x284
 549 030b 0B       		.uleb128 0xb
 550 030c 01040000 		.4byte	.LASF56
 551 0310 06       		.byte	0x6
 552 0311 46       		.byte	0x46
 553 0312 E5000000 		.4byte	0xe5
 554 0316 9002     		.2byte	0x290
 555 0318 0B       		.uleb128 0xb
 556 0319 AE090000 		.4byte	.LASF57
 557 031d 06       		.byte	0x6
 558 031e 47       		.byte	0x47
 559 031f 36040000 		.4byte	0x436
 560 0323 9402     		.2byte	0x294
 561 0325 0B       		.uleb128 0xb
 562 0326 1F0D0000 		.4byte	.LASF58
 563 032a 06       		.byte	0x6
 564 032b 48       		.byte	0x48
 565 032c E5000000 		.4byte	0xe5
 566 0330 A002     		.2byte	0x2a0
 567 0332 0B       		.uleb128 0xb
 568 0333 12000000 		.4byte	.LASF59
 569 0337 06       		.byte	0x6
 570 0338 49       		.byte	0x49
 571 0339 E5000000 		.4byte	0xe5
 572 033d A402     		.2byte	0x2a4
 573 033f 0B       		.uleb128 0xb
 574 0340 B8090000 		.4byte	.LASF60
 575 0344 06       		.byte	0x6
 576 0345 4A       		.byte	0x4a
 577 0346 40040000 		.4byte	0x440
 578 034a A802     		.2byte	0x2a8
 579 034c 0B       		.uleb128 0xb
 580 034d 33010000 		.4byte	.LASF61
 581 0351 06       		.byte	0x6
 582 0352 4B       		.byte	0x4b
 583 0353 E0000000 		.4byte	0xe0
 584 0357 0003     		.2byte	0x300
 585 0359 0B       		.uleb128 0xb
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 66


 586 035a 58040000 		.4byte	.LASF62
 587 035e 06       		.byte	0x6
 588 035f 4C       		.byte	0x4c
 589 0360 E0000000 		.4byte	0xe0
 590 0364 0403     		.2byte	0x304
 591 0366 0B       		.uleb128 0xb
 592 0367 C2090000 		.4byte	.LASF63
 593 036b 06       		.byte	0x6
 594 036c 4D       		.byte	0x4d
 595 036d 5A040000 		.4byte	0x45a
 596 0371 0803     		.2byte	0x308
 597 0373 0B       		.uleb128 0xb
 598 0374 5C0A0000 		.4byte	.LASF64
 599 0378 06       		.byte	0x6
 600 0379 4E       		.byte	0x4e
 601 037a E0000000 		.4byte	0xe0
 602 037e 4003     		.2byte	0x340
 603 0380 0B       		.uleb128 0xb
 604 0381 900C0000 		.4byte	.LASF65
 605 0385 06       		.byte	0x6
 606 0386 4F       		.byte	0x4f
 607 0387 E0000000 		.4byte	0xe0
 608 038b 4403     		.2byte	0x344
 609 038d 0B       		.uleb128 0xb
 610 038e D6030000 		.4byte	.LASF66
 611 0392 06       		.byte	0x6
 612 0393 50       		.byte	0x50
 613 0394 E5000000 		.4byte	0xe5
 614 0398 4803     		.2byte	0x348
 615 039a 0B       		.uleb128 0xb
 616 039b 7A030000 		.4byte	.LASF67
 617 039f 06       		.byte	0x6
 618 03a0 51       		.byte	0x51
 619 03a1 75040000 		.4byte	0x475
 620 03a5 4C03     		.2byte	0x34c
 621 03a7 0B       		.uleb128 0xb
 622 03a8 B6020000 		.4byte	.LASF68
 623 03ac 06       		.byte	0x6
 624 03ad 52       		.byte	0x52
 625 03ae E0000000 		.4byte	0xe0
 626 03b2 000F     		.2byte	0xf00
 627 03b4 0B       		.uleb128 0xb
 628 03b5 C0020000 		.4byte	.LASF69
 629 03b9 06       		.byte	0x6
 630 03ba 53       		.byte	0x53
 631 03bb E0000000 		.4byte	0xe0
 632 03bf 040F     		.2byte	0xf04
 633 03c1 00       		.byte	0
 634 03c2 05       		.uleb128 0x5
 635 03c3 EA000000 		.4byte	0xea
 636 03c7 06       		.uleb128 0x6
 637 03c8 C2030000 		.4byte	0x3c2
 638 03cc 07       		.uleb128 0x7
 639 03cd E5000000 		.4byte	0xe5
 640 03d1 DC030000 		.4byte	0x3dc
 641 03d5 08       		.uleb128 0x8
 642 03d6 D9000000 		.4byte	0xd9
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 67


 643 03da 15       		.byte	0x15
 644 03db 00       		.byte	0
 645 03dc 05       		.uleb128 0x5
 646 03dd CC030000 		.4byte	0x3cc
 647 03e1 06       		.uleb128 0x6
 648 03e2 DC030000 		.4byte	0x3dc
 649 03e6 05       		.uleb128 0x5
 650 03e7 FA000000 		.4byte	0xfa
 651 03eb 05       		.uleb128 0x5
 652 03ec 0A010000 		.4byte	0x10a
 653 03f0 06       		.uleb128 0x6
 654 03f1 EB030000 		.4byte	0x3eb
 655 03f5 05       		.uleb128 0x5
 656 03f6 0A010000 		.4byte	0x10a
 657 03fa 06       		.uleb128 0x6
 658 03fb F5030000 		.4byte	0x3f5
 659 03ff 05       		.uleb128 0x5
 660 0400 0A010000 		.4byte	0x10a
 661 0404 06       		.uleb128 0x6
 662 0405 FF030000 		.4byte	0x3ff
 663 0409 05       		.uleb128 0x5
 664 040a 0A010000 		.4byte	0x10a
 665 040e 06       		.uleb128 0x6
 666 040f 09040000 		.4byte	0x409
 667 0413 05       		.uleb128 0x5
 668 0414 0A010000 		.4byte	0x10a
 669 0418 06       		.uleb128 0x6
 670 0419 13040000 		.4byte	0x413
 671 041d 05       		.uleb128 0x5
 672 041e 2A010000 		.4byte	0x12a
 673 0422 06       		.uleb128 0x6
 674 0423 1D040000 		.4byte	0x41d
 675 0427 05       		.uleb128 0x5
 676 0428 1A010000 		.4byte	0x11a
 677 042c 06       		.uleb128 0x6
 678 042d 27040000 		.4byte	0x427
 679 0431 05       		.uleb128 0x5
 680 0432 1A010000 		.4byte	0x11a
 681 0436 06       		.uleb128 0x6
 682 0437 31040000 		.4byte	0x431
 683 043b 05       		.uleb128 0x5
 684 043c CC030000 		.4byte	0x3cc
 685 0440 06       		.uleb128 0x6
 686 0441 3B040000 		.4byte	0x43b
 687 0445 07       		.uleb128 0x7
 688 0446 E5000000 		.4byte	0xe5
 689 044a 55040000 		.4byte	0x455
 690 044e 08       		.uleb128 0x8
 691 044f D9000000 		.4byte	0xd9
 692 0453 0D       		.byte	0xd
 693 0454 00       		.byte	0
 694 0455 05       		.uleb128 0x5
 695 0456 45040000 		.4byte	0x445
 696 045a 06       		.uleb128 0x6
 697 045b 55040000 		.4byte	0x455
 698 045f 07       		.uleb128 0x7
 699 0460 E5000000 		.4byte	0xe5
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 68


 700 0464 70040000 		.4byte	0x470
 701 0468 0C       		.uleb128 0xc
 702 0469 D9000000 		.4byte	0xd9
 703 046d EC02     		.2byte	0x2ec
 704 046f 00       		.byte	0
 705 0470 05       		.uleb128 0x5
 706 0471 5F040000 		.4byte	0x45f
 707 0475 06       		.uleb128 0x6
 708 0476 70040000 		.4byte	0x470
 709 047a 03       		.uleb128 0x3
 710 047b 6F0A0000 		.4byte	.LASF70
 711 047f 06       		.byte	0x6
 712 0480 54       		.byte	0x54
 713 0481 3A010000 		.4byte	0x13a
 714 0485 0D       		.uleb128 0xd
 715 0486 4A0A0000 		.4byte	.LASF71
 716 048a 07       		.byte	0x7
 717 048b 5206     		.2byte	0x652
 718 048d 7A040000 		.4byte	0x47a
 719 0491 02       		.uleb128 0x2
 720 0492 08       		.byte	0x8
 721 0493 04       		.byte	0x4
 722 0494 4D0B0000 		.4byte	.LASF72
 723 0498 0E       		.uleb128 0xe
 724 0499 B8       		.byte	0xb8
 725 049a 08       		.byte	0x8
 726 049b 34       		.byte	0x34
 727 049c A9080000 		.4byte	0x8a9
 728 04a0 0A       		.uleb128 0xa
 729 04a1 A4010000 		.4byte	.LASF73
 730 04a5 08       		.byte	0x8
 731 04a6 37       		.byte	0x37
 732 04a7 CE000000 		.4byte	0xce
 733 04ab 00       		.byte	0
 734 04ac 0A       		.uleb128 0xa
 735 04ad 46030000 		.4byte	.LASF74
 736 04b1 08       		.byte	0x8
 737 04b2 38       		.byte	0x38
 738 04b3 CE000000 		.4byte	0xce
 739 04b7 04       		.byte	0x4
 740 04b8 0A       		.uleb128 0xa
 741 04b9 0C040000 		.4byte	.LASF75
 742 04bd 08       		.byte	0x8
 743 04be 39       		.byte	0x39
 744 04bf CE000000 		.4byte	0xce
 745 04c3 08       		.byte	0x8
 746 04c4 0A       		.uleb128 0xa
 747 04c5 CC090000 		.4byte	.LASF76
 748 04c9 08       		.byte	0x8
 749 04ca 3A       		.byte	0x3a
 750 04cb CE000000 		.4byte	0xce
 751 04cf 0C       		.byte	0xc
 752 04d0 0A       		.uleb128 0xa
 753 04d1 51030000 		.4byte	.LASF77
 754 04d5 08       		.byte	0x8
 755 04d6 3B       		.byte	0x3b
 756 04d7 CE000000 		.4byte	0xce
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 69


 757 04db 10       		.byte	0x10
 758 04dc 0A       		.uleb128 0xa
 759 04dd 85030000 		.4byte	.LASF78
 760 04e1 08       		.byte	0x8
 761 04e2 3C       		.byte	0x3c
 762 04e3 CE000000 		.4byte	0xce
 763 04e7 14       		.byte	0x14
 764 04e8 0A       		.uleb128 0xa
 765 04e9 72060000 		.4byte	.LASF79
 766 04ed 08       		.byte	0x8
 767 04ee 3D       		.byte	0x3d
 768 04ef CE000000 		.4byte	0xce
 769 04f3 18       		.byte	0x18
 770 04f4 0A       		.uleb128 0xa
 771 04f5 2A010000 		.4byte	.LASF80
 772 04f9 08       		.byte	0x8
 773 04fa 3E       		.byte	0x3e
 774 04fb CE000000 		.4byte	0xce
 775 04ff 1C       		.byte	0x1c
 776 0500 0A       		.uleb128 0xa
 777 0501 6D0E0000 		.4byte	.LASF81
 778 0505 08       		.byte	0x8
 779 0506 3F       		.byte	0x3f
 780 0507 CE000000 		.4byte	0xce
 781 050b 20       		.byte	0x20
 782 050c 0A       		.uleb128 0xa
 783 050d F3080000 		.4byte	.LASF82
 784 0511 08       		.byte	0x8
 785 0512 40       		.byte	0x40
 786 0513 CE000000 		.4byte	0xce
 787 0517 24       		.byte	0x24
 788 0518 0A       		.uleb128 0xa
 789 0519 C50E0000 		.4byte	.LASF83
 790 051d 08       		.byte	0x8
 791 051e 43       		.byte	0x43
 792 051f A2000000 		.4byte	0xa2
 793 0523 28       		.byte	0x28
 794 0524 0A       		.uleb128 0xa
 795 0525 0D010000 		.4byte	.LASF84
 796 0529 08       		.byte	0x8
 797 052a 44       		.byte	0x44
 798 052b A2000000 		.4byte	0xa2
 799 052f 29       		.byte	0x29
 800 0530 0A       		.uleb128 0xa
 801 0531 630E0000 		.4byte	.LASF85
 802 0535 08       		.byte	0x8
 803 0536 45       		.byte	0x45
 804 0537 A2000000 		.4byte	0xa2
 805 053b 2A       		.byte	0x2a
 806 053c 0A       		.uleb128 0xa
 807 053d E5080000 		.4byte	.LASF86
 808 0541 08       		.byte	0x8
 809 0542 46       		.byte	0x46
 810 0543 A2000000 		.4byte	0xa2
 811 0547 2B       		.byte	0x2b
 812 0548 0A       		.uleb128 0xa
 813 0549 17070000 		.4byte	.LASF87
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 70


 814 054d 08       		.byte	0x8
 815 054e 47       		.byte	0x47
 816 054f A2000000 		.4byte	0xa2
 817 0553 2C       		.byte	0x2c
 818 0554 0A       		.uleb128 0xa
 819 0555 D50B0000 		.4byte	.LASF88
 820 0559 08       		.byte	0x8
 821 055a 48       		.byte	0x48
 822 055b A2000000 		.4byte	0xa2
 823 055f 2D       		.byte	0x2d
 824 0560 0A       		.uleb128 0xa
 825 0561 5A030000 		.4byte	.LASF89
 826 0565 08       		.byte	0x8
 827 0566 49       		.byte	0x49
 828 0567 A2000000 		.4byte	0xa2
 829 056b 2E       		.byte	0x2e
 830 056c 0A       		.uleb128 0xa
 831 056d DA070000 		.4byte	.LASF90
 832 0571 08       		.byte	0x8
 833 0572 4A       		.byte	0x4a
 834 0573 A2000000 		.4byte	0xa2
 835 0577 2F       		.byte	0x2f
 836 0578 0A       		.uleb128 0xa
 837 0579 6F0B0000 		.4byte	.LASF91
 838 057d 08       		.byte	0x8
 839 057e 4B       		.byte	0x4b
 840 057f A2000000 		.4byte	0xa2
 841 0583 30       		.byte	0x30
 842 0584 0A       		.uleb128 0xa
 843 0585 50060000 		.4byte	.LASF92
 844 0589 08       		.byte	0x8
 845 058a 4E       		.byte	0x4e
 846 058b A2000000 		.4byte	0xa2
 847 058f 31       		.byte	0x31
 848 0590 0A       		.uleb128 0xa
 849 0591 3F010000 		.4byte	.LASF93
 850 0595 08       		.byte	0x8
 851 0596 4F       		.byte	0x4f
 852 0597 A2000000 		.4byte	0xa2
 853 059b 32       		.byte	0x32
 854 059c 0A       		.uleb128 0xa
 855 059d 82050000 		.4byte	.LASF94
 856 05a1 08       		.byte	0x8
 857 05a2 50       		.byte	0x50
 858 05a3 A2000000 		.4byte	0xa2
 859 05a7 33       		.byte	0x33
 860 05a8 0A       		.uleb128 0xa
 861 05a9 5C080000 		.4byte	.LASF95
 862 05ad 08       		.byte	0x8
 863 05ae 51       		.byte	0x51
 864 05af A2000000 		.4byte	0xa2
 865 05b3 34       		.byte	0x34
 866 05b4 0A       		.uleb128 0xa
 867 05b5 830C0000 		.4byte	.LASF96
 868 05b9 08       		.byte	0x8
 869 05ba 52       		.byte	0x52
 870 05bb AD000000 		.4byte	0xad
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 71


 871 05bf 36       		.byte	0x36
 872 05c0 0A       		.uleb128 0xa
 873 05c1 1F0B0000 		.4byte	.LASF97
 874 05c5 08       		.byte	0x8
 875 05c6 53       		.byte	0x53
 876 05c7 AD000000 		.4byte	0xad
 877 05cb 38       		.byte	0x38
 878 05cc 0A       		.uleb128 0xa
 879 05cd 4A0D0000 		.4byte	.LASF98
 880 05d1 08       		.byte	0x8
 881 05d2 54       		.byte	0x54
 882 05d3 AD000000 		.4byte	0xad
 883 05d7 3A       		.byte	0x3a
 884 05d8 0A       		.uleb128 0xa
 885 05d9 AD060000 		.4byte	.LASF99
 886 05dd 08       		.byte	0x8
 887 05de 55       		.byte	0x55
 888 05df A2000000 		.4byte	0xa2
 889 05e3 3C       		.byte	0x3c
 890 05e4 0A       		.uleb128 0xa
 891 05e5 6A040000 		.4byte	.LASF100
 892 05e9 08       		.byte	0x8
 893 05ea 56       		.byte	0x56
 894 05eb A2000000 		.4byte	0xa2
 895 05ef 3D       		.byte	0x3d
 896 05f0 0A       		.uleb128 0xa
 897 05f1 F70A0000 		.4byte	.LASF101
 898 05f5 08       		.byte	0x8
 899 05f6 57       		.byte	0x57
 900 05f7 A2000000 		.4byte	0xa2
 901 05fb 3E       		.byte	0x3e
 902 05fc 0A       		.uleb128 0xa
 903 05fd B5010000 		.4byte	.LASF102
 904 0601 08       		.byte	0x8
 905 0602 58       		.byte	0x58
 906 0603 A2000000 		.4byte	0xa2
 907 0607 3F       		.byte	0x3f
 908 0608 0A       		.uleb128 0xa
 909 0609 FE080000 		.4byte	.LASF103
 910 060d 08       		.byte	0x8
 911 060e 59       		.byte	0x59
 912 060f A2000000 		.4byte	0xa2
 913 0613 40       		.byte	0x40
 914 0614 0A       		.uleb128 0xa
 915 0615 F3040000 		.4byte	.LASF104
 916 0619 08       		.byte	0x8
 917 061a 5A       		.byte	0x5a
 918 061b A2000000 		.4byte	0xa2
 919 061f 41       		.byte	0x41
 920 0620 0A       		.uleb128 0xa
 921 0621 7B060000 		.4byte	.LASF105
 922 0625 08       		.byte	0x8
 923 0626 5B       		.byte	0x5b
 924 0627 A2000000 		.4byte	0xa2
 925 062b 42       		.byte	0x42
 926 062c 0A       		.uleb128 0xa
 927 062d F50B0000 		.4byte	.LASF106
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 72


 928 0631 08       		.byte	0x8
 929 0632 5C       		.byte	0x5c
 930 0633 A2000000 		.4byte	0xa2
 931 0637 43       		.byte	0x43
 932 0638 0A       		.uleb128 0xa
 933 0639 24040000 		.4byte	.LASF107
 934 063d 08       		.byte	0x8
 935 063e 5D       		.byte	0x5d
 936 063f A2000000 		.4byte	0xa2
 937 0643 44       		.byte	0x44
 938 0644 0A       		.uleb128 0xa
 939 0645 00000000 		.4byte	.LASF108
 940 0649 08       		.byte	0x8
 941 064a 5E       		.byte	0x5e
 942 064b CE000000 		.4byte	0xce
 943 064f 48       		.byte	0x48
 944 0650 0A       		.uleb128 0xa
 945 0651 F3030000 		.4byte	.LASF109
 946 0655 08       		.byte	0x8
 947 0656 5F       		.byte	0x5f
 948 0657 CE000000 		.4byte	0xce
 949 065b 4C       		.byte	0x4c
 950 065c 0A       		.uleb128 0xa
 951 065d DA0E0000 		.4byte	.LASF110
 952 0661 08       		.byte	0x8
 953 0662 60       		.byte	0x60
 954 0663 A2000000 		.4byte	0xa2
 955 0667 50       		.byte	0x50
 956 0668 0A       		.uleb128 0xa
 957 0669 A4020000 		.4byte	.LASF111
 958 066d 08       		.byte	0x8
 959 066e 61       		.byte	0x61
 960 066f A2000000 		.4byte	0xa2
 961 0673 51       		.byte	0x51
 962 0674 0A       		.uleb128 0xa
 963 0675 7E0D0000 		.4byte	.LASF112
 964 0679 08       		.byte	0x8
 965 067a 62       		.byte	0x62
 966 067b A2000000 		.4byte	0xa2
 967 067f 52       		.byte	0x52
 968 0680 0A       		.uleb128 0xa
 969 0681 000C0000 		.4byte	.LASF113
 970 0685 08       		.byte	0x8
 971 0686 63       		.byte	0x63
 972 0687 A2000000 		.4byte	0xa2
 973 068b 53       		.byte	0x53
 974 068c 0A       		.uleb128 0xa
 975 068d 0F0B0000 		.4byte	.LASF114
 976 0691 08       		.byte	0x8
 977 0692 64       		.byte	0x64
 978 0693 A2000000 		.4byte	0xa2
 979 0697 54       		.byte	0x54
 980 0698 0A       		.uleb128 0xa
 981 0699 F10C0000 		.4byte	.LASF115
 982 069d 08       		.byte	0x8
 983 069e 65       		.byte	0x65
 984 069f A2000000 		.4byte	0xa2
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 73


 985 06a3 55       		.byte	0x55
 986 06a4 0A       		.uleb128 0xa
 987 06a5 C3050000 		.4byte	.LASF116
 988 06a9 08       		.byte	0x8
 989 06aa 66       		.byte	0x66
 990 06ab A2000000 		.4byte	0xa2
 991 06af 56       		.byte	0x56
 992 06b0 0A       		.uleb128 0xa
 993 06b1 A40A0000 		.4byte	.LASF117
 994 06b5 08       		.byte	0x8
 995 06b6 67       		.byte	0x67
 996 06b7 A2000000 		.4byte	0xa2
 997 06bb 57       		.byte	0x57
 998 06bc 0A       		.uleb128 0xa
 999 06bd 35000000 		.4byte	.LASF118
 1000 06c1 08       		.byte	0x8
 1001 06c2 68       		.byte	0x68
 1002 06c3 A2000000 		.4byte	0xa2
 1003 06c7 58       		.byte	0x58
 1004 06c8 0A       		.uleb128 0xa
 1005 06c9 070A0000 		.4byte	.LASF119
 1006 06cd 08       		.byte	0x8
 1007 06ce 69       		.byte	0x69
 1008 06cf A2000000 		.4byte	0xa2
 1009 06d3 59       		.byte	0x59
 1010 06d4 0A       		.uleb128 0xa
 1011 06d5 20080000 		.4byte	.LASF120
 1012 06d9 08       		.byte	0x8
 1013 06da 6E       		.byte	0x6e
 1014 06db B8000000 		.4byte	0xb8
 1015 06df 5A       		.byte	0x5a
 1016 06e0 0A       		.uleb128 0xa
 1017 06e1 5C0C0000 		.4byte	.LASF121
 1018 06e5 08       		.byte	0x8
 1019 06e6 6F       		.byte	0x6f
 1020 06e7 B8000000 		.4byte	0xb8
 1021 06eb 5C       		.byte	0x5c
 1022 06ec 0A       		.uleb128 0xa
 1023 06ed 1B010000 		.4byte	.LASF122
 1024 06f1 08       		.byte	0x8
 1025 06f2 70       		.byte	0x70
 1026 06f3 A2000000 		.4byte	0xa2
 1027 06f7 5E       		.byte	0x5e
 1028 06f8 0A       		.uleb128 0xa
 1029 06f9 D2040000 		.4byte	.LASF123
 1030 06fd 08       		.byte	0x8
 1031 06fe 71       		.byte	0x71
 1032 06ff A2000000 		.4byte	0xa2
 1033 0703 5F       		.byte	0x5f
 1034 0704 0A       		.uleb128 0xa
 1035 0705 AA080000 		.4byte	.LASF124
 1036 0709 08       		.byte	0x8
 1037 070a 72       		.byte	0x72
 1038 070b A2000000 		.4byte	0xa2
 1039 070f 60       		.byte	0x60
 1040 0710 0A       		.uleb128 0xa
 1041 0711 45090000 		.4byte	.LASF125
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 74


 1042 0715 08       		.byte	0x8
 1043 0716 73       		.byte	0x73
 1044 0717 CE000000 		.4byte	0xce
 1045 071b 64       		.byte	0x64
 1046 071c 0A       		.uleb128 0xa
 1047 071d 67020000 		.4byte	.LASF126
 1048 0721 08       		.byte	0x8
 1049 0722 76       		.byte	0x76
 1050 0723 B8000000 		.4byte	0xb8
 1051 0727 68       		.byte	0x68
 1052 0728 0A       		.uleb128 0xa
 1053 0729 B1050000 		.4byte	.LASF127
 1054 072d 08       		.byte	0x8
 1055 072e 77       		.byte	0x77
 1056 072f B8000000 		.4byte	0xb8
 1057 0733 6A       		.byte	0x6a
 1058 0734 0A       		.uleb128 0xa
 1059 0735 9E060000 		.4byte	.LASF128
 1060 0739 08       		.byte	0x8
 1061 073a 78       		.byte	0x78
 1062 073b B8000000 		.4byte	0xb8
 1063 073f 6C       		.byte	0x6c
 1064 0740 0A       		.uleb128 0xa
 1065 0741 FB050000 		.4byte	.LASF129
 1066 0745 08       		.byte	0x8
 1067 0746 79       		.byte	0x79
 1068 0747 B8000000 		.4byte	0xb8
 1069 074b 6E       		.byte	0x6e
 1070 074c 0A       		.uleb128 0xa
 1071 074d 7B0A0000 		.4byte	.LASF130
 1072 0751 08       		.byte	0x8
 1073 0752 7B       		.byte	0x7b
 1074 0753 A2000000 		.4byte	0xa2
 1075 0757 70       		.byte	0x70
 1076 0758 0A       		.uleb128 0xa
 1077 0759 0E030000 		.4byte	.LASF131
 1078 075d 08       		.byte	0x8
 1079 075e 7C       		.byte	0x7c
 1080 075f A2000000 		.4byte	0xa2
 1081 0763 71       		.byte	0x71
 1082 0764 0A       		.uleb128 0xa
 1083 0765 840E0000 		.4byte	.LASF132
 1084 0769 08       		.byte	0x8
 1085 076a 7D       		.byte	0x7d
 1086 076b A2000000 		.4byte	0xa2
 1087 076f 72       		.byte	0x72
 1088 0770 0A       		.uleb128 0xa
 1089 0771 6D080000 		.4byte	.LASF133
 1090 0775 08       		.byte	0x8
 1091 0776 7E       		.byte	0x7e
 1092 0777 A2000000 		.4byte	0xa2
 1093 077b 73       		.byte	0x73
 1094 077c 0A       		.uleb128 0xa
 1095 077d A3040000 		.4byte	.LASF134
 1096 0781 08       		.byte	0x8
 1097 0782 80       		.byte	0x80
 1098 0783 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 75


 1099 0787 74       		.byte	0x74
 1100 0788 0A       		.uleb128 0xa
 1101 0789 AD0B0000 		.4byte	.LASF135
 1102 078d 08       		.byte	0x8
 1103 078e 81       		.byte	0x81
 1104 078f B8000000 		.4byte	0xb8
 1105 0793 76       		.byte	0x76
 1106 0794 0A       		.uleb128 0xa
 1107 0795 43040000 		.4byte	.LASF136
 1108 0799 08       		.byte	0x8
 1109 079a 82       		.byte	0x82
 1110 079b B8000000 		.4byte	0xb8
 1111 079f 78       		.byte	0x78
 1112 07a0 0A       		.uleb128 0xa
 1113 07a1 57010000 		.4byte	.LASF137
 1114 07a5 08       		.byte	0x8
 1115 07a6 83       		.byte	0x83
 1116 07a7 B8000000 		.4byte	0xb8
 1117 07ab 7A       		.byte	0x7a
 1118 07ac 0A       		.uleb128 0xa
 1119 07ad C80D0000 		.4byte	.LASF138
 1120 07b1 08       		.byte	0x8
 1121 07b2 86       		.byte	0x86
 1122 07b3 A2000000 		.4byte	0xa2
 1123 07b7 7C       		.byte	0x7c
 1124 07b8 0A       		.uleb128 0xa
 1125 07b9 DA0C0000 		.4byte	.LASF139
 1126 07bd 08       		.byte	0x8
 1127 07be 87       		.byte	0x87
 1128 07bf A2000000 		.4byte	0xa2
 1129 07c3 7D       		.byte	0x7d
 1130 07c4 0A       		.uleb128 0xa
 1131 07c5 260D0000 		.4byte	.LASF140
 1132 07c9 08       		.byte	0x8
 1133 07ca 88       		.byte	0x88
 1134 07cb A2000000 		.4byte	0xa2
 1135 07cf 7E       		.byte	0x7e
 1136 07d0 0A       		.uleb128 0xa
 1137 07d1 BE040000 		.4byte	.LASF141
 1138 07d5 08       		.byte	0x8
 1139 07d6 89       		.byte	0x89
 1140 07d7 A2000000 		.4byte	0xa2
 1141 07db 7F       		.byte	0x7f
 1142 07dc 0A       		.uleb128 0xa
 1143 07dd 6E050000 		.4byte	.LASF142
 1144 07e1 08       		.byte	0x8
 1145 07e2 8A       		.byte	0x8a
 1146 07e3 A2000000 		.4byte	0xa2
 1147 07e7 80       		.byte	0x80
 1148 07e8 0A       		.uleb128 0xa
 1149 07e9 C30C0000 		.4byte	.LASF143
 1150 07ed 08       		.byte	0x8
 1151 07ee 8D       		.byte	0x8d
 1152 07ef CE000000 		.4byte	0xce
 1153 07f3 84       		.byte	0x84
 1154 07f4 0A       		.uleb128 0xa
 1155 07f5 BF030000 		.4byte	.LASF144
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 76


 1156 07f9 08       		.byte	0x8
 1157 07fa 8E       		.byte	0x8e
 1158 07fb CE000000 		.4byte	0xce
 1159 07ff 88       		.byte	0x88
 1160 0800 0A       		.uleb128 0xa
 1161 0801 B30D0000 		.4byte	.LASF145
 1162 0805 08       		.byte	0x8
 1163 0806 8F       		.byte	0x8f
 1164 0807 CE000000 		.4byte	0xce
 1165 080b 8C       		.byte	0x8c
 1166 080c 0A       		.uleb128 0xa
 1167 080d E6070000 		.4byte	.LASF146
 1168 0811 08       		.byte	0x8
 1169 0812 90       		.byte	0x90
 1170 0813 CE000000 		.4byte	0xce
 1171 0817 90       		.byte	0x90
 1172 0818 0A       		.uleb128 0xa
 1173 0819 3E050000 		.4byte	.LASF147
 1174 081d 08       		.byte	0x8
 1175 081e 91       		.byte	0x91
 1176 081f CE000000 		.4byte	0xce
 1177 0823 94       		.byte	0x94
 1178 0824 0A       		.uleb128 0xa
 1179 0825 89070000 		.4byte	.LASF148
 1180 0829 08       		.byte	0x8
 1181 082a 92       		.byte	0x92
 1182 082b CE000000 		.4byte	0xce
 1183 082f 98       		.byte	0x98
 1184 0830 0A       		.uleb128 0xa
 1185 0831 270E0000 		.4byte	.LASF149
 1186 0835 08       		.byte	0x8
 1187 0836 93       		.byte	0x93
 1188 0837 CE000000 		.4byte	0xce
 1189 083b 9C       		.byte	0x9c
 1190 083c 0A       		.uleb128 0xa
 1191 083d 81020000 		.4byte	.LASF150
 1192 0841 08       		.byte	0x8
 1193 0842 94       		.byte	0x94
 1194 0843 CE000000 		.4byte	0xce
 1195 0847 A0       		.byte	0xa0
 1196 0848 0A       		.uleb128 0xa
 1197 0849 65030000 		.4byte	.LASF151
 1198 084d 08       		.byte	0x8
 1199 084e 95       		.byte	0x95
 1200 084f B8000000 		.4byte	0xb8
 1201 0853 A4       		.byte	0xa4
 1202 0854 0A       		.uleb128 0xa
 1203 0855 380B0000 		.4byte	.LASF152
 1204 0859 08       		.byte	0x8
 1205 085a 96       		.byte	0x96
 1206 085b B8000000 		.4byte	0xb8
 1207 085f A6       		.byte	0xa6
 1208 0860 0A       		.uleb128 0xa
 1209 0861 8E090000 		.4byte	.LASF153
 1210 0865 08       		.byte	0x8
 1211 0866 97       		.byte	0x97
 1212 0867 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 77


 1213 086b A8       		.byte	0xa8
 1214 086c 0A       		.uleb128 0xa
 1215 086d 7B0B0000 		.4byte	.LASF154
 1216 0871 08       		.byte	0x8
 1217 0872 98       		.byte	0x98
 1218 0873 B8000000 		.4byte	0xb8
 1219 0877 AA       		.byte	0xaa
 1220 0878 0A       		.uleb128 0xa
 1221 0879 BC060000 		.4byte	.LASF155
 1222 087d 08       		.byte	0x8
 1223 087e 99       		.byte	0x99
 1224 087f B8000000 		.4byte	0xb8
 1225 0883 AC       		.byte	0xac
 1226 0884 0A       		.uleb128 0xa
 1227 0885 84080000 		.4byte	.LASF156
 1228 0889 08       		.byte	0x8
 1229 088a 9A       		.byte	0x9a
 1230 088b B8000000 		.4byte	0xb8
 1231 088f AE       		.byte	0xae
 1232 0890 0A       		.uleb128 0xa
 1233 0891 0B090000 		.4byte	.LASF157
 1234 0895 08       		.byte	0x8
 1235 0896 9D       		.byte	0x9d
 1236 0897 B8000000 		.4byte	0xb8
 1237 089b B0       		.byte	0xb0
 1238 089c 0A       		.uleb128 0xa
 1239 089d 1B0A0000 		.4byte	.LASF158
 1240 08a1 08       		.byte	0x8
 1241 08a2 9E       		.byte	0x9e
 1242 08a3 CE000000 		.4byte	0xce
 1243 08a7 B4       		.byte	0xb4
 1244 08a8 00       		.byte	0
 1245 08a9 03       		.uleb128 0x3
 1246 08aa 38070000 		.4byte	.LASF159
 1247 08ae 08       		.byte	0x8
 1248 08af 9F       		.byte	0x9f
 1249 08b0 98040000 		.4byte	0x498
 1250 08b4 02       		.uleb128 0x2
 1251 08b5 01       		.byte	0x1
 1252 08b6 08       		.byte	0x8
 1253 08b7 590B0000 		.4byte	.LASF160
 1254 08bb 02       		.uleb128 0x2
 1255 08bc 04       		.byte	0x4
 1256 08bd 04       		.byte	0x4
 1257 08be 3F090000 		.4byte	.LASF161
 1258 08c2 02       		.uleb128 0x2
 1259 08c3 08       		.byte	0x8
 1260 08c4 04       		.byte	0x4
 1261 08c5 3C040000 		.4byte	.LASF162
 1262 08c9 0F       		.uleb128 0xf
 1263 08ca 04       		.byte	0x4
 1264 08cb 02       		.uleb128 0x2
 1265 08cc 01       		.byte	0x1
 1266 08cd 02       		.byte	0x2
 1267 08ce D9090000 		.4byte	.LASF163
 1268 08d2 10       		.uleb128 0x10
 1269 08d3 04       		.byte	0x4
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 78


 1270 08d4 D8080000 		.4byte	0x8d8
 1271 08d8 11       		.uleb128 0x11
 1272 08d9 E3080000 		.4byte	0x8e3
 1273 08dd 12       		.uleb128 0x12
 1274 08de CE000000 		.4byte	0xce
 1275 08e2 00       		.byte	0
 1276 08e3 0D       		.uleb128 0xd
 1277 08e4 1E060000 		.4byte	.LASF164
 1278 08e8 09       		.byte	0x9
 1279 08e9 D901     		.2byte	0x1d9
 1280 08eb D2080000 		.4byte	0x8d2
 1281 08ef 13       		.uleb128 0x13
 1282 08f0 9A0E0000 		.4byte	.LASF179
 1283 08f4 34       		.byte	0x34
 1284 08f5 09       		.byte	0x9
 1285 08f6 7502     		.2byte	0x275
 1286 08f8 A6090000 		.4byte	0x9a6
 1287 08fc 14       		.uleb128 0x14
 1288 08fd 87060000 		.4byte	.LASF165
 1289 0901 09       		.byte	0x9
 1290 0902 7802     		.2byte	0x278
 1291 0904 E0000000 		.4byte	0xe0
 1292 0908 00       		.byte	0
 1293 0909 14       		.uleb128 0x14
 1294 090a D1080000 		.4byte	.LASF166
 1295 090e 09       		.byte	0x9
 1296 090f 7902     		.2byte	0x279
 1297 0911 E0000000 		.4byte	0xe0
 1298 0915 04       		.byte	0x4
 1299 0916 14       		.uleb128 0x14
 1300 0917 77020000 		.4byte	.LASF167
 1301 091b 09       		.byte	0x9
 1302 091c 7B02     		.2byte	0x27b
 1303 091e C9080000 		.4byte	0x8c9
 1304 0922 08       		.byte	0x8
 1305 0923 14       		.uleb128 0x14
 1306 0924 2F0C0000 		.4byte	.LASF168
 1307 0928 09       		.byte	0x9
 1308 0929 7C02     		.2byte	0x27c
 1309 092b CE000000 		.4byte	0xce
 1310 092f 0C       		.byte	0xc
 1311 0930 14       		.uleb128 0x14
 1312 0931 7B070000 		.4byte	.LASF169
 1313 0935 09       		.byte	0x9
 1314 0936 7D02     		.2byte	0x27d
 1315 0938 E0000000 		.4byte	0xe0
 1316 093c 10       		.byte	0x10
 1317 093d 14       		.uleb128 0x14
 1318 093e 070E0000 		.4byte	.LASF170
 1319 0942 09       		.byte	0x9
 1320 0943 7E02     		.2byte	0x27e
 1321 0945 E0000000 		.4byte	0xe0
 1322 0949 14       		.byte	0x14
 1323 094a 14       		.uleb128 0x14
 1324 094b EB0C0000 		.4byte	.LASF171
 1325 094f 09       		.byte	0x9
 1326 0950 8002     		.2byte	0x280
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 79


 1327 0952 C9080000 		.4byte	0x8c9
 1328 0956 18       		.byte	0x18
 1329 0957 14       		.uleb128 0x14
 1330 0958 2B000000 		.4byte	.LASF172
 1331 095c 09       		.byte	0x9
 1332 095d 8102     		.2byte	0x281
 1333 095f CE000000 		.4byte	0xce
 1334 0963 1C       		.byte	0x1c
 1335 0964 14       		.uleb128 0x14
 1336 0965 1B050000 		.4byte	.LASF173
 1337 0969 09       		.byte	0x9
 1338 096a 8202     		.2byte	0x282
 1339 096c E0000000 		.4byte	0xe0
 1340 0970 20       		.byte	0x20
 1341 0971 14       		.uleb128 0x14
 1342 0972 23070000 		.4byte	.LASF174
 1343 0976 09       		.byte	0x9
 1344 0977 8402     		.2byte	0x284
 1345 0979 C9080000 		.4byte	0x8c9
 1346 097d 24       		.byte	0x24
 1347 097e 14       		.uleb128 0x14
 1348 097f 53050000 		.4byte	.LASF175
 1349 0983 09       		.byte	0x9
 1350 0984 8502     		.2byte	0x285
 1351 0986 CE000000 		.4byte	0xce
 1352 098a 28       		.byte	0x28
 1353 098b 14       		.uleb128 0x14
 1354 098c 23030000 		.4byte	.LASF176
 1355 0990 09       		.byte	0x9
 1356 0991 8602     		.2byte	0x286
 1357 0993 E0000000 		.4byte	0xe0
 1358 0997 2C       		.byte	0x2c
 1359 0998 14       		.uleb128 0x14
 1360 0999 F5060000 		.4byte	.LASF177
 1361 099d 09       		.byte	0x9
 1362 099e 8B02     		.2byte	0x28b
 1363 09a0 E3080000 		.4byte	0x8e3
 1364 09a4 30       		.byte	0x30
 1365 09a5 00       		.byte	0
 1366 09a6 0D       		.uleb128 0xd
 1367 09a7 050D0000 		.4byte	.LASF178
 1368 09ab 09       		.byte	0x9
 1369 09ac 9102     		.2byte	0x291
 1370 09ae EF080000 		.4byte	0x8ef
 1371 09b2 15       		.uleb128 0x15
 1372 09b3 FB070000 		.4byte	.LASF180
 1373 09b7 4C       		.byte	0x4c
 1374 09b8 0A       		.byte	0xa
 1375 09b9 2F       		.byte	0x2f
 1376 09ba A30A0000 		.4byte	0xaa3
 1377 09be 0A       		.uleb128 0xa
 1378 09bf AE010000 		.4byte	.LASF181
 1379 09c3 0A       		.byte	0xa
 1380 09c4 31       		.byte	0x31
 1381 09c5 CE000000 		.4byte	0xce
 1382 09c9 00       		.byte	0
 1383 09ca 0A       		.uleb128 0xa
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 80


 1384 09cb 58020000 		.4byte	.LASF182
 1385 09cf 0A       		.byte	0xa
 1386 09d0 33       		.byte	0x33
 1387 09d1 CE000000 		.4byte	0xce
 1388 09d5 04       		.byte	0x4
 1389 09d6 0A       		.uleb128 0xa
 1390 09d7 BD0E0000 		.4byte	.LASF183
 1391 09db 0A       		.byte	0xa
 1392 09dc 34       		.byte	0x34
 1393 09dd CE000000 		.4byte	0xce
 1394 09e1 08       		.byte	0x8
 1395 09e2 0A       		.uleb128 0xa
 1396 09e3 08070000 		.4byte	.LASF184
 1397 09e7 0A       		.byte	0xa
 1398 09e8 35       		.byte	0x35
 1399 09e9 CE000000 		.4byte	0xce
 1400 09ed 0C       		.byte	0xc
 1401 09ee 0A       		.uleb128 0xa
 1402 09ef E60A0000 		.4byte	.LASF185
 1403 09f3 0A       		.byte	0xa
 1404 09f4 37       		.byte	0x37
 1405 09f5 CE000000 		.4byte	0xce
 1406 09f9 10       		.byte	0x10
 1407 09fa 0A       		.uleb128 0xa
 1408 09fb 150E0000 		.4byte	.LASF186
 1409 09ff 0A       		.byte	0xa
 1410 0a00 38       		.byte	0x38
 1411 0a01 CE000000 		.4byte	0xce
 1412 0a05 14       		.byte	0x14
 1413 0a06 0A       		.uleb128 0xa
 1414 0a07 1E0E0000 		.4byte	.LASF187
 1415 0a0b 0A       		.byte	0xa
 1416 0a0c 39       		.byte	0x39
 1417 0a0d CE000000 		.4byte	0xce
 1418 0a11 18       		.byte	0x18
 1419 0a12 0A       		.uleb128 0xa
 1420 0a13 E9050000 		.4byte	.LASF188
 1421 0a17 0A       		.byte	0xa
 1422 0a18 3A       		.byte	0x3a
 1423 0a19 CB080000 		.4byte	0x8cb
 1424 0a1d 1C       		.byte	0x1c
 1425 0a1e 0A       		.uleb128 0xa
 1426 0a1f 5D050000 		.4byte	.LASF189
 1427 0a23 0A       		.byte	0xa
 1428 0a24 3C       		.byte	0x3c
 1429 0a25 CE000000 		.4byte	0xce
 1430 0a29 20       		.byte	0x20
 1431 0a2a 0A       		.uleb128 0xa
 1432 0a2b 92040000 		.4byte	.LASF190
 1433 0a2f 0A       		.byte	0xa
 1434 0a30 3D       		.byte	0x3d
 1435 0a31 CE000000 		.4byte	0xce
 1436 0a35 24       		.byte	0x24
 1437 0a36 0A       		.uleb128 0xa
 1438 0a37 5B060000 		.4byte	.LASF191
 1439 0a3b 0A       		.byte	0xa
 1440 0a3c 3F       		.byte	0x3f
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 81


 1441 0a3d CE000000 		.4byte	0xce
 1442 0a41 28       		.byte	0x28
 1443 0a42 0A       		.uleb128 0xa
 1444 0a43 F70D0000 		.4byte	.LASF192
 1445 0a47 0A       		.byte	0xa
 1446 0a48 40       		.byte	0x40
 1447 0a49 CE000000 		.4byte	0xce
 1448 0a4d 2C       		.byte	0x2c
 1449 0a4e 0A       		.uleb128 0xa
 1450 0a4f 3D0C0000 		.4byte	.LASF193
 1451 0a53 0A       		.byte	0xa
 1452 0a54 42       		.byte	0x42
 1453 0a55 CE000000 		.4byte	0xce
 1454 0a59 30       		.byte	0x30
 1455 0a5a 0A       		.uleb128 0xa
 1456 0a5b 29070000 		.4byte	.LASF194
 1457 0a5f 0A       		.byte	0xa
 1458 0a60 43       		.byte	0x43
 1459 0a61 CE000000 		.4byte	0xce
 1460 0a65 34       		.byte	0x34
 1461 0a66 0A       		.uleb128 0xa
 1462 0a67 9F070000 		.4byte	.LASF195
 1463 0a6b 0A       		.byte	0xa
 1464 0a6c 45       		.byte	0x45
 1465 0a6d CE000000 		.4byte	0xce
 1466 0a71 38       		.byte	0x38
 1467 0a72 0A       		.uleb128 0xa
 1468 0a73 96010000 		.4byte	.LASF196
 1469 0a77 0A       		.byte	0xa
 1470 0a78 46       		.byte	0x46
 1471 0a79 CE000000 		.4byte	0xce
 1472 0a7d 3C       		.byte	0x3c
 1473 0a7e 0A       		.uleb128 0xa
 1474 0a7f 650C0000 		.4byte	.LASF197
 1475 0a83 0A       		.byte	0xa
 1476 0a84 48       		.byte	0x48
 1477 0a85 CE000000 		.4byte	0xce
 1478 0a89 40       		.byte	0x40
 1479 0a8a 0A       		.uleb128 0xa
 1480 0a8b 4A0E0000 		.4byte	.LASF198
 1481 0a8f 0A       		.byte	0xa
 1482 0a90 49       		.byte	0x49
 1483 0a91 CE000000 		.4byte	0xce
 1484 0a95 44       		.byte	0x44
 1485 0a96 0A       		.uleb128 0xa
 1486 0a97 B20E0000 		.4byte	.LASF199
 1487 0a9b 0A       		.byte	0xa
 1488 0a9c 4B       		.byte	0x4b
 1489 0a9d CE000000 		.4byte	0xce
 1490 0aa1 48       		.byte	0x48
 1491 0aa2 00       		.byte	0
 1492 0aa3 03       		.uleb128 0x3
 1493 0aa4 F0020000 		.4byte	.LASF200
 1494 0aa8 0A       		.byte	0xa
 1495 0aa9 4C       		.byte	0x4c
 1496 0aaa B2090000 		.4byte	0x9b2
 1497 0aae 15       		.uleb128 0x15
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 82


 1498 0aaf 8F030000 		.4byte	.LASF201
 1499 0ab3 64       		.byte	0x64
 1500 0ab4 0B       		.byte	0xb
 1501 0ab5 2F       		.byte	0x2f
 1502 0ab6 E70B0000 		.4byte	0xbe7
 1503 0aba 0A       		.uleb128 0xa
 1504 0abb 37090000 		.4byte	.LASF202
 1505 0abf 0B       		.byte	0xb
 1506 0ac0 31       		.byte	0x31
 1507 0ac1 CE000000 		.4byte	0xce
 1508 0ac5 00       		.byte	0
 1509 0ac6 0A       		.uleb128 0xa
 1510 0ac7 58020000 		.4byte	.LASF182
 1511 0acb 0B       		.byte	0xb
 1512 0acc 33       		.byte	0x33
 1513 0acd CE000000 		.4byte	0xce
 1514 0ad1 04       		.byte	0x4
 1515 0ad2 0A       		.uleb128 0xa
 1516 0ad3 A4050000 		.4byte	.LASF203
 1517 0ad7 0B       		.byte	0xb
 1518 0ad8 34       		.byte	0x34
 1519 0ad9 CE000000 		.4byte	0xce
 1520 0add 08       		.byte	0x8
 1521 0ade 0A       		.uleb128 0xa
 1522 0adf 6C070000 		.4byte	.LASF204
 1523 0ae3 0B       		.byte	0xb
 1524 0ae4 35       		.byte	0x35
 1525 0ae5 CE000000 		.4byte	0xce
 1526 0ae9 0C       		.byte	0xc
 1527 0aea 0A       		.uleb128 0xa
 1528 0aeb BD0E0000 		.4byte	.LASF183
 1529 0aef 0B       		.byte	0xb
 1530 0af0 36       		.byte	0x36
 1531 0af1 CE000000 		.4byte	0xce
 1532 0af5 10       		.byte	0x10
 1533 0af6 0A       		.uleb128 0xa
 1534 0af7 D20E0000 		.4byte	.LASF205
 1535 0afb 0B       		.byte	0xb
 1536 0afc 37       		.byte	0x37
 1537 0afd CE000000 		.4byte	0xce
 1538 0b01 14       		.byte	0x14
 1539 0b02 0A       		.uleb128 0xa
 1540 0b03 A30C0000 		.4byte	.LASF206
 1541 0b07 0B       		.byte	0xb
 1542 0b08 38       		.byte	0x38
 1543 0b09 CE000000 		.4byte	0xce
 1544 0b0d 18       		.byte	0x18
 1545 0b0e 0A       		.uleb128 0xa
 1546 0b0f CB0A0000 		.4byte	.LASF207
 1547 0b13 0B       		.byte	0xb
 1548 0b14 39       		.byte	0x39
 1549 0b15 CB080000 		.4byte	0x8cb
 1550 0b19 1C       		.byte	0x1c
 1551 0b1a 0A       		.uleb128 0xa
 1552 0b1b 150E0000 		.4byte	.LASF186
 1553 0b1f 0B       		.byte	0xb
 1554 0b20 3A       		.byte	0x3a
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 83


 1555 0b21 CE000000 		.4byte	0xce
 1556 0b25 20       		.byte	0x20
 1557 0b26 0A       		.uleb128 0xa
 1558 0b27 1E0E0000 		.4byte	.LASF187
 1559 0b2b 0B       		.byte	0xb
 1560 0b2c 3B       		.byte	0x3b
 1561 0b2d CE000000 		.4byte	0xce
 1562 0b31 24       		.byte	0x24
 1563 0b32 0A       		.uleb128 0xa
 1564 0b33 E9050000 		.4byte	.LASF188
 1565 0b37 0B       		.byte	0xb
 1566 0b38 3C       		.byte	0x3c
 1567 0b39 CB080000 		.4byte	0x8cb
 1568 0b3d 28       		.byte	0x28
 1569 0b3e 0A       		.uleb128 0xa
 1570 0b3f 5D050000 		.4byte	.LASF189
 1571 0b43 0B       		.byte	0xb
 1572 0b44 3E       		.byte	0x3e
 1573 0b45 CE000000 		.4byte	0xce
 1574 0b49 2C       		.byte	0x2c
 1575 0b4a 0A       		.uleb128 0xa
 1576 0b4b 55070000 		.4byte	.LASF208
 1577 0b4f 0B       		.byte	0xb
 1578 0b50 3F       		.byte	0x3f
 1579 0b51 CE000000 		.4byte	0xce
 1580 0b55 30       		.byte	0x30
 1581 0b56 0A       		.uleb128 0xa
 1582 0b57 700D0000 		.4byte	.LASF209
 1583 0b5b 0B       		.byte	0xb
 1584 0b5c 40       		.byte	0x40
 1585 0b5d CE000000 		.4byte	0xce
 1586 0b61 34       		.byte	0x34
 1587 0b62 0A       		.uleb128 0xa
 1588 0b63 AA0D0000 		.4byte	.LASF210
 1589 0b67 0B       		.byte	0xb
 1590 0b68 41       		.byte	0x41
 1591 0b69 CE000000 		.4byte	0xce
 1592 0b6d 38       		.byte	0x38
 1593 0b6e 0A       		.uleb128 0xa
 1594 0b6f 90060000 		.4byte	.LASF211
 1595 0b73 0B       		.byte	0xb
 1596 0b74 42       		.byte	0x42
 1597 0b75 CE000000 		.4byte	0xce
 1598 0b79 3C       		.byte	0x3c
 1599 0b7a 0A       		.uleb128 0xa
 1600 0b7b 46080000 		.4byte	.LASF212
 1601 0b7f 0B       		.byte	0xb
 1602 0b80 44       		.byte	0x44
 1603 0b81 CE000000 		.4byte	0xce
 1604 0b85 40       		.byte	0x40
 1605 0b86 0A       		.uleb128 0xa
 1606 0b87 F70D0000 		.4byte	.LASF192
 1607 0b8b 0B       		.byte	0xb
 1608 0b8c 45       		.byte	0x45
 1609 0b8d CE000000 		.4byte	0xce
 1610 0b91 44       		.byte	0x44
 1611 0b92 0A       		.uleb128 0xa
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 84


 1612 0b93 3D0C0000 		.4byte	.LASF193
 1613 0b97 0B       		.byte	0xb
 1614 0b98 47       		.byte	0x47
 1615 0b99 CE000000 		.4byte	0xce
 1616 0b9d 48       		.byte	0x48
 1617 0b9e 0A       		.uleb128 0xa
 1618 0b9f 29070000 		.4byte	.LASF194
 1619 0ba3 0B       		.byte	0xb
 1620 0ba4 48       		.byte	0x48
 1621 0ba5 CE000000 		.4byte	0xce
 1622 0ba9 4C       		.byte	0x4c
 1623 0baa 0A       		.uleb128 0xa
 1624 0bab 9F070000 		.4byte	.LASF195
 1625 0baf 0B       		.byte	0xb
 1626 0bb0 4A       		.byte	0x4a
 1627 0bb1 CE000000 		.4byte	0xce
 1628 0bb5 50       		.byte	0x50
 1629 0bb6 0A       		.uleb128 0xa
 1630 0bb7 D5060000 		.4byte	.LASF213
 1631 0bbb 0B       		.byte	0xb
 1632 0bbc 4B       		.byte	0x4b
 1633 0bbd CE000000 		.4byte	0xce
 1634 0bc1 54       		.byte	0x54
 1635 0bc2 0A       		.uleb128 0xa
 1636 0bc3 50000000 		.4byte	.LASF214
 1637 0bc7 0B       		.byte	0xb
 1638 0bc8 4D       		.byte	0x4d
 1639 0bc9 CE000000 		.4byte	0xce
 1640 0bcd 58       		.byte	0x58
 1641 0bce 0A       		.uleb128 0xa
 1642 0bcf 4A0E0000 		.4byte	.LASF198
 1643 0bd3 0B       		.byte	0xb
 1644 0bd4 4E       		.byte	0x4e
 1645 0bd5 CE000000 		.4byte	0xce
 1646 0bd9 5C       		.byte	0x5c
 1647 0bda 0A       		.uleb128 0xa
 1648 0bdb B20E0000 		.4byte	.LASF199
 1649 0bdf 0B       		.byte	0xb
 1650 0be0 50       		.byte	0x50
 1651 0be1 CE000000 		.4byte	0xce
 1652 0be5 60       		.byte	0x60
 1653 0be6 00       		.byte	0
 1654 0be7 03       		.uleb128 0x3
 1655 0be8 DD0D0000 		.4byte	.LASF215
 1656 0bec 0B       		.byte	0xb
 1657 0bed 51       		.byte	0x51
 1658 0bee AE0A0000 		.4byte	0xaae
 1659 0bf2 16       		.uleb128 0x16
 1660 0bf3 120C0000 		.4byte	.LASF218
 1661 0bf7 03       		.byte	0x3
 1662 0bf8 0407     		.2byte	0x704
 1663 0bfa 03       		.byte	0x3
 1664 0bfb 180C0000 		.4byte	0xc18
 1665 0bff 17       		.uleb128 0x17
 1666 0c00 D5070000 		.4byte	.LASF216
 1667 0c04 03       		.byte	0x3
 1668 0c05 0407     		.2byte	0x704
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 85


 1669 0c07 180C0000 		.4byte	0xc18
 1670 0c0b 17       		.uleb128 0x17
 1671 0c0c B5040000 		.4byte	.LASF217
 1672 0c10 03       		.byte	0x3
 1673 0c11 0407     		.2byte	0x704
 1674 0c13 CE000000 		.4byte	0xce
 1675 0c17 00       		.byte	0
 1676 0c18 10       		.uleb128 0x10
 1677 0c19 04       		.byte	0x4
 1678 0c1a 85040000 		.4byte	0x485
 1679 0c1e 16       		.uleb128 0x16
 1680 0c1f 2B080000 		.4byte	.LASF219
 1681 0c23 03       		.byte	0x3
 1682 0c24 CF06     		.2byte	0x6cf
 1683 0c26 03       		.byte	0x3
 1684 0c27 440C0000 		.4byte	0xc44
 1685 0c2b 17       		.uleb128 0x17
 1686 0c2c D5070000 		.4byte	.LASF216
 1687 0c30 03       		.byte	0x3
 1688 0c31 CF06     		.2byte	0x6cf
 1689 0c33 180C0000 		.4byte	0xc18
 1690 0c37 17       		.uleb128 0x17
 1691 0c38 B5040000 		.4byte	.LASF217
 1692 0c3c 03       		.byte	0x3
 1693 0c3d CF06     		.2byte	0x6cf
 1694 0c3f CE000000 		.4byte	0xce
 1695 0c43 00       		.byte	0
 1696 0c44 18       		.uleb128 0x18
 1697 0c45 56090000 		.4byte	.LASF222
 1698 0c49 03       		.byte	0x3
 1699 0c4a 1206     		.2byte	0x612
 1700 0c4c CE000000 		.4byte	0xce
 1701 0c50 03       		.byte	0x3
 1702 0c51 620C0000 		.4byte	0xc62
 1703 0c55 17       		.uleb128 0x17
 1704 0c56 D5070000 		.4byte	.LASF216
 1705 0c5a 03       		.byte	0x3
 1706 0c5b 1206     		.2byte	0x612
 1707 0c5d 620C0000 		.4byte	0xc62
 1708 0c61 00       		.byte	0
 1709 0c62 10       		.uleb128 0x10
 1710 0c63 04       		.byte	0x4
 1711 0c64 680C0000 		.4byte	0xc68
 1712 0c68 06       		.uleb128 0x6
 1713 0c69 85040000 		.4byte	0x485
 1714 0c6d 16       		.uleb128 0x16
 1715 0c6e C6010000 		.4byte	.LASF220
 1716 0c72 02       		.byte	0x2
 1717 0c73 2D04     		.2byte	0x42d
 1718 0c75 03       		.byte	0x3
 1719 0c76 870C0000 		.4byte	0xc87
 1720 0c7a 17       		.uleb128 0x17
 1721 0c7b FE060000 		.4byte	.LASF221
 1722 0c7f 02       		.byte	0x2
 1723 0c80 2D04     		.2byte	0x42d
 1724 0c82 CE000000 		.4byte	0xce
 1725 0c86 00       		.byte	0
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 86


 1726 0c87 18       		.uleb128 0x18
 1727 0c88 F5090000 		.4byte	.LASF223
 1728 0c8c 02       		.byte	0x2
 1729 0c8d D503     		.2byte	0x3d5
 1730 0c8f AD000000 		.4byte	0xad
 1731 0c93 03       		.byte	0x3
 1732 0c94 A50C0000 		.4byte	0xca5
 1733 0c98 17       		.uleb128 0x17
 1734 0c99 330B0000 		.4byte	.LASF224
 1735 0c9d 02       		.byte	0x2
 1736 0c9e D503     		.2byte	0x3d5
 1737 0ca0 CE000000 		.4byte	0xce
 1738 0ca4 00       		.byte	0
 1739 0ca5 18       		.uleb128 0x18
 1740 0ca6 08060000 		.4byte	.LASF225
 1741 0caa 02       		.byte	0x2
 1742 0cab FF04     		.2byte	0x4ff
 1743 0cad C3000000 		.4byte	0xc3
 1744 0cb1 03       		.byte	0x3
 1745 0cb2 CF0C0000 		.4byte	0xccf
 1746 0cb6 17       		.uleb128 0x17
 1747 0cb7 330B0000 		.4byte	.LASF224
 1748 0cbb 02       		.byte	0x2
 1749 0cbc FF04     		.2byte	0x4ff
 1750 0cbe CE000000 		.4byte	0xce
 1751 0cc2 17       		.uleb128 0x17
 1752 0cc3 6F0C0000 		.4byte	.LASF226
 1753 0cc7 02       		.byte	0x2
 1754 0cc8 FF04     		.2byte	0x4ff
 1755 0cca AD000000 		.4byte	0xad
 1756 0cce 00       		.byte	0
 1757 0ccf 19       		.uleb128 0x19
 1758 0cd0 3D0E0000 		.4byte	.LASF229
 1759 0cd4 01       		.byte	0x1
 1760 0cd5 11       		.byte	0x11
 1761 0cd6 00000000 		.4byte	.LFB739
 1762 0cda 48000000 		.4byte	.LFE739-.LFB739
 1763 0cde 01       		.uleb128 0x1
 1764 0cdf 9C       		.byte	0x9c
 1765 0ce0 CE0D0000 		.4byte	0xdce
 1766 0ce4 1A       		.uleb128 0x1a
 1767 0ce5 DA080000 		.4byte	.LASF227
 1768 0ce9 01       		.byte	0x1
 1769 0cea 19       		.byte	0x19
 1770 0ceb AD000000 		.4byte	0xad
 1771 0cef 1B       		.uleb128 0x1b
 1772 0cf0 49000000 		.4byte	.LASF250
 1773 0cf4 01       		.byte	0x1
 1774 0cf5 1C       		.byte	0x1c
 1775 0cf6 AD000000 		.4byte	0xad
 1776 0cfa 00000000 		.4byte	.LLST0
 1777 0cfe 1A       		.uleb128 0x1a
 1778 0cff 86040000 		.4byte	.LASF228
 1779 0d03 01       		.byte	0x1
 1780 0d04 22       		.byte	0x22
 1781 0d05 CE000000 		.4byte	0xce
 1782 0d09 1C       		.uleb128 0x1c
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 87


 1783 0d0a 870C0000 		.4byte	0xc87
 1784 0d0e 02000000 		.4byte	.LBB20
 1785 0d12 00000000 		.4byte	.Ldebug_ranges0+0
 1786 0d16 01       		.byte	0x1
 1787 0d17 19       		.byte	0x19
 1788 0d18 3C0D0000 		.4byte	0xd3c
 1789 0d1c 1D       		.uleb128 0x1d
 1790 0d1d 980C0000 		.4byte	0xc98
 1791 0d21 13000000 		.4byte	.LLST1
 1792 0d25 1E       		.uleb128 0x1e
 1793 0d26 12000000 		.4byte	.LVL1
 1794 0d2a E90E0000 		.4byte	0xee9
 1795 0d2e 1F       		.uleb128 0x1f
 1796 0d2f 01       		.uleb128 0x1
 1797 0d30 50       		.byte	0x50
 1798 0d31 02       		.uleb128 0x2
 1799 0d32 74       		.byte	0x74
 1800 0d33 00       		.sleb128 0
 1801 0d34 1F       		.uleb128 0x1f
 1802 0d35 01       		.uleb128 0x1
 1803 0d36 51       		.byte	0x51
 1804 0d37 02       		.uleb128 0x2
 1805 0d38 75       		.byte	0x75
 1806 0d39 00       		.sleb128 0
 1807 0d3a 00       		.byte	0
 1808 0d3b 00       		.byte	0
 1809 0d3c 20       		.uleb128 0x20
 1810 0d3d A50C0000 		.4byte	0xca5
 1811 0d41 1C000000 		.4byte	.LBB26
 1812 0d45 0A000000 		.4byte	.LBE26-.LBB26
 1813 0d49 01       		.byte	0x1
 1814 0d4a 1F       		.byte	0x1f
 1815 0d4b 780D0000 		.4byte	0xd78
 1816 0d4f 1D       		.uleb128 0x1d
 1817 0d50 B60C0000 		.4byte	0xcb6
 1818 0d54 27000000 		.4byte	.LLST2
 1819 0d58 1D       		.uleb128 0x1d
 1820 0d59 C20C0000 		.4byte	0xcc2
 1821 0d5d 00000000 		.4byte	.LLST0
 1822 0d61 1E       		.uleb128 0x1e
 1823 0d62 26000000 		.4byte	.LVL4
 1824 0d66 F50E0000 		.4byte	0xef5
 1825 0d6a 1F       		.uleb128 0x1f
 1826 0d6b 01       		.uleb128 0x1
 1827 0d6c 50       		.byte	0x50
 1828 0d6d 02       		.uleb128 0x2
 1829 0d6e 74       		.byte	0x74
 1830 0d6f 00       		.sleb128 0
 1831 0d70 1F       		.uleb128 0x1f
 1832 0d71 01       		.uleb128 0x1
 1833 0d72 51       		.byte	0x51
 1834 0d73 02       		.uleb128 0x2
 1835 0d74 75       		.byte	0x75
 1836 0d75 00       		.sleb128 0
 1837 0d76 00       		.byte	0
 1838 0d77 00       		.byte	0
 1839 0d78 20       		.uleb128 0x20
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 88


 1840 0d79 440C0000 		.4byte	0xc44
 1841 0d7d 2C000000 		.4byte	.LBB28
 1842 0d81 04000000 		.4byte	.LBE28-.LBB28
 1843 0d85 01       		.byte	0x1
 1844 0d86 22       		.byte	0x22
 1845 0d87 950D0000 		.4byte	0xd95
 1846 0d8b 1D       		.uleb128 0x1d
 1847 0d8c 550C0000 		.4byte	0xc55
 1848 0d90 3B000000 		.4byte	.LLST4
 1849 0d94 00       		.byte	0
 1850 0d95 20       		.uleb128 0x20
 1851 0d96 1E0C0000 		.4byte	0xc1e
 1852 0d9a 30000000 		.4byte	.LBB30
 1853 0d9e 18000000 		.4byte	.LBE30-.LBB30
 1854 0da2 01       		.byte	0x1
 1855 0da3 25       		.byte	0x25
 1856 0da4 B70D0000 		.4byte	0xdb7
 1857 0da8 21       		.uleb128 0x21
 1858 0da9 370C0000 		.4byte	0xc37
 1859 0dad 1D       		.uleb128 0x1d
 1860 0dae 2B0C0000 		.4byte	0xc2b
 1861 0db2 53000000 		.4byte	.LLST5
 1862 0db6 00       		.byte	0
 1863 0db7 1E       		.uleb128 0x1e
 1864 0db8 1C000000 		.4byte	.LVL2
 1865 0dbc 010F0000 		.4byte	0xf01
 1866 0dc0 1F       		.uleb128 0x1f
 1867 0dc1 01       		.uleb128 0x1
 1868 0dc2 50       		.byte	0x50
 1869 0dc3 02       		.uleb128 0x2
 1870 0dc4 74       		.byte	0x74
 1871 0dc5 00       		.sleb128 0
 1872 0dc6 1F       		.uleb128 0x1f
 1873 0dc7 01       		.uleb128 0x1
 1874 0dc8 51       		.byte	0x51
 1875 0dc9 02       		.uleb128 0x2
 1876 0dca 75       		.byte	0x75
 1877 0dcb 00       		.sleb128 0
 1878 0dcc 00       		.byte	0
 1879 0dcd 00       		.byte	0
 1880 0dce 19       		.uleb128 0x19
 1881 0dcf 390D0000 		.4byte	.LASF230
 1882 0dd3 01       		.byte	0x1
 1883 0dd4 08       		.byte	0x8
 1884 0dd5 00000000 		.4byte	.LFB738
 1885 0dd9 20000000 		.4byte	.LFE738-.LFB738
 1886 0ddd 01       		.uleb128 0x1
 1887 0dde 9C       		.byte	0x9c
 1888 0ddf 4A0E0000 		.4byte	0xe4a
 1889 0de3 20       		.uleb128 0x20
 1890 0de4 6D0C0000 		.4byte	0xc6d
 1891 0de8 0E000000 		.4byte	.LBB32
 1892 0dec 12000000 		.4byte	.LBE32-.LBB32
 1893 0df0 01       		.byte	0x1
 1894 0df1 0C       		.byte	0xc
 1895 0df2 230E0000 		.4byte	0xe23
 1896 0df6 1D       		.uleb128 0x1d
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 89


 1897 0df7 7A0C0000 		.4byte	0xc7a
 1898 0dfb 6B000000 		.4byte	.LLST6
 1899 0dff 22       		.uleb128 0x22
 1900 0e00 F20B0000 		.4byte	0xbf2
 1901 0e04 0E000000 		.4byte	.LBB33
 1902 0e08 12000000 		.4byte	.LBE33-.LBB33
 1903 0e0c 02       		.byte	0x2
 1904 0e0d 2F04     		.2byte	0x42f
 1905 0e0f 1D       		.uleb128 0x1d
 1906 0e10 0B0C0000 		.4byte	0xc0b
 1907 0e14 6B000000 		.4byte	.LLST6
 1908 0e18 1D       		.uleb128 0x1d
 1909 0e19 FF0B0000 		.4byte	0xbff
 1910 0e1d 7F000000 		.4byte	.LLST8
 1911 0e21 00       		.byte	0
 1912 0e22 00       		.byte	0
 1913 0e23 23       		.uleb128 0x23
 1914 0e24 08000000 		.4byte	.LVL8
 1915 0e28 0D0F0000 		.4byte	0xf0d
 1916 0e2c 3A0E0000 		.4byte	0xe3a
 1917 0e30 1F       		.uleb128 0x1f
 1918 0e31 01       		.uleb128 0x1
 1919 0e32 50       		.byte	0x50
 1920 0e33 05       		.uleb128 0x5
 1921 0e34 03       		.byte	0x3
 1922 0e35 00000000 		.4byte	ADC_1_my_ISR
 1923 0e39 00       		.byte	0
 1924 0e3a 1E       		.uleb128 0x1e
 1925 0e3b 0E000000 		.4byte	.LVL9
 1926 0e3f 180F0000 		.4byte	0xf18
 1927 0e43 1F       		.uleb128 0x1f
 1928 0e44 01       		.uleb128 0x1
 1929 0e45 50       		.byte	0x50
 1930 0e46 01       		.uleb128 0x1
 1931 0e47 30       		.byte	0x30
 1932 0e48 00       		.byte	0
 1933 0e49 00       		.byte	0
 1934 0e4a 24       		.uleb128 0x24
 1935 0e4b 97020000 		.4byte	.LASF231
 1936 0e4f 0C       		.byte	0xc
 1937 0e50 F907     		.2byte	0x7f9
 1938 0e52 560E0000 		.4byte	0xe56
 1939 0e56 05       		.uleb128 0x5
 1940 0e57 C3000000 		.4byte	0xc3
 1941 0e5b 25       		.uleb128 0x25
 1942 0e5c 7A090000 		.4byte	.LASF232
 1943 0e60 08       		.byte	0x8
 1944 0e61 A7       		.byte	0xa7
 1945 0e62 660E0000 		.4byte	0xe66
 1946 0e66 10       		.uleb128 0x10
 1947 0e67 04       		.byte	0x4
 1948 0e68 6C0E0000 		.4byte	0xe6c
 1949 0e6c 06       		.uleb128 0x6
 1950 0e6d A9080000 		.4byte	0x8a9
 1951 0e71 25       		.uleb128 0x25
 1952 0e72 B0030000 		.4byte	.LASF233
 1953 0e76 0D       		.byte	0xd
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 90


 1954 0e77 87       		.byte	0x87
 1955 0e78 A6090000 		.4byte	0x9a6
 1956 0e7c 25       		.uleb128 0x25
 1957 0e7d 390A0000 		.4byte	.LASF234
 1958 0e81 0E       		.byte	0xe
 1959 0e82 1F       		.byte	0x1f
 1960 0e83 870E0000 		.4byte	0xe87
 1961 0e87 06       		.uleb128 0x6
 1962 0e88 A30A0000 		.4byte	0xaa3
 1963 0e8c 25       		.uleb128 0x25
 1964 0e8d A00B0000 		.4byte	.LASF235
 1965 0e91 0F       		.byte	0xf
 1966 0e92 1F       		.byte	0x1f
 1967 0e93 970E0000 		.4byte	0xe97
 1968 0e97 06       		.uleb128 0x6
 1969 0e98 E70B0000 		.4byte	0xbe7
 1970 0e9c 25       		.uleb128 0x25
 1971 0e9d 48070000 		.4byte	.LASF236
 1972 0ea1 10       		.byte	0x10
 1973 0ea2 1F       		.byte	0x1f
 1974 0ea3 970E0000 		.4byte	0xe97
 1975 0ea7 25       		.uleb128 0x25
 1976 0ea8 5F0D0000 		.4byte	.LASF237
 1977 0eac 11       		.byte	0x11
 1978 0ead 1F       		.byte	0x1f
 1979 0eae 870E0000 		.4byte	0xe87
 1980 0eb2 25       		.uleb128 0x25
 1981 0eb3 5E0B0000 		.4byte	.LASF238
 1982 0eb7 12       		.byte	0x12
 1983 0eb8 1F       		.byte	0x1f
 1984 0eb9 870E0000 		.4byte	0xe87
 1985 0ebd 25       		.uleb128 0x25
 1986 0ebe 7A010000 		.4byte	.LASF239
 1987 0ec2 13       		.byte	0x13
 1988 0ec3 1F       		.byte	0x1f
 1989 0ec4 870E0000 		.4byte	0xe87
 1990 0ec8 25       		.uleb128 0x25
 1991 0ec9 35040000 		.4byte	.LASF240
 1992 0ecd 14       		.byte	0x14
 1993 0ece 20       		.byte	0x20
 1994 0ecf D30E0000 		.4byte	0xed3
 1995 0ed3 05       		.uleb128 0x5
 1996 0ed4 94000000 		.4byte	0x94
 1997 0ed8 26       		.uleb128 0x26
 1998 0ed9 590E0000 		.4byte	.LASF241
 1999 0edd 01       		.byte	0x1
 2000 0ede 05       		.byte	0x5
 2001 0edf 560E0000 		.4byte	0xe56
 2002 0ee3 05       		.uleb128 0x5
 2003 0ee4 03       		.byte	0x3
 2004 0ee5 00000000 		.4byte	sample_uV
 2005 0ee9 27       		.uleb128 0x27
 2006 0eea B80A0000 		.4byte	.LASF242
 2007 0eee B80A0000 		.4byte	.LASF242
 2008 0ef2 03       		.byte	0x3
 2009 0ef3 3605     		.2byte	0x536
 2010 0ef5 27       		.uleb128 0x27
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 91


 2011 0ef6 BE070000 		.4byte	.LASF243
 2012 0efa BE070000 		.4byte	.LASF243
 2013 0efe 03       		.byte	0x3
 2014 0eff 5705     		.2byte	0x557
 2015 0f01 27       		.uleb128 0x27
 2016 0f02 AB0C0000 		.4byte	.LASF244
 2017 0f06 AB0C0000 		.4byte	.LASF244
 2018 0f0a 03       		.byte	0x3
 2019 0f0b 5405     		.2byte	0x554
 2020 0f0d 28       		.uleb128 0x28
 2021 0f0e 6C010000 		.4byte	.LASF245
 2022 0f12 6C010000 		.4byte	.LASF245
 2023 0f16 02       		.byte	0x2
 2024 0f17 58       		.byte	0x58
 2025 0f18 28       		.uleb128 0x28
 2026 0f19 75040000 		.4byte	.LASF246
 2027 0f1d 75040000 		.4byte	.LASF246
 2028 0f21 02       		.byte	0x2
 2029 0f22 5D       		.byte	0x5d
 2030 0f23 00       		.byte	0
 2031              		.section	.debug_abbrev,"",%progbits
 2032              	.Ldebug_abbrev0:
 2033 0000 01       		.uleb128 0x1
 2034 0001 11       		.uleb128 0x11
 2035 0002 01       		.byte	0x1
 2036 0003 25       		.uleb128 0x25
 2037 0004 0E       		.uleb128 0xe
 2038 0005 13       		.uleb128 0x13
 2039 0006 0B       		.uleb128 0xb
 2040 0007 03       		.uleb128 0x3
 2041 0008 0E       		.uleb128 0xe
 2042 0009 1B       		.uleb128 0x1b
 2043 000a 0E       		.uleb128 0xe
 2044 000b 55       		.uleb128 0x55
 2045 000c 17       		.uleb128 0x17
 2046 000d 11       		.uleb128 0x11
 2047 000e 01       		.uleb128 0x1
 2048 000f 10       		.uleb128 0x10
 2049 0010 17       		.uleb128 0x17
 2050 0011 00       		.byte	0
 2051 0012 00       		.byte	0
 2052 0013 02       		.uleb128 0x2
 2053 0014 24       		.uleb128 0x24
 2054 0015 00       		.byte	0
 2055 0016 0B       		.uleb128 0xb
 2056 0017 0B       		.uleb128 0xb
 2057 0018 3E       		.uleb128 0x3e
 2058 0019 0B       		.uleb128 0xb
 2059 001a 03       		.uleb128 0x3
 2060 001b 0E       		.uleb128 0xe
 2061 001c 00       		.byte	0
 2062 001d 00       		.byte	0
 2063 001e 03       		.uleb128 0x3
 2064 001f 16       		.uleb128 0x16
 2065 0020 00       		.byte	0
 2066 0021 03       		.uleb128 0x3
 2067 0022 0E       		.uleb128 0xe
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 92


 2068 0023 3A       		.uleb128 0x3a
 2069 0024 0B       		.uleb128 0xb
 2070 0025 3B       		.uleb128 0x3b
 2071 0026 0B       		.uleb128 0xb
 2072 0027 49       		.uleb128 0x49
 2073 0028 13       		.uleb128 0x13
 2074 0029 00       		.byte	0
 2075 002a 00       		.byte	0
 2076 002b 04       		.uleb128 0x4
 2077 002c 24       		.uleb128 0x24
 2078 002d 00       		.byte	0
 2079 002e 0B       		.uleb128 0xb
 2080 002f 0B       		.uleb128 0xb
 2081 0030 3E       		.uleb128 0x3e
 2082 0031 0B       		.uleb128 0xb
 2083 0032 03       		.uleb128 0x3
 2084 0033 08       		.uleb128 0x8
 2085 0034 00       		.byte	0
 2086 0035 00       		.byte	0
 2087 0036 05       		.uleb128 0x5
 2088 0037 35       		.uleb128 0x35
 2089 0038 00       		.byte	0
 2090 0039 49       		.uleb128 0x49
 2091 003a 13       		.uleb128 0x13
 2092 003b 00       		.byte	0
 2093 003c 00       		.byte	0
 2094 003d 06       		.uleb128 0x6
 2095 003e 26       		.uleb128 0x26
 2096 003f 00       		.byte	0
 2097 0040 49       		.uleb128 0x49
 2098 0041 13       		.uleb128 0x13
 2099 0042 00       		.byte	0
 2100 0043 00       		.byte	0
 2101 0044 07       		.uleb128 0x7
 2102 0045 01       		.uleb128 0x1
 2103 0046 01       		.byte	0x1
 2104 0047 49       		.uleb128 0x49
 2105 0048 13       		.uleb128 0x13
 2106 0049 01       		.uleb128 0x1
 2107 004a 13       		.uleb128 0x13
 2108 004b 00       		.byte	0
 2109 004c 00       		.byte	0
 2110 004d 08       		.uleb128 0x8
 2111 004e 21       		.uleb128 0x21
 2112 004f 00       		.byte	0
 2113 0050 49       		.uleb128 0x49
 2114 0051 13       		.uleb128 0x13
 2115 0052 2F       		.uleb128 0x2f
 2116 0053 0B       		.uleb128 0xb
 2117 0054 00       		.byte	0
 2118 0055 00       		.byte	0
 2119 0056 09       		.uleb128 0x9
 2120 0057 13       		.uleb128 0x13
 2121 0058 01       		.byte	0x1
 2122 0059 0B       		.uleb128 0xb
 2123 005a 05       		.uleb128 0x5
 2124 005b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 93


 2125 005c 0B       		.uleb128 0xb
 2126 005d 3B       		.uleb128 0x3b
 2127 005e 0B       		.uleb128 0xb
 2128 005f 01       		.uleb128 0x1
 2129 0060 13       		.uleb128 0x13
 2130 0061 00       		.byte	0
 2131 0062 00       		.byte	0
 2132 0063 0A       		.uleb128 0xa
 2133 0064 0D       		.uleb128 0xd
 2134 0065 00       		.byte	0
 2135 0066 03       		.uleb128 0x3
 2136 0067 0E       		.uleb128 0xe
 2137 0068 3A       		.uleb128 0x3a
 2138 0069 0B       		.uleb128 0xb
 2139 006a 3B       		.uleb128 0x3b
 2140 006b 0B       		.uleb128 0xb
 2141 006c 49       		.uleb128 0x49
 2142 006d 13       		.uleb128 0x13
 2143 006e 38       		.uleb128 0x38
 2144 006f 0B       		.uleb128 0xb
 2145 0070 00       		.byte	0
 2146 0071 00       		.byte	0
 2147 0072 0B       		.uleb128 0xb
 2148 0073 0D       		.uleb128 0xd
 2149 0074 00       		.byte	0
 2150 0075 03       		.uleb128 0x3
 2151 0076 0E       		.uleb128 0xe
 2152 0077 3A       		.uleb128 0x3a
 2153 0078 0B       		.uleb128 0xb
 2154 0079 3B       		.uleb128 0x3b
 2155 007a 0B       		.uleb128 0xb
 2156 007b 49       		.uleb128 0x49
 2157 007c 13       		.uleb128 0x13
 2158 007d 38       		.uleb128 0x38
 2159 007e 05       		.uleb128 0x5
 2160 007f 00       		.byte	0
 2161 0080 00       		.byte	0
 2162 0081 0C       		.uleb128 0xc
 2163 0082 21       		.uleb128 0x21
 2164 0083 00       		.byte	0
 2165 0084 49       		.uleb128 0x49
 2166 0085 13       		.uleb128 0x13
 2167 0086 2F       		.uleb128 0x2f
 2168 0087 05       		.uleb128 0x5
 2169 0088 00       		.byte	0
 2170 0089 00       		.byte	0
 2171 008a 0D       		.uleb128 0xd
 2172 008b 16       		.uleb128 0x16
 2173 008c 00       		.byte	0
 2174 008d 03       		.uleb128 0x3
 2175 008e 0E       		.uleb128 0xe
 2176 008f 3A       		.uleb128 0x3a
 2177 0090 0B       		.uleb128 0xb
 2178 0091 3B       		.uleb128 0x3b
 2179 0092 05       		.uleb128 0x5
 2180 0093 49       		.uleb128 0x49
 2181 0094 13       		.uleb128 0x13
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 94


 2182 0095 00       		.byte	0
 2183 0096 00       		.byte	0
 2184 0097 0E       		.uleb128 0xe
 2185 0098 13       		.uleb128 0x13
 2186 0099 01       		.byte	0x1
 2187 009a 0B       		.uleb128 0xb
 2188 009b 0B       		.uleb128 0xb
 2189 009c 3A       		.uleb128 0x3a
 2190 009d 0B       		.uleb128 0xb
 2191 009e 3B       		.uleb128 0x3b
 2192 009f 0B       		.uleb128 0xb
 2193 00a0 01       		.uleb128 0x1
 2194 00a1 13       		.uleb128 0x13
 2195 00a2 00       		.byte	0
 2196 00a3 00       		.byte	0
 2197 00a4 0F       		.uleb128 0xf
 2198 00a5 0F       		.uleb128 0xf
 2199 00a6 00       		.byte	0
 2200 00a7 0B       		.uleb128 0xb
 2201 00a8 0B       		.uleb128 0xb
 2202 00a9 00       		.byte	0
 2203 00aa 00       		.byte	0
 2204 00ab 10       		.uleb128 0x10
 2205 00ac 0F       		.uleb128 0xf
 2206 00ad 00       		.byte	0
 2207 00ae 0B       		.uleb128 0xb
 2208 00af 0B       		.uleb128 0xb
 2209 00b0 49       		.uleb128 0x49
 2210 00b1 13       		.uleb128 0x13
 2211 00b2 00       		.byte	0
 2212 00b3 00       		.byte	0
 2213 00b4 11       		.uleb128 0x11
 2214 00b5 15       		.uleb128 0x15
 2215 00b6 01       		.byte	0x1
 2216 00b7 27       		.uleb128 0x27
 2217 00b8 19       		.uleb128 0x19
 2218 00b9 01       		.uleb128 0x1
 2219 00ba 13       		.uleb128 0x13
 2220 00bb 00       		.byte	0
 2221 00bc 00       		.byte	0
 2222 00bd 12       		.uleb128 0x12
 2223 00be 05       		.uleb128 0x5
 2224 00bf 00       		.byte	0
 2225 00c0 49       		.uleb128 0x49
 2226 00c1 13       		.uleb128 0x13
 2227 00c2 00       		.byte	0
 2228 00c3 00       		.byte	0
 2229 00c4 13       		.uleb128 0x13
 2230 00c5 13       		.uleb128 0x13
 2231 00c6 01       		.byte	0x1
 2232 00c7 03       		.uleb128 0x3
 2233 00c8 0E       		.uleb128 0xe
 2234 00c9 0B       		.uleb128 0xb
 2235 00ca 0B       		.uleb128 0xb
 2236 00cb 3A       		.uleb128 0x3a
 2237 00cc 0B       		.uleb128 0xb
 2238 00cd 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 95


 2239 00ce 05       		.uleb128 0x5
 2240 00cf 01       		.uleb128 0x1
 2241 00d0 13       		.uleb128 0x13
 2242 00d1 00       		.byte	0
 2243 00d2 00       		.byte	0
 2244 00d3 14       		.uleb128 0x14
 2245 00d4 0D       		.uleb128 0xd
 2246 00d5 00       		.byte	0
 2247 00d6 03       		.uleb128 0x3
 2248 00d7 0E       		.uleb128 0xe
 2249 00d8 3A       		.uleb128 0x3a
 2250 00d9 0B       		.uleb128 0xb
 2251 00da 3B       		.uleb128 0x3b
 2252 00db 05       		.uleb128 0x5
 2253 00dc 49       		.uleb128 0x49
 2254 00dd 13       		.uleb128 0x13
 2255 00de 38       		.uleb128 0x38
 2256 00df 0B       		.uleb128 0xb
 2257 00e0 00       		.byte	0
 2258 00e1 00       		.byte	0
 2259 00e2 15       		.uleb128 0x15
 2260 00e3 13       		.uleb128 0x13
 2261 00e4 01       		.byte	0x1
 2262 00e5 03       		.uleb128 0x3
 2263 00e6 0E       		.uleb128 0xe
 2264 00e7 0B       		.uleb128 0xb
 2265 00e8 0B       		.uleb128 0xb
 2266 00e9 3A       		.uleb128 0x3a
 2267 00ea 0B       		.uleb128 0xb
 2268 00eb 3B       		.uleb128 0x3b
 2269 00ec 0B       		.uleb128 0xb
 2270 00ed 01       		.uleb128 0x1
 2271 00ee 13       		.uleb128 0x13
 2272 00ef 00       		.byte	0
 2273 00f0 00       		.byte	0
 2274 00f1 16       		.uleb128 0x16
 2275 00f2 2E       		.uleb128 0x2e
 2276 00f3 01       		.byte	0x1
 2277 00f4 03       		.uleb128 0x3
 2278 00f5 0E       		.uleb128 0xe
 2279 00f6 3A       		.uleb128 0x3a
 2280 00f7 0B       		.uleb128 0xb
 2281 00f8 3B       		.uleb128 0x3b
 2282 00f9 05       		.uleb128 0x5
 2283 00fa 27       		.uleb128 0x27
 2284 00fb 19       		.uleb128 0x19
 2285 00fc 20       		.uleb128 0x20
 2286 00fd 0B       		.uleb128 0xb
 2287 00fe 01       		.uleb128 0x1
 2288 00ff 13       		.uleb128 0x13
 2289 0100 00       		.byte	0
 2290 0101 00       		.byte	0
 2291 0102 17       		.uleb128 0x17
 2292 0103 05       		.uleb128 0x5
 2293 0104 00       		.byte	0
 2294 0105 03       		.uleb128 0x3
 2295 0106 0E       		.uleb128 0xe
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 96


 2296 0107 3A       		.uleb128 0x3a
 2297 0108 0B       		.uleb128 0xb
 2298 0109 3B       		.uleb128 0x3b
 2299 010a 05       		.uleb128 0x5
 2300 010b 49       		.uleb128 0x49
 2301 010c 13       		.uleb128 0x13
 2302 010d 00       		.byte	0
 2303 010e 00       		.byte	0
 2304 010f 18       		.uleb128 0x18
 2305 0110 2E       		.uleb128 0x2e
 2306 0111 01       		.byte	0x1
 2307 0112 03       		.uleb128 0x3
 2308 0113 0E       		.uleb128 0xe
 2309 0114 3A       		.uleb128 0x3a
 2310 0115 0B       		.uleb128 0xb
 2311 0116 3B       		.uleb128 0x3b
 2312 0117 05       		.uleb128 0x5
 2313 0118 27       		.uleb128 0x27
 2314 0119 19       		.uleb128 0x19
 2315 011a 49       		.uleb128 0x49
 2316 011b 13       		.uleb128 0x13
 2317 011c 20       		.uleb128 0x20
 2318 011d 0B       		.uleb128 0xb
 2319 011e 01       		.uleb128 0x1
 2320 011f 13       		.uleb128 0x13
 2321 0120 00       		.byte	0
 2322 0121 00       		.byte	0
 2323 0122 19       		.uleb128 0x19
 2324 0123 2E       		.uleb128 0x2e
 2325 0124 01       		.byte	0x1
 2326 0125 3F       		.uleb128 0x3f
 2327 0126 19       		.uleb128 0x19
 2328 0127 03       		.uleb128 0x3
 2329 0128 0E       		.uleb128 0xe
 2330 0129 3A       		.uleb128 0x3a
 2331 012a 0B       		.uleb128 0xb
 2332 012b 3B       		.uleb128 0x3b
 2333 012c 0B       		.uleb128 0xb
 2334 012d 27       		.uleb128 0x27
 2335 012e 19       		.uleb128 0x19
 2336 012f 11       		.uleb128 0x11
 2337 0130 01       		.uleb128 0x1
 2338 0131 12       		.uleb128 0x12
 2339 0132 06       		.uleb128 0x6
 2340 0133 40       		.uleb128 0x40
 2341 0134 18       		.uleb128 0x18
 2342 0135 9742     		.uleb128 0x2117
 2343 0137 19       		.uleb128 0x19
 2344 0138 01       		.uleb128 0x1
 2345 0139 13       		.uleb128 0x13
 2346 013a 00       		.byte	0
 2347 013b 00       		.byte	0
 2348 013c 1A       		.uleb128 0x1a
 2349 013d 34       		.uleb128 0x34
 2350 013e 00       		.byte	0
 2351 013f 03       		.uleb128 0x3
 2352 0140 0E       		.uleb128 0xe
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 97


 2353 0141 3A       		.uleb128 0x3a
 2354 0142 0B       		.uleb128 0xb
 2355 0143 3B       		.uleb128 0x3b
 2356 0144 0B       		.uleb128 0xb
 2357 0145 49       		.uleb128 0x49
 2358 0146 13       		.uleb128 0x13
 2359 0147 00       		.byte	0
 2360 0148 00       		.byte	0
 2361 0149 1B       		.uleb128 0x1b
 2362 014a 34       		.uleb128 0x34
 2363 014b 00       		.byte	0
 2364 014c 03       		.uleb128 0x3
 2365 014d 0E       		.uleb128 0xe
 2366 014e 3A       		.uleb128 0x3a
 2367 014f 0B       		.uleb128 0xb
 2368 0150 3B       		.uleb128 0x3b
 2369 0151 0B       		.uleb128 0xb
 2370 0152 49       		.uleb128 0x49
 2371 0153 13       		.uleb128 0x13
 2372 0154 02       		.uleb128 0x2
 2373 0155 17       		.uleb128 0x17
 2374 0156 00       		.byte	0
 2375 0157 00       		.byte	0
 2376 0158 1C       		.uleb128 0x1c
 2377 0159 1D       		.uleb128 0x1d
 2378 015a 01       		.byte	0x1
 2379 015b 31       		.uleb128 0x31
 2380 015c 13       		.uleb128 0x13
 2381 015d 52       		.uleb128 0x52
 2382 015e 01       		.uleb128 0x1
 2383 015f 55       		.uleb128 0x55
 2384 0160 17       		.uleb128 0x17
 2385 0161 58       		.uleb128 0x58
 2386 0162 0B       		.uleb128 0xb
 2387 0163 59       		.uleb128 0x59
 2388 0164 0B       		.uleb128 0xb
 2389 0165 01       		.uleb128 0x1
 2390 0166 13       		.uleb128 0x13
 2391 0167 00       		.byte	0
 2392 0168 00       		.byte	0
 2393 0169 1D       		.uleb128 0x1d
 2394 016a 05       		.uleb128 0x5
 2395 016b 00       		.byte	0
 2396 016c 31       		.uleb128 0x31
 2397 016d 13       		.uleb128 0x13
 2398 016e 02       		.uleb128 0x2
 2399 016f 17       		.uleb128 0x17
 2400 0170 00       		.byte	0
 2401 0171 00       		.byte	0
 2402 0172 1E       		.uleb128 0x1e
 2403 0173 898201   		.uleb128 0x4109
 2404 0176 01       		.byte	0x1
 2405 0177 11       		.uleb128 0x11
 2406 0178 01       		.uleb128 0x1
 2407 0179 31       		.uleb128 0x31
 2408 017a 13       		.uleb128 0x13
 2409 017b 00       		.byte	0
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 98


 2410 017c 00       		.byte	0
 2411 017d 1F       		.uleb128 0x1f
 2412 017e 8A8201   		.uleb128 0x410a
 2413 0181 00       		.byte	0
 2414 0182 02       		.uleb128 0x2
 2415 0183 18       		.uleb128 0x18
 2416 0184 9142     		.uleb128 0x2111
 2417 0186 18       		.uleb128 0x18
 2418 0187 00       		.byte	0
 2419 0188 00       		.byte	0
 2420 0189 20       		.uleb128 0x20
 2421 018a 1D       		.uleb128 0x1d
 2422 018b 01       		.byte	0x1
 2423 018c 31       		.uleb128 0x31
 2424 018d 13       		.uleb128 0x13
 2425 018e 11       		.uleb128 0x11
 2426 018f 01       		.uleb128 0x1
 2427 0190 12       		.uleb128 0x12
 2428 0191 06       		.uleb128 0x6
 2429 0192 58       		.uleb128 0x58
 2430 0193 0B       		.uleb128 0xb
 2431 0194 59       		.uleb128 0x59
 2432 0195 0B       		.uleb128 0xb
 2433 0196 01       		.uleb128 0x1
 2434 0197 13       		.uleb128 0x13
 2435 0198 00       		.byte	0
 2436 0199 00       		.byte	0
 2437 019a 21       		.uleb128 0x21
 2438 019b 05       		.uleb128 0x5
 2439 019c 00       		.byte	0
 2440 019d 31       		.uleb128 0x31
 2441 019e 13       		.uleb128 0x13
 2442 019f 00       		.byte	0
 2443 01a0 00       		.byte	0
 2444 01a1 22       		.uleb128 0x22
 2445 01a2 1D       		.uleb128 0x1d
 2446 01a3 01       		.byte	0x1
 2447 01a4 31       		.uleb128 0x31
 2448 01a5 13       		.uleb128 0x13
 2449 01a6 11       		.uleb128 0x11
 2450 01a7 01       		.uleb128 0x1
 2451 01a8 12       		.uleb128 0x12
 2452 01a9 06       		.uleb128 0x6
 2453 01aa 58       		.uleb128 0x58
 2454 01ab 0B       		.uleb128 0xb
 2455 01ac 59       		.uleb128 0x59
 2456 01ad 05       		.uleb128 0x5
 2457 01ae 00       		.byte	0
 2458 01af 00       		.byte	0
 2459 01b0 23       		.uleb128 0x23
 2460 01b1 898201   		.uleb128 0x4109
 2461 01b4 01       		.byte	0x1
 2462 01b5 11       		.uleb128 0x11
 2463 01b6 01       		.uleb128 0x1
 2464 01b7 31       		.uleb128 0x31
 2465 01b8 13       		.uleb128 0x13
 2466 01b9 01       		.uleb128 0x1
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 99


 2467 01ba 13       		.uleb128 0x13
 2468 01bb 00       		.byte	0
 2469 01bc 00       		.byte	0
 2470 01bd 24       		.uleb128 0x24
 2471 01be 34       		.uleb128 0x34
 2472 01bf 00       		.byte	0
 2473 01c0 03       		.uleb128 0x3
 2474 01c1 0E       		.uleb128 0xe
 2475 01c2 3A       		.uleb128 0x3a
 2476 01c3 0B       		.uleb128 0xb
 2477 01c4 3B       		.uleb128 0x3b
 2478 01c5 05       		.uleb128 0x5
 2479 01c6 49       		.uleb128 0x49
 2480 01c7 13       		.uleb128 0x13
 2481 01c8 3F       		.uleb128 0x3f
 2482 01c9 19       		.uleb128 0x19
 2483 01ca 3C       		.uleb128 0x3c
 2484 01cb 19       		.uleb128 0x19
 2485 01cc 00       		.byte	0
 2486 01cd 00       		.byte	0
 2487 01ce 25       		.uleb128 0x25
 2488 01cf 34       		.uleb128 0x34
 2489 01d0 00       		.byte	0
 2490 01d1 03       		.uleb128 0x3
 2491 01d2 0E       		.uleb128 0xe
 2492 01d3 3A       		.uleb128 0x3a
 2493 01d4 0B       		.uleb128 0xb
 2494 01d5 3B       		.uleb128 0x3b
 2495 01d6 0B       		.uleb128 0xb
 2496 01d7 49       		.uleb128 0x49
 2497 01d8 13       		.uleb128 0x13
 2498 01d9 3F       		.uleb128 0x3f
 2499 01da 19       		.uleb128 0x19
 2500 01db 3C       		.uleb128 0x3c
 2501 01dc 19       		.uleb128 0x19
 2502 01dd 00       		.byte	0
 2503 01de 00       		.byte	0
 2504 01df 26       		.uleb128 0x26
 2505 01e0 34       		.uleb128 0x34
 2506 01e1 00       		.byte	0
 2507 01e2 03       		.uleb128 0x3
 2508 01e3 0E       		.uleb128 0xe
 2509 01e4 3A       		.uleb128 0x3a
 2510 01e5 0B       		.uleb128 0xb
 2511 01e6 3B       		.uleb128 0x3b
 2512 01e7 0B       		.uleb128 0xb
 2513 01e8 49       		.uleb128 0x49
 2514 01e9 13       		.uleb128 0x13
 2515 01ea 3F       		.uleb128 0x3f
 2516 01eb 19       		.uleb128 0x19
 2517 01ec 02       		.uleb128 0x2
 2518 01ed 18       		.uleb128 0x18
 2519 01ee 00       		.byte	0
 2520 01ef 00       		.byte	0
 2521 01f0 27       		.uleb128 0x27
 2522 01f1 2E       		.uleb128 0x2e
 2523 01f2 00       		.byte	0
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 100


 2524 01f3 3F       		.uleb128 0x3f
 2525 01f4 19       		.uleb128 0x19
 2526 01f5 3C       		.uleb128 0x3c
 2527 01f6 19       		.uleb128 0x19
 2528 01f7 6E       		.uleb128 0x6e
 2529 01f8 0E       		.uleb128 0xe
 2530 01f9 03       		.uleb128 0x3
 2531 01fa 0E       		.uleb128 0xe
 2532 01fb 3A       		.uleb128 0x3a
 2533 01fc 0B       		.uleb128 0xb
 2534 01fd 3B       		.uleb128 0x3b
 2535 01fe 05       		.uleb128 0x5
 2536 01ff 00       		.byte	0
 2537 0200 00       		.byte	0
 2538 0201 28       		.uleb128 0x28
 2539 0202 2E       		.uleb128 0x2e
 2540 0203 00       		.byte	0
 2541 0204 3F       		.uleb128 0x3f
 2542 0205 19       		.uleb128 0x19
 2543 0206 3C       		.uleb128 0x3c
 2544 0207 19       		.uleb128 0x19
 2545 0208 6E       		.uleb128 0x6e
 2546 0209 0E       		.uleb128 0xe
 2547 020a 03       		.uleb128 0x3
 2548 020b 0E       		.uleb128 0xe
 2549 020c 3A       		.uleb128 0x3a
 2550 020d 0B       		.uleb128 0xb
 2551 020e 3B       		.uleb128 0x3b
 2552 020f 0B       		.uleb128 0xb
 2553 0210 00       		.byte	0
 2554 0211 00       		.byte	0
 2555 0212 00       		.byte	0
 2556              		.section	.debug_loc,"",%progbits
 2557              	.Ldebug_loc0:
 2558              	.LLST0:
 2559 0000 1C000000 		.4byte	.LVL2
 2560 0004 22000000 		.4byte	.LVL3
 2561 0008 0100     		.2byte	0x1
 2562 000a 50       		.byte	0x50
 2563 000b 00000000 		.4byte	0
 2564 000f 00000000 		.4byte	0
 2565              	.LLST1:
 2566 0013 0E000000 		.4byte	.LVL0
 2567 0017 12000000 		.4byte	.LVL1
 2568 001b 0200     		.2byte	0x2
 2569 001d 30       		.byte	0x30
 2570 001e 9F       		.byte	0x9f
 2571 001f 00000000 		.4byte	0
 2572 0023 00000000 		.4byte	0
 2573              	.LLST2:
 2574 0027 1C000000 		.4byte	.LVL2
 2575 002b 26000000 		.4byte	.LVL4
 2576 002f 0200     		.2byte	0x2
 2577 0031 30       		.byte	0x30
 2578 0032 9F       		.byte	0x9f
 2579 0033 00000000 		.4byte	0
 2580 0037 00000000 		.4byte	0
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 101


 2581              	.LLST4:
 2582 003b 2C000000 		.4byte	.LVL5
 2583 003f 30000000 		.4byte	.LVL6
 2584 0043 0600     		.2byte	0x6
 2585 0045 0C       		.byte	0xc
 2586 0046 00001D41 		.4byte	0x411d0000
 2587 004a 9F       		.byte	0x9f
 2588 004b 00000000 		.4byte	0
 2589 004f 00000000 		.4byte	0
 2590              	.LLST5:
 2591 0053 30000000 		.4byte	.LVL6
 2592 0057 38000000 		.4byte	.LVL7
 2593 005b 0600     		.2byte	0x6
 2594 005d 0C       		.byte	0xc
 2595 005e 00001D41 		.4byte	0x411d0000
 2596 0062 9F       		.byte	0x9f
 2597 0063 00000000 		.4byte	0
 2598 0067 00000000 		.4byte	0
 2599              	.LLST6:
 2600 006b 0E000000 		.4byte	.LVL9
 2601 006f 16000000 		.4byte	.LVL10
 2602 0073 0200     		.2byte	0x2
 2603 0075 31       		.byte	0x31
 2604 0076 9F       		.byte	0x9f
 2605 0077 00000000 		.4byte	0
 2606 007b 00000000 		.4byte	0
 2607              	.LLST8:
 2608 007f 0E000000 		.4byte	.LVL9
 2609 0083 16000000 		.4byte	.LVL10
 2610 0087 0600     		.2byte	0x6
 2611 0089 0C       		.byte	0xc
 2612 008a 00001D41 		.4byte	0x411d0000
 2613 008e 9F       		.byte	0x9f
 2614 008f 00000000 		.4byte	0
 2615 0093 00000000 		.4byte	0
 2616              		.section	.debug_aranges,"",%progbits
 2617 0000 24000000 		.4byte	0x24
 2618 0004 0200     		.2byte	0x2
 2619 0006 00000000 		.4byte	.Ldebug_info0
 2620 000a 04       		.byte	0x4
 2621 000b 00       		.byte	0
 2622 000c 0000     		.2byte	0
 2623 000e 0000     		.2byte	0
 2624 0010 00000000 		.4byte	.LFB739
 2625 0014 48000000 		.4byte	.LFE739-.LFB739
 2626 0018 00000000 		.4byte	.LFB738
 2627 001c 20000000 		.4byte	.LFE738-.LFB738
 2628 0020 00000000 		.4byte	0
 2629 0024 00000000 		.4byte	0
 2630              		.section	.debug_ranges,"",%progbits
 2631              	.Ldebug_ranges0:
 2632 0000 02000000 		.4byte	.LBB20
 2633 0004 04000000 		.4byte	.LBE20
 2634 0008 08000000 		.4byte	.LBB24
 2635 000c 0C000000 		.4byte	.LBE24
 2636 0010 0E000000 		.4byte	.LBB25
 2637 0014 12000000 		.4byte	.LBE25
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 102


 2638 0018 00000000 		.4byte	0
 2639 001c 00000000 		.4byte	0
 2640 0020 00000000 		.4byte	.LFB739
 2641 0024 48000000 		.4byte	.LFE739
 2642 0028 00000000 		.4byte	.LFB738
 2643 002c 20000000 		.4byte	.LFE738
 2644 0030 00000000 		.4byte	0
 2645 0034 00000000 		.4byte	0
 2646              		.section	.debug_line,"",%progbits
 2647              	.Ldebug_line0:
 2648 0000 F6030000 		.section	.debug_str,"MS",%progbits,1
 2648      02008F03 
 2648      00000201 
 2648      FB0E0D00 
 2648      01010101 
 2649              	.LASF108:
 2650 0000 70726F74 		.ascii	"protBusMasterMask\000"
 2650      4275734D 
 2650      61737465 
 2650      724D6173 
 2650      6B00
 2651              	.LASF59:
 2652 0012 4156475F 		.ascii	"AVG_STAT\000"
 2652      53544154 
 2652      00
 2653              	.LASF54:
 2654 001b 494E4A5F 		.ascii	"INJ_CHAN_CONFIG\000"
 2654      4348414E 
 2654      5F434F4E 
 2654      46494700 
 2655              	.LASF172:
 2656 002b 72784275 		.ascii	"rxBufSize\000"
 2656      6653697A 
 2656      6500
 2657              	.LASF118:
 2658 0035 666C6173 		.ascii	"flashCtlMainWs3Freq\000"
 2658      6843746C 
 2658      4D61696E 
 2658      57733346 
 2658      72657100 
 2659              	.LASF250:
 2660 0049 636F756E 		.ascii	"counts\000"
 2660      747300
 2661              	.LASF214:
 2662 0050 6B696C6C 		.ascii	"killInput\000"
 2662      496E7075 
 2662      7400
 2663              	.LASF247:
 2664 005a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2664      43313120 
 2664      352E342E 
 2664      31203230 
 2664      31363036 
 2665 008d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m4 -mfloat-abi=s"
 2665      20726576 
 2665      6973696F 
 2665      6E203233 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 103


 2665      37373135 
 2666 00c0 6F667466 		.ascii	"oftfp -mfpu=fpv4-sp-d16 -mthumb -g -Os -ffunction-s"
 2666      70202D6D 
 2666      6670753D 
 2666      66707634 
 2666      2D73702D 
 2667 00f3 65637469 		.ascii	"ections -ffat-lto-objects\000"
 2667      6F6E7320 
 2667      2D666661 
 2667      742D6C74 
 2667      6F2D6F62 
 2668              	.LASF84:
 2669 010d 63727970 		.ascii	"cryptoVersion\000"
 2669      746F5665 
 2669      7273696F 
 2669      6E00
 2670              	.LASF122:
 2671 011b 64774368 		.ascii	"dwChCtlPrioPos\000"
 2671      43746C50 
 2671      72696F50 
 2671      6F7300
 2672              	.LASF80:
 2673 012a 70617373 		.ascii	"passBase\000"
 2673      42617365 
 2673      00
 2674              	.LASF61:
 2675 0133 4D55585F 		.ascii	"MUX_SWITCH0\000"
 2675      53574954 
 2675      43483000 
 2676              	.LASF93:
 2677 013f 63707573 		.ascii	"cpussIpcIrqNr\000"
 2677      73497063 
 2677      4972714E 
 2677      7200
 2678              	.LASF3:
 2679 014d 5F5F7569 		.ascii	"__uint8_t\000"
 2679      6E74385F 
 2679      7400
 2680              	.LASF137:
 2681 0157 70657269 		.ascii	"periDiv24_5CtlOffset\000"
 2681      44697632 
 2681      345F3543 
 2681      746C4F66 
 2681      66736574 
 2682              	.LASF245:
 2683 016c 4144435F 		.ascii	"ADC_1_StartEx\000"
 2683      315F5374 
 2683      61727445 
 2683      7800
 2684              	.LASF239:
 2685 017a 436F756E 		.ascii	"Counter_3_config\000"
 2685      7465725F 
 2685      335F636F 
 2685      6E666967 
 2685      00
 2686              	.LASF26:
 2687 018b 52414E47 		.ascii	"RANGE_COND\000"
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 104


 2687      455F434F 
 2687      4E4400
 2688              	.LASF196:
 2689 0196 73746F70 		.ascii	"stopInputMode\000"
 2689      496E7075 
 2689      744D6F64 
 2689      6500
 2690              	.LASF73:
 2691 01a4 63707573 		.ascii	"cpussBase\000"
 2691      73426173 
 2691      6500
 2692              	.LASF181:
 2693 01ae 70657269 		.ascii	"period\000"
 2693      6F6400
 2694              	.LASF102:
 2695 01b5 70657269 		.ascii	"periClockNr\000"
 2695      436C6F63 
 2695      6B4E7200 
 2696              	.LASF40:
 2697 01c1 494E5452 		.ascii	"INTR\000"
 2697      00
 2698              	.LASF220:
 2699 01c6 4144435F 		.ascii	"ADC_1_SetLimitMask\000"
 2699      315F5365 
 2699      744C696D 
 2699      69744D61 
 2699      736B00
 2700              	.LASF12:
 2701 01d9 6C6F6E67 		.ascii	"long long unsigned int\000"
 2701      206C6F6E 
 2701      6720756E 
 2701      7369676E 
 2701      65642069 
 2702              	.LASF249:
 2703 01f0 433A5C55 		.ascii	"C:\\Users\\mcfdo\\OneDrive\\Documents\\PSoC Creator"
 2703      73657273 
 2703      5C6D6366 
 2703      646F5C4F 
 2703      6E654472 
 2704 021e 5C576F72 		.ascii	"\\Workspace_prog1\\Mario_mobile_robot_Copy_01_Copy_"
 2704      6B737061 
 2704      63655F70 
 2704      726F6731 
 2704      5C4D6172 
 2705 024f 30312E63 		.ascii	"01.cydsn\000"
 2705      7964736E 
 2705      00
 2706              	.LASF182:
 2707 0258 636C6F63 		.ascii	"clockPrescaler\000"
 2707      6B507265 
 2707      7363616C 
 2707      657200
 2708              	.LASF126:
 2709 0267 70657269 		.ascii	"periTrCmdOffset\000"
 2709      5472436D 
 2709      644F6666 
 2709      73657400 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 105


 2710              	.LASF167:
 2711 0277 72785269 		.ascii	"rxRingBuf\000"
 2711      6E674275 
 2711      6600
 2712              	.LASF150:
 2713 0281 63707573 		.ascii	"cpussSysTickCtlOffset\000"
 2713      73537973 
 2713      5469636B 
 2713      43746C4F 
 2713      66667365 
 2714              	.LASF231:
 2715 0297 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2715      52784275 
 2715      66666572 
 2715      00
 2716              	.LASF111:
 2717 02a4 666C6173 		.ascii	"flashPipeRequired\000"
 2717      68506970 
 2717      65526571 
 2717      75697265 
 2717      6400
 2718              	.LASF68:
 2719 02b6 414E415F 		.ascii	"ANA_TRIM0\000"
 2719      5452494D 
 2719      3000
 2720              	.LASF69:
 2721 02c0 414E415F 		.ascii	"ANA_TRIM1\000"
 2721      5452494D 
 2721      3100
 2722              	.LASF50:
 2723 02ca 52414E47 		.ascii	"RANGE_INTR_MASK\000"
 2723      455F494E 
 2723      54525F4D 
 2723      41534B00 
 2724              	.LASF15:
 2725 02da 696E7431 		.ascii	"int16_t\000"
 2725      365F7400 
 2726              	.LASF11:
 2727 02e2 6C6F6E67 		.ascii	"long long int\000"
 2727      206C6F6E 
 2727      6720696E 
 2727      7400
 2728              	.LASF200:
 2729 02f0 63795F73 		.ascii	"cy_stc_tcpwm_counter_config_t\000"
 2729      74635F74 
 2729      6370776D 
 2729      5F636F75 
 2729      6E746572 
 2730              	.LASF131:
 2731 030e 70657269 		.ascii	"periDivCmdTypeSelPos\000"
 2731      44697643 
 2731      6D645479 
 2731      70655365 
 2731      6C506F73 
 2732              	.LASF176:
 2733 0323 74784C65 		.ascii	"txLeftToTransmit\000"
 2733      6674546F 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 106


 2733      5472616E 
 2733      736D6974 
 2733      00
 2734              	.LASF51:
 2735 0334 52414E47 		.ascii	"RANGE_INTR_MASKED\000"
 2735      455F494E 
 2735      54525F4D 
 2735      41534B45 
 2735      4400
 2736              	.LASF74:
 2737 0346 666C6173 		.ascii	"flashcBase\000"
 2737      68634261 
 2737      736500
 2738              	.LASF77:
 2739 0351 70726F74 		.ascii	"protBase\000"
 2739      42617365 
 2739      00
 2740              	.LASF89:
 2741 035a 69706356 		.ascii	"ipcVersion\000"
 2741      65727369 
 2741      6F6E00
 2742              	.LASF151:
 2743 0365 63707573 		.ascii	"cpussCm0NmiCtlOffset\000"
 2743      73436D30 
 2743      4E6D6943 
 2743      746C4F66 
 2743      66736574 
 2744              	.LASF67:
 2745 037a 52455345 		.ascii	"RESERVED10\000"
 2745      52564544 
 2745      313000
 2746              	.LASF78:
 2747 0385 6873696F 		.ascii	"hsiomBase\000"
 2747      6D426173 
 2747      6500
 2748              	.LASF201:
 2749 038f 63795F73 		.ascii	"cy_stc_tcpwm_pwm_config\000"
 2749      74635F74 
 2749      6370776D 
 2749      5F70776D 
 2749      5F636F6E 
 2750              	.LASF8:
 2751 03a7 6C6F6E67 		.ascii	"long int\000"
 2751      20696E74 
 2751      00
 2752              	.LASF233:
 2753 03b0 55415254 		.ascii	"UART_1_context\000"
 2753      5F315F63 
 2753      6F6E7465 
 2753      787400
 2754              	.LASF144:
 2755 03bf 63707573 		.ascii	"cpussCm4ClockCtlOffset\000"
 2755      73436D34 
 2755      436C6F63 
 2755      6B43746C 
 2755      4F666673 
 2756              	.LASF66:
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 107


 2757 03d6 4D55585F 		.ascii	"MUX_SWITCH_STATUS\000"
 2757      53574954 
 2757      43485F53 
 2757      54415455 
 2757      5300
 2758              	.LASF52:
 2759 03e8 494E5452 		.ascii	"INTR_CAUSE\000"
 2759      5F434155 
 2759      534500
 2760              	.LASF109:
 2761 03f3 63727970 		.ascii	"cryptoMemSize\000"
 2761      746F4D65 
 2761      6D53697A 
 2761      6500
 2762              	.LASF56:
 2763 0401 494E4A5F 		.ascii	"INJ_RESULT\000"
 2763      52455355 
 2763      4C5400
 2764              	.LASF75:
 2765 040c 70657269 		.ascii	"periBase\000"
 2765      42617365 
 2765      00
 2766              	.LASF49:
 2767 0415 52414E47 		.ascii	"RANGE_INTR_SET\000"
 2767      455F494E 
 2767      54525F53 
 2767      455400
 2768              	.LASF107:
 2769 0424 73797350 		.ascii	"sysPmSimoPresent\000"
 2769      6D53696D 
 2769      6F507265 
 2769      73656E74 
 2769      00
 2770              	.LASF240:
 2771 0435 656E6162 		.ascii	"enable\000"
 2771      6C6500
 2772              	.LASF162:
 2773 043c 646F7562 		.ascii	"double\000"
 2773      6C6500
 2774              	.LASF136:
 2775 0443 70657269 		.ascii	"periDiv16_5CtlOffset\000"
 2775      44697631 
 2775      365F3543 
 2775      746C4F66 
 2775      66736574 
 2776              	.LASF62:
 2777 0458 4D55585F 		.ascii	"MUX_SWITCH_CLEAR0\000"
 2777      53574954 
 2777      43485F43 
 2777      4C454152 
 2777      3000
 2778              	.LASF100:
 2779 046a 73727373 		.ascii	"srssNumPll\000"
 2779      4E756D50 
 2779      6C6C00
 2780              	.LASF246:
 2781 0475 4144435F 		.ascii	"ADC_1_SetEosMask\000"
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 108


 2781      315F5365 
 2781      74456F73 
 2781      4D61736B 
 2781      00
 2782              	.LASF228:
 2783 0486 696E7472 		.ascii	"intr_status\000"
 2783      5F737461 
 2783      74757300 
 2784              	.LASF190:
 2785 0492 63617074 		.ascii	"captureInputMode\000"
 2785      75726549 
 2785      6E707574 
 2785      4D6F6465 
 2785      00
 2786              	.LASF134:
 2787 04a3 70657269 		.ascii	"periDiv8CtlOffset\000"
 2787      44697638 
 2787      43746C4F 
 2787      66667365 
 2787      7400
 2788              	.LASF217:
 2789 04b5 6368616E 		.ascii	"chanMask\000"
 2789      4D61736B 
 2789      00
 2790              	.LASF141:
 2791 04be 6770696F 		.ascii	"gpioPrtCfgOutOffset\000"
 2791      50727443 
 2791      66674F75 
 2791      744F6666 
 2791      73657400 
 2792              	.LASF123:
 2793 04d2 64774368 		.ascii	"dwChCtlPreemptablePos\000"
 2793      43746C50 
 2793      7265656D 
 2793      70746162 
 2793      6C65506F 
 2794              	.LASF9:
 2795 04e8 5F5F7569 		.ascii	"__uint32_t\000"
 2795      6E743332 
 2795      5F7400
 2796              	.LASF104:
 2797 04f3 70617373 		.ascii	"passSarChannels\000"
 2797      53617243 
 2797      68616E6E 
 2797      656C7300 
 2798              	.LASF23:
 2799 0503 53414D50 		.ascii	"SAMPLE_TIME01\000"
 2799      4C455F54 
 2799      494D4530 
 2799      3100
 2800              	.LASF4:
 2801 0511 5F5F696E 		.ascii	"__int16_t\000"
 2801      7431365F 
 2801      7400
 2802              	.LASF173:
 2803 051b 72784275 		.ascii	"rxBufIdx\000"
 2803      66496478 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 109


 2803      00
 2804              	.LASF44:
 2805 0524 53415455 		.ascii	"SATURATE_INTR\000"
 2805      52415445 
 2805      5F494E54 
 2805      5200
 2806              	.LASF30:
 2807 0532 4348414E 		.ascii	"CHAN_CONFIG\000"
 2807      5F434F4E 
 2807      46494700 
 2808              	.LASF147:
 2809 053e 63707573 		.ascii	"cpussCm4PwrCtlOffset\000"
 2809      73436D34 
 2809      50777243 
 2809      746C4F66 
 2809      66736574 
 2810              	.LASF175:
 2811 0553 74784275 		.ascii	"txBufSize\000"
 2811      6653697A 
 2811      6500
 2812              	.LASF189:
 2813 055d 696E7465 		.ascii	"interruptSources\000"
 2813      72727570 
 2813      74536F75 
 2813      72636573 
 2813      00
 2814              	.LASF142:
 2815 056e 6770696F 		.ascii	"gpioPrtCfgSioOffset\000"
 2815      50727443 
 2815      66675369 
 2815      6F4F6666 
 2815      73657400 
 2816              	.LASF94:
 2817 0582 63707573 		.ascii	"cpussDwChNr\000"
 2817      73447743 
 2817      684E7200 
 2818              	.LASF13:
 2819 058e 756E7369 		.ascii	"unsigned int\000"
 2819      676E6564 
 2819      20696E74 
 2819      00
 2820              	.LASF16:
 2821 059b 75696E74 		.ascii	"uint16_t\000"
 2821      31365F74 
 2821      00
 2822              	.LASF203:
 2823 05a4 70776D41 		.ascii	"pwmAlignment\000"
 2823      6C69676E 
 2823      6D656E74 
 2823      00
 2824              	.LASF127:
 2825 05b1 70657269 		.ascii	"periTrCmdGrSelMsk\000"
 2825      5472436D 
 2825      64477253 
 2825      656C4D73 
 2825      6B00
 2826              	.LASF116:
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 110


 2827 05c3 666C6173 		.ascii	"flashCtlMainWs1Freq\000"
 2827      6843746C 
 2827      4D61696E 
 2827      57733146 
 2827      72657100 
 2828              	.LASF10:
 2829 05d7 6C6F6E67 		.ascii	"long unsigned int\000"
 2829      20756E73 
 2829      69676E65 
 2829      6420696E 
 2829      7400
 2830              	.LASF188:
 2831 05e9 656E6162 		.ascii	"enableCompareSwap\000"
 2831      6C65436F 
 2831      6D706172 
 2831      65537761 
 2831      7000
 2832              	.LASF129:
 2833 05fb 70657269 		.ascii	"periTrGrSize\000"
 2833      54724772 
 2833      53697A65 
 2833      00
 2834              	.LASF225:
 2835 0608 4144435F 		.ascii	"ADC_1_CountsTo_uVolts\000"
 2835      315F436F 
 2835      756E7473 
 2835      546F5F75 
 2835      566F6C74 
 2836              	.LASF164:
 2837 061e 63795F63 		.ascii	"cy_cb_scb_uart_handle_events_t\000"
 2837      625F7363 
 2837      625F7561 
 2837      72745F68 
 2837      616E646C 
 2838              	.LASF38:
 2839 063d 4348414E 		.ascii	"CHAN_WORK_NEWVALUE\000"
 2839      5F574F52 
 2839      4B5F4E45 
 2839      5756414C 
 2839      554500
 2840              	.LASF92:
 2841 0650 63707573 		.ascii	"cpussIpcNr\000"
 2841      73497063 
 2841      4E7200
 2842              	.LASF191:
 2843 065b 63617074 		.ascii	"captureInput\000"
 2843      75726549 
 2843      6E707574 
 2843      00
 2844              	.LASF42:
 2845 0668 494E5452 		.ascii	"INTR_MASK\000"
 2845      5F4D4153 
 2845      4B00
 2846              	.LASF79:
 2847 0672 6770696F 		.ascii	"gpioBase\000"
 2847      42617365 
 2847      00
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 111


 2848              	.LASF105:
 2849 067b 65704D6F 		.ascii	"epMonitorNr\000"
 2849      6E69746F 
 2849      724E7200 
 2850              	.LASF165:
 2851 0687 74785374 		.ascii	"txStatus\000"
 2851      61747573 
 2851      00
 2852              	.LASF211:
 2853 0690 73776170 		.ascii	"swapInputMode\000"
 2853      496E7075 
 2853      744D6F64 
 2853      6500
 2854              	.LASF128:
 2855 069e 70657269 		.ascii	"periTrGrOffset\000"
 2855      54724772 
 2855      4F666673 
 2855      657400
 2856              	.LASF99:
 2857 06ad 73727373 		.ascii	"srssNumClkpath\000"
 2857      4E756D43 
 2857      6C6B7061 
 2857      746800
 2858              	.LASF155:
 2859 06bc 63707573 		.ascii	"cpussRam1Ctl0\000"
 2859      7352616D 
 2859      3143746C 
 2859      3000
 2860              	.LASF48:
 2861 06ca 52414E47 		.ascii	"RANGE_INTR\000"
 2861      455F494E 
 2861      545200
 2862              	.LASF213:
 2863 06d5 6B696C6C 		.ascii	"killInputMode\000"
 2863      496E7075 
 2863      744D6F64 
 2863      6500
 2864              	.LASF36:
 2865 06e3 4348414E 		.ascii	"CHAN_WORK_UPDATED\000"
 2865      5F574F52 
 2865      4B5F5550 
 2865      44415445 
 2865      4400
 2866              	.LASF177:
 2867 06f5 63624576 		.ascii	"cbEvents\000"
 2867      656E7473 
 2867      00
 2868              	.LASF221:
 2869 06fe 6C696D69 		.ascii	"limitMask\000"
 2869      744D6173 
 2869      6B00
 2870              	.LASF184:
 2871 0708 636F756E 		.ascii	"countDirection\000"
 2871      74446972 
 2871      65637469 
 2871      6F6E00
 2872              	.LASF87:
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 112


 2873 0717 6770696F 		.ascii	"gpioVersion\000"
 2873      56657273 
 2873      696F6E00 
 2874              	.LASF174:
 2875 0723 74784275 		.ascii	"txBuf\000"
 2875      6600
 2876              	.LASF194:
 2877 0729 73746172 		.ascii	"startInputMode\000"
 2877      74496E70 
 2877      75744D6F 
 2877      646500
 2878              	.LASF159:
 2879 0738 63795F73 		.ascii	"cy_stc_device_t\000"
 2879      74635F64 
 2879      65766963 
 2879      655F7400 
 2880              	.LASF236:
 2881 0748 50574D5F 		.ascii	"PWM_R_config\000"
 2881      525F636F 
 2881      6E666967 
 2881      00
 2882              	.LASF208:
 2883 0755 696E7665 		.ascii	"invertPWMOut\000"
 2883      72745057 
 2883      4D4F7574 
 2883      00
 2884              	.LASF7:
 2885 0762 5F5F696E 		.ascii	"__int32_t\000"
 2885      7433325F 
 2885      7400
 2886              	.LASF204:
 2887 076c 64656164 		.ascii	"deadTimeClocks\000"
 2887      54696D65 
 2887      436C6F63 
 2887      6B7300
 2888              	.LASF169:
 2889 077b 72785269 		.ascii	"rxRingBufHead\000"
 2889      6E674275 
 2889      66486561 
 2889      6400
 2890              	.LASF148:
 2891 0789 63707573 		.ascii	"cpussTrimRamCtlOffset\000"
 2891      73547269 
 2891      6D52616D 
 2891      43746C4F 
 2891      66667365 
 2892              	.LASF195:
 2893 079f 73746172 		.ascii	"startInput\000"
 2893      74496E70 
 2893      757400
 2894              	.LASF28:
 2895 07aa 53544152 		.ascii	"START_CTRL\000"
 2895      545F4354 
 2895      524C00
 2896              	.LASF41:
 2897 07b5 494E5452 		.ascii	"INTR_SET\000"
 2897      5F534554 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 113


 2897      00
 2898              	.LASF243:
 2899 07be 43795F53 		.ascii	"Cy_SAR_CountsTo_uVolts\000"
 2899      41525F43 
 2899      6F756E74 
 2899      73546F5F 
 2899      75566F6C 
 2900              	.LASF216:
 2901 07d5 62617365 		.ascii	"base\000"
 2901      00
 2902              	.LASF90:
 2903 07da 70657269 		.ascii	"periVersion\000"
 2903      56657273 
 2903      696F6E00 
 2904              	.LASF146:
 2905 07e6 63707573 		.ascii	"cpussCm0StatusOffset\000"
 2905      73436D30 
 2905      53746174 
 2905      75734F66 
 2905      66736574 
 2906              	.LASF180:
 2907 07fb 63795F73 		.ascii	"cy_stc_tcpwm_counter_config\000"
 2907      74635F74 
 2907      6370776D 
 2907      5F636F75 
 2907      6E746572 
 2908              	.LASF19:
 2909 0817 73697A65 		.ascii	"sizetype\000"
 2909      74797065 
 2909      00
 2910              	.LASF120:
 2911 0820 64774368 		.ascii	"dwChOffset\000"
 2911      4F666673 
 2911      657400
 2912              	.LASF219:
 2913 082b 43795F53 		.ascii	"Cy_SAR_ClearRangeInterrupt\000"
 2913      41525F43 
 2913      6C656172 
 2913      52616E67 
 2913      65496E74 
 2914              	.LASF212:
 2915 0846 73776170 		.ascii	"swapInput\000"
 2915      496E7075 
 2915      7400
 2916              	.LASF34:
 2917 0850 4348414E 		.ascii	"CHAN_RESULT\000"
 2917      5F524553 
 2917      554C5400 
 2918              	.LASF95:
 2919 085c 63707573 		.ascii	"cpussFlashPaSize\000"
 2919      73466C61 
 2919      73685061 
 2919      53697A65 
 2919      00
 2920              	.LASF133:
 2921 086d 70657269 		.ascii	"periDivCmdPaTypeSelPos\000"
 2921      44697643 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 114


 2921      6D645061 
 2921      54797065 
 2921      53656C50 
 2922              	.LASF156:
 2923 0884 63707573 		.ascii	"cpussRam2Ctl0\000"
 2923      7352616D 
 2923      3243746C 
 2923      3000
 2924              	.LASF21:
 2925 0892 53414D50 		.ascii	"SAMPLE_CTRL\000"
 2925      4C455F43 
 2925      54524C00 
 2926              	.LASF25:
 2927 089e 52414E47 		.ascii	"RANGE_THRES\000"
 2927      455F5448 
 2927      52455300 
 2928              	.LASF124:
 2929 08aa 64775374 		.ascii	"dwStatusChIdxPos\000"
 2929      61747573 
 2929      43684964 
 2929      78506F73 
 2929      00
 2930              	.LASF27:
 2931 08bb 4348414E 		.ascii	"CHAN_EN\000"
 2931      5F454E00 
 2932              	.LASF24:
 2933 08c3 53414D50 		.ascii	"SAMPLE_TIME23\000"
 2933      4C455F54 
 2933      494D4532 
 2933      3300
 2934              	.LASF166:
 2935 08d1 72785374 		.ascii	"rxStatus\000"
 2935      61747573 
 2935      00
 2936              	.LASF227:
 2937 08da 7261775F 		.ascii	"raw_counts\000"
 2937      636F756E 
 2937      747300
 2938              	.LASF86:
 2939 08e5 666C6173 		.ascii	"flashcVersion\000"
 2939      68635665 
 2939      7273696F 
 2939      6E00
 2940              	.LASF82:
 2941 08f3 63727970 		.ascii	"cryptoBase\000"
 2941      746F4261 
 2941      736500
 2942              	.LASF103:
 2943 08fe 736D6966 		.ascii	"smifDeviceNr\000"
 2943      44657669 
 2943      63654E72 
 2943      00
 2944              	.LASF157:
 2945 090b 69706353 		.ascii	"ipcStructSize\000"
 2945      74727563 
 2945      7453697A 
 2945      6500
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 115


 2946              	.LASF45:
 2947 0919 53415455 		.ascii	"SATURATE_INTR_SET\000"
 2947      52415445 
 2947      5F494E54 
 2947      525F5345 
 2947      5400
 2948              	.LASF43:
 2949 092b 494E5452 		.ascii	"INTR_MASKED\000"
 2949      5F4D4153 
 2949      4B454400 
 2950              	.LASF202:
 2951 0937 70776D4D 		.ascii	"pwmMode\000"
 2951      6F646500 
 2952              	.LASF161:
 2953 093f 666C6F61 		.ascii	"float\000"
 2953      7400
 2954              	.LASF125:
 2955 0945 64775374 		.ascii	"dwStatusChIdxMsk\000"
 2955      61747573 
 2955      43684964 
 2955      784D736B 
 2955      00
 2956              	.LASF222:
 2957 0956 43795F53 		.ascii	"Cy_SAR_GetInterruptStatus\000"
 2957      41525F47 
 2957      6574496E 
 2957      74657272 
 2957      75707453 
 2958              	.LASF29:
 2959 0970 52455345 		.ascii	"RESERVED1\000"
 2959      52564544 
 2959      3100
 2960              	.LASF232:
 2961 097a 63795F64 		.ascii	"cy_device\000"
 2961      65766963 
 2961      6500
 2962              	.LASF33:
 2963 0984 52455345 		.ascii	"RESERVED3\000"
 2963      52564544 
 2963      3300
 2964              	.LASF153:
 2965 098e 63707573 		.ascii	"cpussRomCtl\000"
 2965      73526F6D 
 2965      43746C00 
 2966              	.LASF53:
 2967 099a 52455345 		.ascii	"RESERVED5\000"
 2967      52564544 
 2967      3500
 2968              	.LASF55:
 2969 09a4 52455345 		.ascii	"RESERVED6\000"
 2969      52564544 
 2969      3600
 2970              	.LASF57:
 2971 09ae 52455345 		.ascii	"RESERVED7\000"
 2971      52564544 
 2971      3700
 2972              	.LASF60:
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 116


 2973 09b8 52455345 		.ascii	"RESERVED8\000"
 2973      52564544 
 2973      3800
 2974              	.LASF63:
 2975 09c2 52455345 		.ascii	"RESERVED9\000"
 2975      52564544 
 2975      3900
 2976              	.LASF76:
 2977 09cc 75646242 		.ascii	"udbBase\000"
 2977      61736500 
 2978              	.LASF20:
 2979 09d4 4354524C 		.ascii	"CTRL\000"
 2979      00
 2980              	.LASF163:
 2981 09d9 5F426F6F 		.ascii	"_Bool\000"
 2981      6C00
 2982              	.LASF17:
 2983 09df 696E7433 		.ascii	"int32_t\000"
 2983      325F7400 
 2984              	.LASF2:
 2985 09e7 756E7369 		.ascii	"unsigned char\000"
 2985      676E6564 
 2985      20636861 
 2985      7200
 2986              	.LASF223:
 2987 09f5 4144435F 		.ascii	"ADC_1_GetResult16\000"
 2987      315F4765 
 2987      74526573 
 2987      756C7431 
 2987      3600
 2988              	.LASF119:
 2989 0a07 666C6173 		.ascii	"flashCtlMainWs4Freq\000"
 2989      6843746C 
 2989      4D61696E 
 2989      57733446 
 2989      72657100 
 2990              	.LASF158:
 2991 0a1b 6970634C 		.ascii	"ipcLockStatusOffset\000"
 2991      6F636B53 
 2991      74617475 
 2991      734F6666 
 2991      73657400 
 2992              	.LASF0:
 2993 0a2f 73686F72 		.ascii	"short int\000"
 2993      7420696E 
 2993      7400
 2994              	.LASF234:
 2995 0a39 436F756E 		.ascii	"Counter_1_config\000"
 2995      7465725F 
 2995      315F636F 
 2995      6E666967 
 2995      00
 2996              	.LASF71:
 2997 0a4a 5341525F 		.ascii	"SAR_Type\000"
 2997      54797065 
 2997      00
 2998              	.LASF22:
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 117


 2999 0a53 52455345 		.ascii	"RESERVED\000"
 2999      52564544 
 2999      00
 3000              	.LASF64:
 3001 0a5c 4D55585F 		.ascii	"MUX_SWITCH_DS_CTRL\000"
 3001      53574954 
 3001      43485F44 
 3001      535F4354 
 3001      524C00
 3002              	.LASF70:
 3003 0a6f 5341525F 		.ascii	"SAR_V1_Type\000"
 3003      56315F54 
 3003      79706500 
 3004              	.LASF130:
 3005 0a7b 70657269 		.ascii	"periDivCmdDivSelMsk\000"
 3005      44697643 
 3005      6D644469 
 3005      7653656C 
 3005      4D736B00 
 3006              	.LASF39:
 3007 0a8f 4348414E 		.ascii	"CHAN_RESULT_NEWVALUE\000"
 3007      5F524553 
 3007      554C545F 
 3007      4E455756 
 3007      414C5545 
 3008              	.LASF117:
 3009 0aa4 666C6173 		.ascii	"flashCtlMainWs2Freq\000"
 3009      6843746C 
 3009      4D61696E 
 3009      57733246 
 3009      72657100 
 3010              	.LASF242:
 3011 0ab8 43795F53 		.ascii	"Cy_SAR_GetResult16\000"
 3011      41525F47 
 3011      65745265 
 3011      73756C74 
 3011      313600
 3012              	.LASF207:
 3013 0acb 656E6162 		.ascii	"enablePeriodSwap\000"
 3013      6C655065 
 3013      72696F64 
 3013      53776170 
 3013      00
 3014              	.LASF31:
 3015 0adc 52455345 		.ascii	"RESERVED2\000"
 3015      52564544 
 3015      3200
 3016              	.LASF185:
 3017 0ae6 636F6D70 		.ascii	"compareOrCapture\000"
 3017      6172654F 
 3017      72436170 
 3017      74757265 
 3017      00
 3018              	.LASF101:
 3019 0af7 73727373 		.ascii	"srssNumHfroot\000"
 3019      4E756D48 
 3019      66726F6F 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 118


 3019      7400
 3020              	.LASF35:
 3021 0b05 52455345 		.ascii	"RESERVED4\000"
 3021      52564544 
 3021      3400
 3022              	.LASF114:
 3023 0b0f 666C6173 		.ascii	"flashEraseDelay\000"
 3023      68457261 
 3023      73654465 
 3023      6C617900 
 3024              	.LASF97:
 3025 0b1f 63707573 		.ascii	"cpussFmIrq\000"
 3025      73466D49 
 3025      727100
 3026              	.LASF18:
 3027 0b2a 75696E74 		.ascii	"uint32_t\000"
 3027      33325F74 
 3027      00
 3028              	.LASF224:
 3029 0b33 6368616E 		.ascii	"chan\000"
 3029      00
 3030              	.LASF152:
 3031 0b38 63707573 		.ascii	"cpussCm4NmiCtlOffset\000"
 3031      73436D34 
 3031      4E6D6943 
 3031      746C4F66 
 3031      66736574 
 3032              	.LASF72:
 3033 0b4d 6C6F6E67 		.ascii	"long double\000"
 3033      20646F75 
 3033      626C6500 
 3034              	.LASF160:
 3035 0b59 63686172 		.ascii	"char\000"
 3035      00
 3036              	.LASF238:
 3037 0b5e 436F756E 		.ascii	"Counter_4_config\000"
 3037      7465725F 
 3037      345F636F 
 3037      6E666967 
 3037      00
 3038              	.LASF91:
 3039 0b6f 70726F74 		.ascii	"protVersion\000"
 3039      56657273 
 3039      696F6E00 
 3040              	.LASF154:
 3041 0b7b 63707573 		.ascii	"cpussRam0Ctl0\000"
 3041      7352616D 
 3041      3043746C 
 3041      3000
 3042              	.LASF1:
 3043 0b89 7369676E 		.ascii	"signed char\000"
 3043      65642063 
 3043      68617200 
 3044              	.LASF5:
 3045 0b95 5F5F7569 		.ascii	"__uint16_t\000"
 3045      6E743136 
 3045      5F7400
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 119


 3046              	.LASF235:
 3047 0ba0 50574D5F 		.ascii	"PWM_L_config\000"
 3047      4C5F636F 
 3047      6E666967 
 3047      00
 3048              	.LASF135:
 3049 0bad 70657269 		.ascii	"periDiv16CtlOffset\000"
 3049      44697631 
 3049      3643746C 
 3049      4F666673 
 3049      657400
 3050              	.LASF47:
 3051 0bc0 53415455 		.ascii	"SATURATE_INTR_MASKED\000"
 3051      52415445 
 3051      5F494E54 
 3051      525F4D41 
 3051      534B4544 
 3052              	.LASF88:
 3053 0bd5 6873696F 		.ascii	"hsiomVersion\000"
 3053      6D566572 
 3053      73696F6E 
 3053      00
 3054              	.LASF46:
 3055 0be2 53415455 		.ascii	"SATURATE_INTR_MASK\000"
 3055      52415445 
 3055      5F494E54 
 3055      525F4D41 
 3055      534B00
 3056              	.LASF106:
 3057 0bf5 75646250 		.ascii	"udbPresent\000"
 3057      72657365 
 3057      6E7400
 3058              	.LASF113:
 3059 0c00 666C6173 		.ascii	"flashProgramDelay\000"
 3059      6850726F 
 3059      6772616D 
 3059      44656C61 
 3059      7900
 3060              	.LASF218:
 3061 0c12 43795F53 		.ascii	"Cy_SAR_SetRangeInterruptMask\000"
 3061      41525F53 
 3061      65745261 
 3061      6E676549 
 3061      6E746572 
 3062              	.LASF168:
 3063 0c2f 72785269 		.ascii	"rxRingBufSize\000"
 3063      6E674275 
 3063      6653697A 
 3063      6500
 3064              	.LASF193:
 3065 0c3d 72656C6F 		.ascii	"reloadInput\000"
 3065      6164496E 
 3065      70757400 
 3066              	.LASF6:
 3067 0c49 73686F72 		.ascii	"short unsigned int\000"
 3067      7420756E 
 3067      7369676E 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 120


 3067      65642069 
 3067      6E7400
 3068              	.LASF121:
 3069 0c5c 64774368 		.ascii	"dwChSize\000"
 3069      53697A65 
 3069      00
 3070              	.LASF197:
 3071 0c65 73746F70 		.ascii	"stopInput\000"
 3071      496E7075 
 3071      7400
 3072              	.LASF226:
 3073 0c6f 61646343 		.ascii	"adcCounts\000"
 3073      6F756E74 
 3073      7300
 3074              	.LASF32:
 3075 0c79 4348414E 		.ascii	"CHAN_WORK\000"
 3075      5F574F52 
 3075      4B00
 3076              	.LASF96:
 3077 0c83 63707573 		.ascii	"cpussIpc0Irq\000"
 3077      73497063 
 3077      30497271 
 3077      00
 3078              	.LASF65:
 3079 0c90 4D55585F 		.ascii	"MUX_SWITCH_SQ_CTRL\000"
 3079      53574954 
 3079      43485F53 
 3079      515F4354 
 3079      524C00
 3080              	.LASF206:
 3081 0ca3 70657269 		.ascii	"period1\000"
 3081      6F643100 
 3082              	.LASF244:
 3083 0cab 43795F53 		.ascii	"Cy_SAR_RawCounts2Counts\000"
 3083      41525F52 
 3083      6177436F 
 3083      756E7473 
 3083      32436F75 
 3084              	.LASF143:
 3085 0cc3 63707573 		.ascii	"cpussCm0ClockCtlOffset\000"
 3085      73436D30 
 3085      436C6F63 
 3085      6B43746C 
 3085      4F666673 
 3086              	.LASF139:
 3087 0cda 6770696F 		.ascii	"gpioPrtCfgOffset\000"
 3087      50727443 
 3087      66674F66 
 3087      66736574 
 3087      00
 3088              	.LASF171:
 3089 0ceb 72784275 		.ascii	"rxBuf\000"
 3089      6600
 3090              	.LASF115:
 3091 0cf1 666C6173 		.ascii	"flashCtlMainWs0Freq\000"
 3091      6843746C 
 3091      4D61696E 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 121


 3091      57733046 
 3091      72657100 
 3092              	.LASF178:
 3093 0d05 63795F73 		.ascii	"cy_stc_scb_uart_context_t\000"
 3093      74635F73 
 3093      63625F75 
 3093      6172745F 
 3093      636F6E74 
 3094              	.LASF58:
 3095 0d1f 53544154 		.ascii	"STATUS\000"
 3095      555300
 3096              	.LASF140:
 3097 0d26 6770696F 		.ascii	"gpioPrtCfgInOffset\000"
 3097      50727443 
 3097      6667496E 
 3097      4F666673 
 3097      657400
 3098              	.LASF230:
 3099 0d39 4C696768 		.ascii	"LightSensor_Init\000"
 3099      7453656E 
 3099      736F725F 
 3099      496E6974 
 3099      00
 3100              	.LASF98:
 3101 0d4a 63707573 		.ascii	"cpussNotConnectedIrq\000"
 3101      734E6F74 
 3101      436F6E6E 
 3101      65637465 
 3101      64497271 
 3102              	.LASF237:
 3103 0d5f 436F756E 		.ascii	"Counter_2_config\000"
 3103      7465725F 
 3103      325F636F 
 3103      6E666967 
 3103      00
 3104              	.LASF209:
 3105 0d70 696E7665 		.ascii	"invertPWMOutN\000"
 3105      72745057 
 3105      4D4F7574 
 3105      4E00
 3106              	.LASF112:
 3107 0d7e 666C6173 		.ascii	"flashWriteDelay\000"
 3107      68577269 
 3107      74654465 
 3107      6C617900 
 3108              	.LASF37:
 3109 0d8e 4348414E 		.ascii	"CHAN_RESULT_UPDATED\000"
 3109      5F524553 
 3109      554C545F 
 3109      55504441 
 3109      54454400 
 3110              	.LASF14:
 3111 0da2 75696E74 		.ascii	"uint8_t\000"
 3111      385F7400 
 3112              	.LASF210:
 3113 0daa 6B696C6C 		.ascii	"killMode\000"
 3113      4D6F6465 
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 122


 3113      00
 3114              	.LASF145:
 3115 0db3 63707573 		.ascii	"cpussCm4StatusOffset\000"
 3115      73436D34 
 3115      53746174 
 3115      75734F66 
 3115      66736574 
 3116              	.LASF138:
 3117 0dc8 6770696F 		.ascii	"gpioPrtIntrCfgOffset\000"
 3117      50727449 
 3117      6E747243 
 3117      66674F66 
 3117      66736574 
 3118              	.LASF215:
 3119 0ddd 63795F73 		.ascii	"cy_stc_tcpwm_pwm_config_t\000"
 3119      74635F74 
 3119      6370776D 
 3119      5F70776D 
 3119      5F636F6E 
 3120              	.LASF192:
 3121 0df7 72656C6F 		.ascii	"reloadInputMode\000"
 3121      6164496E 
 3121      7075744D 
 3121      6F646500 
 3122              	.LASF170:
 3123 0e07 72785269 		.ascii	"rxRingBufTail\000"
 3123      6E674275 
 3123      66546169 
 3123      6C00
 3124              	.LASF186:
 3125 0e15 636F6D70 		.ascii	"compare0\000"
 3125      61726530 
 3125      00
 3126              	.LASF187:
 3127 0e1e 636F6D70 		.ascii	"compare1\000"
 3127      61726531 
 3127      00
 3128              	.LASF149:
 3129 0e27 63707573 		.ascii	"cpussTrimRomCtlOffset\000"
 3129      73547269 
 3129      6D526F6D 
 3129      43746C4F 
 3129      66667365 
 3130              	.LASF229:
 3131 0e3d 4144435F 		.ascii	"ADC_1_my_ISR\000"
 3131      315F6D79 
 3131      5F495352 
 3131      00
 3132              	.LASF198:
 3133 0e4a 636F756E 		.ascii	"countInputMode\000"
 3133      74496E70 
 3133      75744D6F 
 3133      646500
 3134              	.LASF241:
 3135 0e59 73616D70 		.ascii	"sample_uV\000"
 3135      6C655F75 
 3135      5600
ARM GAS  C:\Users\mcfdo\AppData\Local\Temp\cctHiGjT.s 			page 123


 3136              	.LASF85:
 3137 0e63 64775665 		.ascii	"dwVersion\000"
 3137      7273696F 
 3137      6E00
 3138              	.LASF81:
 3139 0e6d 69706342 		.ascii	"ipcBase\000"
 3139      61736500 
 3140              	.LASF248:
 3141 0e75 6C696768 		.ascii	"light_sensor.c\000"
 3141      745F7365 
 3141      6E736F72 
 3141      2E6300
 3142              	.LASF132:
 3143 0e84 70657269 		.ascii	"periDivCmdPaDivSelPos\000"
 3143      44697643 
 3143      6D645061 
 3143      44697653 
 3143      656C506F 
 3144              	.LASF179:
 3145 0e9a 63795F73 		.ascii	"cy_stc_scb_uart_context\000"
 3145      74635F73 
 3145      63625F75 
 3145      6172745F 
 3145      636F6E74 
 3146              	.LASF199:
 3147 0eb2 636F756E 		.ascii	"countInput\000"
 3147      74496E70 
 3147      757400
 3148              	.LASF183:
 3149 0ebd 72756E4D 		.ascii	"runMode\000"
 3149      6F646500 
 3150              	.LASF83:
 3151 0ec5 63707573 		.ascii	"cpussVersion\000"
 3151      73566572 
 3151      73696F6E 
 3151      00
 3152              	.LASF205:
 3153 0ed2 70657269 		.ascii	"period0\000"
 3153      6F643000 
 3154              	.LASF110:
 3155 0eda 666C6173 		.ascii	"flashRwwRequired\000"
 3155      68527777 
 3155      52657175 
 3155      69726564 
 3155      00
 3156              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
